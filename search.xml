<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>植物大战僵尸杂交版白眼巨人海</title>
      <link href="/posts/a320.html"/>
      <url>/posts/a320.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>感受大军压境的绝望吧</p></blockquote><h3 id="Bilibili"><a href="#Bilibili" class="headerlink" title="Bilibili"></a>Bilibili</h3><iframe style="width: 100%; aspect-ratio: 16 / 9;"src="//player.bilibili.com/player.html?isOutside=true&aid=112830653140049&bvid=BV1tw8beFEJj&cid=500001623925667&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><h3 id="DPlayer"><a href="#DPlayer" class="headerlink" title="DPlayer"></a>DPlayer</h3><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"video":{"url":"https://pan.cngo.us.kg/raw/%E7%99%BD%E7%9C%BC%E5%B7%A8%E4%BA%BA%E6%B5%B7.mp4","pic":"https://www.jmsedu.net/uploads/images/20240705/20240705101529_58923.png"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><h3 id="DogeCloud"><a href="#DogeCloud" class="headerlink" title="DogeCloud"></a>DogeCloud</h3><div id="player_819b1b20ac4c02a2"></div><script type="text/javascript" src="https://player.dogecloud.com/js/loader"></script><script type="text/javascript">var player = new DogePlayer({    container: document.getElementById('player_819b1b20ac4c02a2'),    userId: 10272,    vcode: '819b1b20ac4c02a2',    autoPlay: false});</script>]]></content>
      
      
      <categories>
          
          <category> Uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象(下)-1</title>
      <link href="/posts/ae84.html"/>
      <url>/posts/ae84.html</url>
      
        <content type="html"><![CDATA[<div class="note note-success">            <p>对应《疯狂Java讲义（第5版）》6.1-6.4 章节</p>          </div><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>即8个基本类型包装为对象。</p><p>基本类型在<strong>栈</strong>中直接存储的具体数值，而包装类型则存储的是<strong>堆</strong>中的引用。</p><p>相比较于基本类型而言，包装类型需要占用更多的内存空间，但基本类型不具备“<strong>对象</strong>”的特性。</p><table><thead><tr><th>基本数据类型（默认值）</th><th>包装类（默认值）</th><th>取值范围</th></tr></thead><tbody><tr><td>byte (0)</td><td>Byte (null)</td><td>-128～127</td></tr><tr><td>short (0)</td><td>Short (null)</td><td>-32768～32767</td></tr><tr><td>int (0)</td><td>Integer (null)</td><td>-231 ～ 2(31-1)</td></tr><tr><td>long (0)</td><td>Long (null)</td><td>-263 ~ 2(63-1)</td></tr><tr><td>float (0.0)</td><td>Float (null)</td><td>1.4E-45~3.4028235E38</td></tr><tr><td>double (0.0)</td><td>Double (null)</td><td>4.9E-324~1.7976931348623157E308</td></tr><tr><td>boolean (false)</td><td>Boolean (null)</td><td>true或false</td></tr><tr><td>char (为空)</td><td>Character (null)</td><td>0～65535</td></tr></tbody></table><h3 id="自动装箱，自动拆箱（JDK-1-5）"><a href="#自动装箱，自动拆箱（JDK-1-5）" class="headerlink" title="自动装箱，自动拆箱（JDK 1.5）"></a>自动装箱，自动拆箱（JDK 1.5）</h3><p>定义：基本数据类型和包装类之间可以自动地相互转换</p><p>理解：装箱就是自动将基本数据类型转换为封装类型，拆箱就是自动将封装类型转换为基本数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;     <span class="hljs-comment">// 自动装箱</span><br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> b;          <span class="hljs-comment">// 自动拆箱</span><br><span class="hljs-comment">//实际执行</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> Integer.valueOf(<span class="hljs-number">10</span>);  <span class="hljs-comment">// 自动装箱</span><br><span class="hljs-type">int</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> d.intValue();             <span class="hljs-comment">// 自动拆箱</span><br></code></pre></td></tr></table></figure><h3 id="字符串和基本类型转换"><a href="#字符串和基本类型转换" class="headerlink" title="字符串和基本类型转换"></a>字符串和基本类型转换</h3><table><thead><tr><th>类型</th><th>方法</th></tr></thead><tbody><tr><td>字符串转基本型</td><td>使用包装类的 <code>parseXXX</code> 或 <code>valueof</code> 静态方法</td></tr><tr><td>基本型转字符串</td><td>使用包装类的 <code>toString</code> 或 String类的<code>valueof</code> 静态方法</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//基本型转字符串</span><br><span class="hljs-type">int</span> <span class="hljs-variable">hh</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> hh + <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> String.valueOf(hh);<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> Integer.toString(hh);<br><span class="hljs-comment">//字符串转基本型</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> Integer.parseInt(str);<br><span class="hljs-type">int</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> Integer.valueOf(str);<br></code></pre></td></tr></table></figure><h3 id="包装类和基本类型之间的比较"><a href="#包装类和基本类型之间的比较" class="headerlink" title="包装类和基本类型之间的比较"></a>包装类和基本类型之间的比较</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1）基本类型和包装类型</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>System.out.println(a == b); <span class="hljs-comment">// true</span><br> <br><span class="hljs-comment">// 2）两个包装类型</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>System.out.println(c == d); <span class="hljs-comment">// true</span><br> <br><span class="hljs-comment">// 3）</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br>System.out.println(c == d); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><ul><li><p>第一段代码，基本类型和包装类型进行 &#x3D;&#x3D; 比较，这时候 b 会自动拆箱，直接和 a 比较值，所以结果为 true；</p></li><li><p>第二段代码，两个包装类型都被赋值为了100，这时候会自动装箱。-128 到 127 之间的整型对象是从  <code>IntegerCache</code> 中获取然后比较，所以结果为 true；</p><p>TIPS：<strong>当需要进行自动装箱时，如果数字在 -128 至 127 之间时，会直接使用缓存中的对象，而不用重新创建一个对象。</strong></p></li><li><p>第三段代码，两个包装类型重新被赋值为了200，这时候仍然会进行自动装箱，结果是 true，但两个包装类的对象不一致，结果为false。</p><p>此时 &#x3D;&#x3D; 操作符应用于两个<strong>引用类型</strong>的比较，比较的是两个引用类型的引用地址是否相同，即是否为同一个对象。</p></li></ul><h3 id="Java7为所有包装类提供compare静态方法"><a href="#Java7为所有包装类提供compare静态方法" class="headerlink" title="Java7为所有包装类提供compare静态方法"></a>Java7为所有包装类提供<code>compare</code>静态方法</h3><p>java.lang包的Integer类的compare()方法比较作为参数给出的两个整数值(x，y)，如果(x &#x3D;&#x3D; y)则返回零，如果(x &lt; y)则返回小于零的值，如果(x &gt; y)，则返回大于零的值。</p><h3 id="整形包装类无符号数运算"><a href="#整形包装类无符号数运算" class="headerlink" title="整形包装类无符号数运算"></a>整形包装类无符号数运算</h3><p>参考《 疯狂java讲义第五版》P171</p><h2 id="打印对象-和-toString方法"><a href="#打印对象-和-toString方法" class="headerlink" title="打印对象 和 toString方法"></a>打印对象 和 toString方法</h2><p>toString()是一个“自我描述”方法，通常继承于Object类，其返回值类型为String类型，返回类名和它的引用地址，如<code>Person@15db9742</code></p><p>对象打印自动调用toString方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(s1);<span class="hljs-comment">//相当于下一行代码</span><br>System.out.println(s1.toString());<br></code></pre></td></tr></table></figure><p>在进行String类与其他类型的连接操作时，自动调用toString()方法，demo如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Date</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>System.out.println(<span class="hljs-string">&quot;now = &quot;</span> + now);<span class="hljs-comment">//相当于下一行代码</span><br>System.out.println(<span class="hljs-string">&quot;now = &quot;</span> + now.toString());<br></code></pre></td></tr></table></figure><p>重写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> string <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> &#123;字符串值&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="和-equals方法"><a href="#和-equals方法" class="headerlink" title="&#x3D;&#x3D; 和 equals方法"></a>&#x3D;&#x3D; 和 equals方法</h2><p>“&#x3D;&#x3D;”比较基本数据类型时比较<u>数值是否相等</u>（不要求数据类型严格相同），而比较两个对象时比较的是<u>两个对象的内存地址值，即是否指向同一对象</u>（对象必须同类型或有父子关系）</p><p>对于equals()方法（默认从Object继承），注意：<strong>equals方法不能作用于基本数据类型的变量</strong></p><blockquote><p>如果没有对equals()方法进行重写，则比较的是引用类型的变量所指向的对象的地址；</p><p>诸如String、Date等类对equals方法进行了重写的话，比较的是所指向的对象的内容</p></blockquote><h3 id="如何正确重写equals方法？"><a href="#如何正确重写equals方法？" class="headerlink" title="如何正确重写equals方法？"></a>如何正确重写equals方法？</h3><ol><li><strong>对称性</strong>：如果<code>x.equals(y)</code>返回<code>true</code>，那么<code>y.equals(x)</code>也应该返回<code>true</code>。</li><li><strong>传递性</strong>：如果<code>x.equals(y)</code>和<code>y.equals(z)</code>都返回<code>true</code>，那么<code>x.equals(z)</code>也应该返回<code>true</code>。</li><li><strong>一致性</strong>：如果对象没有被修改，那么多次调用<code>x.equals(y)</code>应该始终返回<code>true</code>或<code>false</code>。</li><li><strong>非空性</strong>：<code>x.equals(null)</code>应该返回<code>false</code>。</li><li><strong>自反性</strong>：<code>x.equals(x)</code>应该返回<code>true</code>。</li></ol><p>在重写<code>equals</code>方法时，我们应该考虑上述五个原则。此外，通常我们还需要重写<code>hashCode</code>方法，以确保满足散列合同的约定。</p><p>下面是一个<code>Person</code>类重写<code>equals</code>方法的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-comment">// 构造方法、getter和setter方法省略</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == obj) &#123;<span class="hljs-comment">//同一对象</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span> || getClass() != obj.getClass()) &#123;<span class="hljs-comment">//类型一致</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> (Person) obj; <span class="hljs-comment">//类型转换</span><br>        <span class="hljs-keyword">return</span> age == other.age &amp;&amp; name.equals(other.name);<span class="hljs-comment">//自定义判断</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类成员-static"><a href="#类成员-static" class="headerlink" title="类成员 static"></a>类成员 static</h2><p>static不能修饰构造器，</p><p>类成员属于整个类，不属于单个对象，但可通过对象（即使为null）访问类成员，实际仍通过类访问</p><p>类成员（static修饰）无法访问实例成员，<em>因为类成员初始化完成时，实例成员不一定初始化完成</em></p><h2 id="单例（Singleton）类"><a href="#单例（Singleton）类" class="headerlink" title="单例（Singleton）类"></a>单例（Singleton）类</h2><p>类构造器由private修饰，隐藏起来，提供一个Public方法(<strong>必须为static</strong>)，用于创建和访问该类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton sin; <span class="hljs-comment">//缓存已创建对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-comment">//保证只产生一个Singleton对象</span><br>        <span class="hljs-keyword">if</span>(sin == <span class="hljs-literal">null</span>)<br>            sin = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>        <span class="hljs-keyword">return</span> sin;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="final修饰符"><a href="#final修饰符" class="headerlink" title="final修饰符"></a>final修饰符</h2><p>表示修饰的类、方法和变量不可改变</p><p>修饰变量时，表示<strong>获得初始值后不可被重新赋值</strong></p><h3 id="final成员变量"><a href="#final成员变量" class="headerlink" title="final成员变量"></a>final成员变量</h3><p>必须显示指定初始值</p><p>必须在初始化块、声明变量时或构造器(非静态变量)中指定初始值</p><blockquote><p>final修饰引用变量时,只保证引用地址不发生改变,但引用的对象可能发生改变</p></blockquote><h3 id="final-宏变量"><a href="#final-宏变量" class="headerlink" title="final 宏变量"></a>final 宏变量</h3><p>宏变量相当于一个直接量，程序会直接把宏变量替换成直接量,成为宏变量的条件如下:</p><ol><li>final修饰</li><li>定义变量时指定了初始值</li><li>该初始值在编译时就可以确定下来</li></ol><p>其2中包括赋直接量,或者基本算数表达式或字符串连接运算,<em>没有访问普通变量或调用方法</em>即可</p><h3 id="final方法和final类"><a href="#final方法和final类" class="headerlink" title="final方法和final类"></a>final方法和final类</h3><p>final修饰public方法时,表示其不可被重写</p><p>final修饰private方法用处不大,因为private方法无法继承,更无法重写,如果*子类出现完全相同的方法,*也只是重新定义了一个新方法</p><blockquote><p>final修饰的方法仍可重载</p></blockquote><p>final修饰类,表示该类不可被继承</p><h2 id="不可变-Immutable-类"><a href="#不可变-Immutable-类" class="headerlink" title="不可变(Immutable)类"></a>不可变(Immutable)类</h2><p>不可变类（Immutable class）是指当一个对象被创建出来以后，它的值就不能被修改了，也就是说，一个对象一旦被创建出来，在其整个<a href="https://so.csdn.net/so/search?q=%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F&spm=1001.2101.3001.7020">生命周期</a>中，它的成员变量就不能被修改了。它有点类似于常量（const），只允许别的程序读，而不允许别的程序进行修改。如8个包装类以及java.lang.String类</p><p>在Java类库中，所有基本类型的包装类都是不可变类，例如Integer、Float等。此外，String也是不可变类。</p><h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><ol><li>类中所有的成员变量被private和final所修饰</li><li>提供带参数的构造器或实例方法，根据参数初始化成员变量</li><li>仅提供成员变量的getter方法</li><li><strong>如果某成员变量为引用变量，需通过new新建临时对象并克隆该成员变量值后返回</strong></li><li>如果有必要，可以通过覆盖 Object 类的 equals()方法和hashCode()方法。在 equals()方法中，根据对象的属性值来比较两个对象是否相等，并且保证用 equals()方法判断为相等的两个对象的hashCode()方法的返回值也相等，这可以保证这些对象能正确地放到HashMap或HashSet集合中</li></ol><h3 id="缓存实例的不可变类"><a href="#缓存实例的不可变类" class="headerlink" title="缓存实例的不可变类"></a>缓存实例的不可变类</h3><p>不可变类的实例状态不可变，可以方便的被多个对象共享。若程序经常使用相同的不可变类实例，则应考虑缓存改实例，从而避免反复创建该对象，降低系统开销。但是也不能盲目使用缓存，因为缓存对象会占用系统内存。</p><p>可借助数组实现缓存,例如Integer类</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 类与对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数组类型</title>
      <link href="/posts/2595.html"/>
      <url>/posts/2595.html</url>
      
        <content type="html"><![CDATA[<div class="note note-success">            <p>对应《疯狂Java讲义（第5版）》4.5-4.6 章节</p>          </div><h3 id="理解数组"><a href="#理解数组" class="headerlink" title="理解数组"></a>理解数组</h3><p>一个数组只能存取一种数据类型</p><p>数组所占的空间固定，长度不可改变</p><p>type[ ]也是一种数据类型</p><h3 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h3><p>仅仅定义了一个引用变量，并未指向任何有效内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//推荐：</span><br>type[] arrayName;<br>type arrayName[];<br></code></pre></td></tr></table></figure><h3 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h3><p>为数组的元素分配内存空间，并赋初始值</p><ul><li><p>静态初始化</p><p>显示指定初始值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">arrayName = <span class="hljs-keyword">new</span> <span class="hljs-title class_">type</span>[] &#123;element1, element2, ...&#125;;<br><span class="hljs-comment">//简化</span><br>type[] arrayName = &#123;element1, element2, ...&#125;;<br></code></pre></td></tr></table></figure></li><li><p>动态初始化</p><p>只指定长度，初始值为 0，0.0，false 或 null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">arrayName = <span class="hljs-keyword">new</span> <span class="hljs-title class_">type</span>[length];<br></code></pre></td></tr></table></figure></li></ul><h3 id="使用数组"><a href="#使用数组" class="headerlink" title="使用数组"></a>使用数组</h3><h3 id="深入数组"><a href="#深入数组" class="headerlink" title="深入数组"></a>深入数组</h3><h3 id="操作数组的工具类：Arrays"><a href="#操作数组的工具类：Arrays" class="headerlink" title="操作数组的工具类：Arrays"></a>操作数组的工具类：Arrays</h3>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google人机验证reCAPTCHA打不开的解决方法</title>
      <link href="/posts/965.html"/>
      <url>/posts/965.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>转载：<a href="https://blog.csdn.net/qq_75224363/article/details/137157840">Google 人机验证reCAPTCHA打不开的解决方法_recaptcha验证加载不出-CSDN博客</a></p></blockquote><p>有些网页中使用了Google reCAPTCHA人机验证，但是由于国内无法访问Google服务，所以导致页面无法正常加载和运行，如注册和登录等。Google reCAPTCHA的js地址如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">https</span>:<span class="hljs-comment">//www.google.com/recaptcha/api.js</span><br></code></pre></td></tr></table></figure><p>目前解决的方案是通过在浏览器中安装相关扩展，将对Google reCAPTCHA相关地址的访问重定向到国内可以访问的另一reCAPTCHA服务地址：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">https://recaptcha.net/recaptcha/api.js<br></code></pre></td></tr></table></figure><h3 id="二、-解决方法一-Header-Editor"><a href="#二、-解决方法一-Header-Editor" class="headerlink" title="二、 解决方法一 Header Editor"></a>二、 解决方法一 Header Editor</h3><h4 id="第一步、安装插件"><a href="#第一步、安装插件" class="headerlink" title="第一步、安装插件"></a>第一步、安装插件</h4><p>这里安装的是<a href="http://github.com/FirefoxBar/HeaderEditor">Header Editor插件</a>这款插件，Firefox从<a href="http://addons.mozilla.org/firefox/addon/header-editor/">这里</a>安装，Chrome从<a href="http://chrome.google.com/webstore/detail/header-editor/eningockdidmgiojffjmkdblpjocbhgh">这里</a>安装。</p><h4 id="第二步、配置规则"><a href="#第二步、配置规则" class="headerlink" title="第二步、配置规则"></a>第二步、配置规则</h4><p>安装完插件后，在工具栏中点击该插件，弹出配置界面，作如下配置：</p><p>1，打开右上角的扩展，在工具栏调出 Header Editor 扩展插件。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/536440183028e0332530d232d41c309a.png" alt="img"></p><p>2，配置 Header Editor 扩展插件，转到管理 &gt; 导入和导出，输入 github 的地址，点击下载按钮导入下载规则，规则包括 Google APIs，reCaptcha 和 Content Security。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>azurezeng.github.io<span class="hljs-regexp">/static/</span>HE-GoogleRedirect.json<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/69bb71ab0556db3df18a3ec41c40ec09.png" alt="img"></p><p>3，最后保存下载规则，就成功配置 Header Editor 扩展插件了，下次再使用微软浏览器访问 Themeforest 账号注册页面，就能正常显示谷歌 reCAPTCHA 验证码。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2d05d6afb13e16daddabd5580c59e072.png" alt="img"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>目前本方案支持 Chrome 电脑版 和 Firefox (手机和电脑版都可以)。根据所使用的浏览器的不同有不同的操作方法。</p>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reCAPTCHA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo自动更新文章修改时间</title>
      <link href="/posts/da68.html"/>
      <url>/posts/da68.html</url>
      
        <content type="html"><![CDATA[<p>参考链接: <a href="https://www.cnblogs.com/yyyzyyyz/p/15792199.html">hexo自动更新文章修改时间 - yyyz - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Fluid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用GitHub Actions自动编译部署hexo博客</title>
      <link href="/posts/428a.html"/>
      <url>/posts/428a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考：</p><p><a href="https://www.cnblogs.com/ssgeek/p/15009012.html#2github%E5%92%8Cgitee%E5%90%8C%E6%AD%A5">🔗利用Github Action实现Github到Gitee的持续同步 - SSgeek - 博客园 (cnblogs.com)</a></p><p><a href="https://www.cnblogs.com/Fungit/p/github-acionts-automatically-compile-deploy.html">🔗使用GitHub Actions自动编译部署hexo博客 - Fungit - 博客园 (cnblogs.com)</a></p></blockquote><h3 id="配置SSH，使action可以推送代码"><a href="#配置SSH，使action可以推送代码" class="headerlink" title="配置SSH，使action可以推送代码"></a>配置SSH，使action可以推送代码</h3><p>首先在本地生成一个<code>ssh</code>密钥对</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -f ~/Documents/ssh-key/id_rsa(对应路径即可)<br></code></pre></td></tr></table></figure><p>找到<code>id_rsa.pub</code>文件,在Github<code>SSH</code>公钥中添加上面生成的密钥对的公钥，或<code>settings</code>—&gt;<code>Deploy key</code>(仅对当前仓库有效)</p><p>找到<code>id_rsa</code>文件，在<code>github</code>打开对应action的仓库<code>settings</code>—&gt;<code>secrets</code>，新建一个仓库<code>secret</code>，名为<code>HEXO_DEPLOY_KEY</code>，值为上面生成的密钥对的私钥</p><h3 id="配置action"><a href="#配置action" class="headerlink" title="配置action"></a>配置action</h3><p>在仓库新建<code>/.github/workflows/pages.yml</code></p><blockquote><p>配置ssh位置 <code>/home/runner/.ssh/</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">hexo</span> <span class="hljs-string">site</span> <span class="hljs-string">to</span> <span class="hljs-string">Pages</span> <span class="hljs-comment"># 脚本 workflow 名称</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> [<span class="hljs-string">main</span>] <span class="hljs-comment"># 当监测 main,master 的 push</span><br>    <span class="hljs-attr">paths:</span> <span class="hljs-comment"># 监测所有 source 目录下的文件变动，所有 yml,json 后缀文件的变动。</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*.json&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**.yml&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/source/**&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/scripts/**&#x27;</span><br><br><span class="hljs-comment"># Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages</span><br><span class="hljs-attr">permissions:</span><br>  <span class="hljs-attr">contents:</span> <span class="hljs-string">read</span><br>  <span class="hljs-attr">pages:</span> <span class="hljs-string">write</span><br>  <span class="hljs-attr">id-token:</span> <span class="hljs-string">write</span><br><br><span class="hljs-comment"># Default to bash</span><br><span class="hljs-attr">defaults:</span><br>  <span class="hljs-attr">run:</span><br>    <span class="hljs-attr">shell:</span> <span class="hljs-string">bash</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span> <span class="hljs-comment"># 任务名称</span><br>    <span class="hljs-attr">timeout-minutes:</span> <span class="hljs-number">30</span> <span class="hljs-comment"># 设置 30 分钟超时</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span> <span class="hljs-comment"># 指定最新 ubuntu 系统</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v4</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-comment"># If your repository depends on submodule, please see: https://github.com/actions/checkout</span><br>          <span class="hljs-attr">submodules:</span> <span class="hljs-string">recursive</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-number">20</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v4</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-comment"># Examples: 20, 18.19, &gt;=16.20.2, lts/Iron, lts/Hydrogen, *, latest, current, node</span><br>          <span class="hljs-comment"># Ref: https://github.com/actions/setup-node#supported-version-syntax</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&quot;20&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Cache</span> <span class="hljs-string">NPM</span> <span class="hljs-string">dependencies</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache@v4</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">node_modules</span><br>          <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.OS</span> <span class="hljs-string">&#125;&#125;-npm-cache</span><br>          <span class="hljs-attr">restore-keys:</span> <span class="hljs-string">|</span><br><span class="hljs-string">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">Dependencies</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">Hexo-cli</span> <span class="hljs-comment"># 安装 Hexo</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          npm install -g hexo-cli --save</span><br><span class="hljs-string">          echo &quot;install hexo successful&quot;</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">Blog</span> <span class="hljs-comment"># 编译创建静态博客文件</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          hexo clean</span><br><span class="hljs-string">          hexo generate</span><br><span class="hljs-string">          echo &quot;build blog successful&quot;</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Set</span> <span class="hljs-string">ssh</span> <span class="hljs-string">Permission</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">ACTION_DEPLOY_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.HEXO_DEPLOY_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          rm -rf /home/runner/.ssh</span><br><span class="hljs-string">          mkdir -p /home/runner/.ssh/</span><br><span class="hljs-string">          echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; /home/runner/.ssh/id_rsa</span><br><span class="hljs-string">          chmod 700 /home/runner/.ssh</span><br><span class="hljs-string">          chmod 600 /home/runner/.ssh/id_rsa</span><br><span class="hljs-string">          ssh-keyscan github.com &gt;&gt; /home/runner/.ssh/known_hosts</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">to</span> <span class="hljs-string">Github</span> <span class="hljs-comment"># 设置 git 信息并推送静态博客文件</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          git config --global user.email &quot;deploy@qq.com&quot;</span><br><span class="hljs-string">          git config --global user.name &quot;deploy&quot;</span><br><span class="hljs-string">          hexo deploy</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;Deploy Successful!&quot;</span><br></code></pre></td></tr></table></figure><div class="note note-danger">            <p>经测试重新生成了一个初始博客文章<code>hello-world.md</code>,待解决</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github Action </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础知识</title>
      <link href="/posts/d2ff.html"/>
      <url>/posts/d2ff.html</url>
      
        <content type="html"><![CDATA[<div class="note note-success">            <p>对应《疯狂Java讲义（第5版）》1-3 ，4.1-4.4章节</p>          </div><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><ul><li><p>JVM（Java Virtual Machine），即java虚拟机，在执行字节码时，把字节码解释成具体平台上的机器指令执行。</p></li><li><p>JRE（Java Runtime Environment，Java运行环境），包含JVM标准实现及Java核心类库。JRE是Java运行环境，并不是一个开发环境，所以没有包含任何开发工具（如编译器和调试器）</p></li><li><p>JDK（Java Development Kit）是整个JAVA的核心，包括了Java运行环境（Java Runtime Envirnment），一堆Java工具（javac&#x2F;java&#x2F;jdb等）和Java基础的类库（即Java API 包括rt.jar）</p></li></ul><h3 id="执行方法"><a href="#执行方法" class="headerlink" title="执行方法"></a>执行方法</h3><ul><li><p>编译型语言</p><p>对于编译型语言，开发完成以后需要将所有的源代码都转换成可执行程序，比如 Windows 下的.exe文件，可执行程序里面包含的就是机器码。只要我们拥有可执行程序，就可以随时运行，不用再重新编译了，也就是“一次编译，无限次运行”。</p><blockquote><p>如C&#x2F;C++、Objective-C、Swift、kotlin</p></blockquote></li><li><p>解释型语言</p><p>对于解释型语言，每次执行程序都需要一边转换一边执行，用到哪些源代码就将哪些源代码转换成机器码，用不到的不进行任何处理。</p><blockquote><p>如JavaScript、Ruby、Python</p></blockquote></li><li><p>先解释，后编译</p><p>Java需要先经过编译步骤，将源代码编译为与平台无关的字节码（.class文件），再由JVM解释执行相应的字节码</p></li></ul><h3 id="编译Java程序"><a href="#编译Java程序" class="headerlink" title="编译Java程序"></a>编译Java程序</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">javac -d destdir srcFile<br></code></pre></td></tr></table></figure><p><code>-d destdir</code>指定编译生成字节码文件的存放路径，<code>srcFile</code>为Java源文件的位置。</p><h3 id="运行Java程序"><a href="#运行Java程序" class="headerlink" title="运行Java程序"></a>运行Java程序</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java Java类名<br></code></pre></td></tr></table></figure><h3 id="交互式开发工具"><a href="#交互式开发工具" class="headerlink" title="交互式开发工具"></a>交互式开发工具</h3><p> jshell</p><h3 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h3><p>javadoc</p><h3 id="结构化程序设计"><a href="#结构化程序设计" class="headerlink" title="结构化程序设计"></a>结构化程序设计</h3><p>三种基本结构：顺序结构、选择结构、循环结构</p><p>主要原则：自顶向下，逐步求精，模块化，面向功能</p><p>最小的设计单元为函数</p><p>局限性：  ①设计不够直观，与人类思维不一致，需保客观世界分解为功能</p><p>​②适应性差，可扩展性不强，自顶向下修改模块结构，维护成本高</p><h3 id="面向对象程序设计"><a href="#面向对象程序设计" class="headerlink" title="面向对象程序设计"></a>面向对象程序设计</h3><p>基本思想：使用类、对象、继承、封装、消息等基本概念，尽可能运用人类的自然思维方式，从客观存在的事物出发构造软件系统，把它们抽象的表示为类，作为系统的<strong>基本构成单元</strong></p><h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><p>类是对象的抽象，对象是类的实例</p><p>类之间的结构关系：一般➡️特殊（继承）， 整体➡️部分结构（组装）</p><p>面向对象的三种基本特性：继承、封装、多态</p><p>继承：子类继承父类，作为特殊的父类，将直接获得父类的属性和方法。</p><p>封装：将对象的实现细节隐藏起来，通过一些公用方法暴露对象功能</p><p>多态：子类对象可以直接赋给父类变量，但运行时仍然表现出子类的行为特征</p><p>抽象：忽略一个主题中与当前目标无关的方面，以便更充分的注意与当前目标有关的方面</p><h3 id="强类型语言"><a href="#强类型语言" class="headerlink" title="强类型语言"></a><strong>强类型语言</strong></h3><p>也称为强类型定义语言。Java 是一种总是强制类型定义的语言</p><p>①要求变量的使用要严格符合定义</p><p>②所有变量都必须先声明后使用</p><p>可以在编译过程中发现程序的错误，保证程序更加健壮。</p><h3 id="标识符规则"><a href="#标识符规则" class="headerlink" title="标识符规则"></a>标识符规则</h3><p>字母、下划线（_)、美元符（$）开头，后可跟数字、字母、下划线（_)、美元符（$）</p><blockquote><p>Java严格区分<strong>大小写</strong></p><p>所有关键字均小写</p></blockquote><h3 id="Java关键字"><a href="#Java关键字" class="headerlink" title="Java关键字"></a>Java关键字</h3>    <div class="fold">      <div class="fold-title fold-secondary collapsed" data-toggle="collapse" href="#collapse-c4d52b53" role="button" aria-expanded="false" aria-controls="collapse-c4d52b53">        <div class="fold-arrow">▶</div>点击展开      </div>      <div class="fold-collapse collapse" id="collapse-c4d52b53">        <div class="fold-content">          <table><thead><tr><th>关键字</th><th>大致含义</th></tr></thead><tbody><tr><td>abstract</td><td>表明类或者成员方法具有抽象属性</td></tr><tr><td>assert</td><td>断言，用来进行程序调试</td></tr><tr><td>boolean</td><td>基本数据类型之一，声明布尔类型的关键字</td></tr><tr><td>break</td><td>提前跳出一个块</td></tr><tr><td>byte</td><td>基本数据类型之一，字节类型</td></tr><tr><td>case</td><td>用在 switch 语句之中，表示其中的一个分支</td></tr><tr><td>catch</td><td>用在异常处理中，用来捕捉异常</td></tr><tr><td>char</td><td>基本数据类型之一，字符类型</td></tr><tr><td>class</td><td>声明一个类</td></tr><tr><td>const</td><td>保留关键字，没有具体含义</td></tr><tr><td>continue</td><td>回到一个块的开始处</td></tr><tr><td>default</td><td>默认，例如，用在 switch 语句中，表明一个默认的分支</td></tr><tr><td>do</td><td>用在 do-while 循环结构中</td></tr><tr><td>double</td><td>基本数据类型之一，双精度浮点数类型</td></tr><tr><td>else</td><td>用在条件语句中，表明当条件不成立时的分支</td></tr><tr><td>enum</td><td>枚举</td></tr><tr><td>extends</td><td>表明一个类型是另一个类型的子类型，这里常见的类型有类和接口</td></tr><tr><td>final</td><td>表示不可变，最终的</td></tr><tr><td>finally</td><td>用于处理异常情况，用来声明一个基本肯定会被执行到的语句块</td></tr><tr><td>float</td><td>基本数据类型之一，单精度浮点数类型</td></tr><tr><td>for</td><td>一种循环结构的引导词</td></tr><tr><td>goto</td><td>保留关键字，没有具体含义</td></tr><tr><td>if</td><td>条件语句的引导词</td></tr><tr><td>implements</td><td>表明一个类实现了给定的接口</td></tr><tr><td>import</td><td>表明要访问指定的类或包</td></tr><tr><td>instanceof</td><td>用来测试一个对象是否是指定类型的实例对象</td></tr><tr><td>int</td><td>基本数据类型之一，整数类型</td></tr><tr><td>interface</td><td>接口</td></tr><tr><td>long</td><td>基本数据类型之一，长整数类型</td></tr><tr><td>native</td><td>用来声明一个方法是由与计算机相关的语言（如 C&#x2F;C++语言）实现的</td></tr><tr><td>new</td><td>用来创建新实例对象</td></tr><tr><td>package</td><td>包</td></tr><tr><td>private</td><td>一种访问控制方式：私用模式</td></tr><tr><td>protected</td><td>一种访问控制方式：保护模式</td></tr><tr><td>public</td><td>一种访问控制方式：共用模式</td></tr><tr><td>return</td><td>从成员方法中返回数据</td></tr><tr><td>short</td><td>基本数据类型之一,短整数类型</td></tr><tr><td>static</td><td>表明具有静态属性</td></tr><tr><td>strictfp</td><td>用来声明 FP_strict（单精度或双精度浮点数）表达式遵循IEEE 754 算术规范</td></tr><tr><td>super</td><td>表明当前对象的父类型的引用或者父类型的构造方法</td></tr><tr><td>switch</td><td>分支语句结构的引导词</td></tr><tr><td>synchronized</td><td>表明一段代码需要同步执行</td></tr><tr><td>this</td><td>指向当前实例对象的引用</td></tr><tr><td>throw</td><td>抛出一个异常</td></tr><tr><td>throws</td><td>声明在当前定义的成员方法中所有需要抛出的异常</td></tr><tr><td>transient</td><td>声明不用序列化的成员域</td></tr><tr><td>try</td><td>尝试一个可能抛出异常的程序块</td></tr><tr><td>void</td><td>声明当前成员方法没有返回值</td></tr><tr><td>volatile</td><td>表明两个或者多个变量必须同步地发生变化</td></tr><tr><td>while</td><td>用在循环结构中</td></tr><tr><td>null</td><td>引用数据类型默认初始值</td></tr></tbody></table>        </div>      </div>    </div><h3 id="数据类型分类"><a href="#数据类型分类" class="headerlink" title="数据类型分类"></a>数据类型分类</h3><ul><li><p>基本类型</p><p>boolean 和数值类型（byte、short、int、long、char、float、double）</p></li><li><p>引用类型</p><p>类似于<strong>指针</strong>，包括类、接口、数组、空类型（null）</p></li></ul><blockquote><p>整数常量默认为int型，如果超出int范围，需加L，如<code>long bigValue = 9223372036854775807L</code></p><p>二进制以<code>0b</code>开头，八进制以<code>0</code>开头，十六进制以<code>0x</code>开头，如<code>int octalValue = 013</code>，十进制值为11</p><p>浮点型默认为double型，加f表示float型，如<code>5.12f</code></p><p>科学计数法形式 5.12e2</p><p>特殊浮点型 Float，Double 如 <code>Float.NaN</code>、<code>Double.NEGATIVE_INFINITY</code>、<code>Float.POSITIVE_INFINITY</code></p><blockquote><p>正数除以<strong>0.0</strong>得到正无穷大，负数除以<strong>0.0</strong>得到负无穷大，0除以<strong>0.0</strong>或负数开方为非数</p></blockquote><p>数值中可使用下划线分隔，如<code>3.14_15_92_65_36</code></p></blockquote><h3 id="动态类型-var"><a href="#动态类型-var" class="headerlink" title="动态类型 var"></a>动态类型 var</h3><p>var定义的变量类型由编译器自动推断</p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>byte➡️short➡️int➡️long➡️float➡️double</p><p>char➡️int</p><blockquote><p>0~65535的int可自动转换为char类型  ‘\u0000’~‘\uFFFF’</p></blockquote><ul><li><p>自动类型转换</p><p>表数范围小的可以向表数范围大的自动转换</p><p>基本类型和字符串连接时转为字符串型</p></li><li><p>强制类型转换</p><p>（targetType）value</p><p>整数直接截断高位，可能由正变负数</p><p>小数直接截断小数部分</p></li><li><p>表达式类型自动提升</p><ul><li>byte、short、char类型将自动提升为int</li><li>算数表达式的数据类型自动提升到与表达式中最高等级操作数同样的类型</li></ul></li></ul><h3 id="直接量与常量池"><a href="#直接量与常量池" class="headerlink" title="直接量与常量池"></a>直接量与常量池</h3><p>数值类型、char（’a’、’\u0061’)、Stirng（”Crazy Java”)、null型</p><p>编译时就能确定值</p><p>Java会使用（constant pool）来缓存第一次使用的直接量</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>自加（++）：位置在左， 位置在右</p><p>右移（&gt;&gt; , &gt;&gt;&gt;）：&gt;&gt; 符号位代替高位，&gt;&gt;&gt; 0代替高位</p><h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3>    <div class="fold">      <div class="fold-title fold-secondary collapsed" data-toggle="collapse" href="#collapse-e2edb508" role="button" aria-expanded="false" aria-controls="collapse-e2edb508">        <div class="fold-arrow">▶</div>点击展开      </div>      <div class="fold-collapse collapse" id="collapse-e2edb508">        <div class="fold-content">          <table><thead><tr><th>运算符</th><th></th></tr></thead><tbody><tr><td>括号 分隔符</td><td>()、[ ]、.</td></tr><tr><td>非、正，负号</td><td>!、+(正)、-(负)</td></tr><tr><td>自增，自减，取反</td><td>++、–、~</td></tr><tr><td>强制类型转换符</td><td>(type)</td></tr><tr><td>乘，除，取余</td><td>*、&#x2F;、%</td></tr><tr><td>加，减</td><td>+、-</td></tr><tr><td>移位运算</td><td>&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</td></tr><tr><td>大小关系</td><td>&lt;、&lt;&#x3D;、&gt;、&gt;&#x3D;、instanceof</td></tr><tr><td>相等关系</td><td>&#x3D;&#x3D;、!&#x3D;</td></tr><tr><td>按位与</td><td>&amp;</td></tr><tr><td>按位异或（在java中，这不是幂次方的符号）</td><td>^</td></tr><tr><td>按位或</td><td>|</td></tr><tr><td>逻辑与(短路与)</td><td>&amp;&amp;</td></tr><tr><td>逻辑或(短路或)</td><td>||</td></tr><tr><td>条件运算(三目运算)</td><td>? :</td></tr><tr><td>赋值运算</td><td>&#x3D;、+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;</td></tr><tr><td>位赋值运算</td><td>&amp;&#x3D;、|&#x3D;、^&#x3D;、~&#x3D;、&lt;&lt;&#x3D;、&gt;&gt;&#x3D;、&gt;&gt;&gt;&#x3D;</td></tr></tbody></table>        </div>      </div>    </div><h3 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h3><p>可以使用<strong>标签</strong>，直接跳出外层循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BreakTest2</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-comment">// 外层循环，outer作为标识符</span><br>outer:<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">5</span> ; i++ )<br>&#123;<br><span class="hljs-comment">// 内层循环</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span> ; j++ )<br>&#123;<br>System.out.println(<span class="hljs-string">&quot;i的值为:&quot;</span> + i + <span class="hljs-string">&quot;  j的值为:&quot;</span> + j);<br><span class="hljs-keyword">if</span> (j == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-comment">// 跳出outer标签所标识的循环。</span><br><span class="hljs-keyword">break</span> outer;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ContinueTest2</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-comment">// 外层循环</span><br>outer:<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">5</span> ; i++ )<br>&#123;<br><span class="hljs-comment">// 内层循环</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span> ; j++ )<br>&#123;<br>System.out.println(<span class="hljs-string">&quot;i的值为:&quot;</span> + i + <span class="hljs-string">&quot;  j的值为:&quot;</span> + j);<br><span class="hljs-keyword">if</span> (j == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-comment">// 忽略outer标签所指定的循环中本次循环所剩下语句。</span><br><span class="hljs-keyword">continue</span> outer;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="foreach循环"><a href="#foreach循环" class="headerlink" title="foreach循环"></a>foreach循环</h3><p>遍历数组或集合，不能改变数组元素的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForEachTest</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>String[] books = &#123;<span class="hljs-string">&quot;轻量级Java EE企业应用实战&quot;</span> ,<br><span class="hljs-string">&quot;疯狂Java讲义&quot;</span>,<br><span class="hljs-string">&quot;疯狂Android讲义&quot;</span>&#125;;<br><span class="hljs-comment">// 使用foreach循环来遍历数组元素，</span><br><span class="hljs-comment">// 其中book将会自动迭代每个数组元素</span><br><span class="hljs-keyword">for</span> (String book : books)<br>&#123;<br>System.out.println(book);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fluid主题文章页面调整</title>
      <link href="/posts/d022.html"/>
      <url>/posts/d022.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Hexo 主题:<a href="https://easyhexo.com/4-High-order-hexo-gamer/4-2-theme-develop/">编写自己的 Hexo 主题 | Easy Hexo 👨‍💻</a></p><p>ejs：<a href="https://ejs.bootcss.com/">EJS – 嵌入式 JavaScript 模板引擎 | EJS 中文文档 (bootcss.com)</a></p></blockquote><h3 id="修改左侧栏内容，新增容器side-container"><a href="#修改左侧栏内容，新增容器side-container" class="headerlink" title="修改左侧栏内容，新增容器side_container"></a>修改左侧栏内容，新增容器side_container</h3><p>左边栏对应主题ejs文件，修改如下</p><p><code>aside</code>是<code>positon</code>属性为<code>sticky</code>的特殊部件</p><p><code>blog\themes\fluid\layout\_partials\post\sidebar-left.ejs</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;!-- 添加公告栏时钟 --&gt;<br>&lt;div id=&quot;clockdiv&quot; class=&quot;side_container&quot; style=&quot;margin-right: -1rem; margin-top: 2rem; text-align: center; left: 5rem&quot;&gt;<br>  &lt;canvas id=&quot;dom&quot; width=&quot;200&quot; height=&quot;200&quot;&gt;时钟canvas&lt;/canvas&gt;<br>&lt;/div&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;/js/clock.js&quot;&gt;&lt;/script&gt;<br><br>&lt;aside class=&quot;sidebar&quot; style=&quot;margin-right: -1rem; margin-top: 15px; left: 5rem&quot;&gt;<br><br>  &lt;div class=&quot;side_container&quot; &gt;<br>    &lt;%- partial(&#x27;_partials/post/toc&#x27;) %&gt;<br>  &lt;/div&gt;<br><br>  &lt;div class=&quot;side_container category-bar&quot; style=&quot;margin-top: 2rem;&quot; &gt;<br>    &lt;%- partial(&#x27;_partials/post/category-bar&#x27;) %&gt;<br>  &lt;/div&gt;<br>&lt;/aside&gt;<br></code></pre></td></tr></table></figure><h3 id="修改side-container容器css样式"><a href="#修改side-container容器css样式" class="headerlink" title="修改side_container容器css样式"></a>修改side_container容器css样式</h3><p><code>blog\themes\fluid\source\css\_pages\_base\_widget\toc.styl</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.sidebar</span><br>  <span class="hljs-attribute">position</span> -webkit-sticky<br>  <span class="hljs-attribute">position</span> sticky<br>  <span class="hljs-attribute">top</span> <span class="hljs-number">2rem</span><br>  <span class="hljs-attribute">padding</span> <span class="hljs-number">3rem</span> <span class="hljs-number">0</span><br>  <span class="hljs-attribute">z-index</span> <span class="hljs-number">3</span><br><br><span class="hljs-selector-class">.side_container</span><br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">1rem</span><br>  <span class="hljs-attribute">background-color</span> <span class="hljs-built_in">var</span>(--board-bg-color)<br>  <span class="hljs-attribute">transition</span> background-color .<span class="hljs-number">2s</span> ease-in-out<br>  <span class="hljs-attribute">border-radius</span> <span class="hljs-number">0.5rem</span><br>  -webkit-<span class="hljs-attribute">box-shadow</span> <span class="hljs-number">0</span> <span class="hljs-number">12px</span> <span class="hljs-number">15px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.24</span>), <span class="hljs-number">0</span> <span class="hljs-number">17px</span> <span class="hljs-number">50px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.19</span>)<br>  <span class="hljs-attribute">box-shadow</span> <span class="hljs-number">0</span> <span class="hljs-number">12px</span> <span class="hljs-number">15px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.24</span>), <span class="hljs-number">0</span> <span class="hljs-number">17px</span> <span class="hljs-number">50px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.19</span>)<br></code></pre></td></tr></table></figure><h3 id="调整左栏和文章栏位置"><a href="#调整左栏和文章栏位置" class="headerlink" title="调整左栏和文章栏位置"></a>调整左栏和文章栏位置</h3><div class="note note-danger">            <p>下面这种修改方法已弃用，存在缩放变形问题</p>          </div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 文章栏修改 */</span><br><span class="hljs-selector-class">.col-lg-8</span><span class="hljs-selector-class">.nopadding-x-md</span> &gt; <span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.nopadding-x-md</span> &gt; <span class="hljs-selector-id">#board</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">103%</span>;<br>    <span class="hljs-attribute">right</span>: -<span class="hljs-number">18%</span>; <br>&#125;<br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">767px</span>) &#123;<br>    <span class="hljs-selector-class">.col-lg-8</span><span class="hljs-selector-class">.nopadding-x-md</span> &gt; <span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.nopadding-x-md</span> &gt; <span class="hljs-selector-id">#board</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>; <br>    &#125;<br>&#125;<br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">424px</span>) &#123;<br>    <span class="hljs-selector-class">.col-lg-8</span><span class="hljs-selector-class">.nopadding-x-md</span> &gt; <span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.nopadding-x-md</span> &gt; <span class="hljs-selector-id">#board</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>; <br>    &#125;<br>&#125;<br><span class="hljs-comment">/* 侧边栏修改 */</span><br><span class="hljs-selector-class">.side-col</span><span class="hljs-selector-class">.d-none</span><span class="hljs-selector-class">.d-lg-block</span><span class="hljs-selector-class">.col-lg-2</span> &#123;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">12%</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="其他调整"><a href="#其他调整" class="headerlink" title="其他调整"></a>其他调整</h3><ul><li><p>waifu.css 调整看板娘大小，对话框大小</p></li><li><p>szgotop.css 调整悬挂的猫位置</p></li></ul><h3 id="新的修改方法"><a href="#新的修改方法" class="headerlink" title="新的修改方法"></a>新的修改方法</h3><p>修改 <code>blog\themes\fluid\layout\_partials\post\sidebar-left.ejs</code>，新增一栏占位，右栏删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;div class=&quot;row nomargin-x&quot;&gt;<br>    //新增一栏占左位<br>    &lt;div class=&quot;side-col d-none d-lg-block col-lg-1&quot;&gt;<br>    &lt;/div&gt;<br>    <br>    //左栏<br>    &lt;div class=&quot;side-col d-none d-lg-block col-lg-2&quot;&gt;<br>      &lt;%- inject_point(&#x27;postLeft&#x27;) %&gt;<br>    &lt;/div&gt;<br><br>    //文章栏<br>    &lt;div class=&quot;col-lg-8 nopadding-x-md&quot;&gt;<br>     <br>    &lt;/div&gt;<br><br>    //右栏<br>    &lt;div class=&quot;side-col d-none d-lg-block col-lg-2&quot;&gt;<br>      &lt;%- inject_point(&#x27;postRight&#x27;) %&gt;<br>    &lt;/div&gt;<br></code></pre></td></tr></table></figure><p>增加css样式，减小文字页边距，增加@media (min-width: 992px)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 减小文字页边距 */</span><br><span class="hljs-selector-class">.post-content</span>&#123;<br>    <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">8%</span>;<br>    <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">8%</span>;<br>&#125;<br><br><span class="hljs-comment">/* 侧边栏和文章栏修改 */</span><br><span class="hljs-comment">/* 原992 */</span><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">992px</span>)&#123; <br>    <span class="hljs-selector-class">.col-lg-1</span>&#123;<br>        -ms-<span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">10%</span>; <br>        <span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">10%</span>; <br>        <span class="hljs-attribute">max-width</span>: <span class="hljs-number">10%</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.col-lg-2</span> &#123;<br>        -ms-<span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">16.666667%</span>;<br>        <span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">16.666667%</span>;<br>        <span class="hljs-attribute">max-width</span>: <span class="hljs-number">16.666667%</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.col-lg-8</span>&#123;<br>        -ms-<span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">70%</span>;<br>        <span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">70%</span>;<br>        <span class="hljs-attribute">max-width</span>: <span class="hljs-number">70%</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="新增最近文章和相关文章"><a href="#新增最近文章和相关文章" class="headerlink" title="新增最近文章和相关文章"></a>新增最近文章和相关文章</h3><p>借鉴 <code>archive-list.ejs</code> 和 <code>category-list.ejs</code></p><p>修改 <code>blog\themes\fluid\layout\_partials\post\sidebar-left.ejs</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;!-- 添加公告栏时钟 --&gt;<br>  &lt;div id=&quot;clockdiv&quot; class=&quot;side_container&quot; style=&quot;margin-right: -1rem; margin-top: 2rem; text-align: center; left: 5rem&quot;&gt;<br>    &lt;canvas id=&quot;dom&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;时钟canvas&lt;/canvas&gt;<br>  &lt;/div&gt;<br>  &lt;script type=&quot;text/javascript&quot; src=&quot;/js/clock.js&quot;&gt;&lt;/script&gt;<br><br>  &lt;aside class=&quot;sidebar&quot; style=&quot;margin-right: -1rem; margin-top: 15px; left: 5rem&quot;&gt;<br>    &lt;div class=&quot;side_container&quot; &gt;<br>      &lt;%- partial(&#x27;_partials/post/toc&#x27;) %&gt;<br>    &lt;/div&gt;<br><br>    &lt;div class=&quot;side_container category-bar&quot; style=&quot;margin-top: 2rem;&quot; &gt;<br>      &lt;p&gt;<br>        &lt;i class=&quot;iconfont icon-list&quot;&gt;&lt;/i&gt;<br>        &lt;a style=&quot;font-weight: 700; font-size: 1.25em; text-indent: 2em; text-align: justify!important;&quot;&gt;相关文章 &lt;/a&gt;<br>      &lt;/p&gt;      <br>      &lt;%- partial(&#x27;_partials/custom/relative-post&#x27;) %&gt;<br>    &lt;/div&gt;  <br><br>    &lt;div class=&quot;side_container category-bar&quot; style=&quot;margin-top: 2rem;&quot; &gt;<br>      &lt;p&gt;<br>        &lt;i class=&quot;iconfont icon-list&quot;&gt;&lt;/i&gt;<br>        &lt;a style=&quot;font-weight: 700; font-size: 1.25em; text-indent: 2em; text-align: justify!important;&quot;&gt;近期文章 &lt;/a&gt;<br>      &lt;/p&gt;<br>      &lt;div class=&quot;list-group&quot;&gt;<br>        &lt;% site.posts.sort(&#x27;-date&#x27;).slice(0,5).each(function (post) &#123; %&gt;<br>          &lt;a href=&quot;&lt;%= url_for(post.path) %&gt;&quot; class=&quot;list-group-item list-group-item-action&quot;&gt;<br>            &lt;time style=&quot;flex: 0 0 3.5rem;&quot;&gt;&lt;%= date(post.date, &quot;MM-DD&quot;) %&gt;&lt;/time&gt;<br>            &lt;div class=&quot;list-group-item-title&quot;&gt;&lt;%= post.title %&gt;&lt;/div&gt;<br>          &lt;/a&gt;<br>        &lt;% &#125;) %&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/aside&gt;<br></code></pre></td></tr></table></figure><p>新增 <code>blog\themes\fluid\layout\_partials\custom\relative-post.ejs</code>，获取同子分类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;%<br>var parent = page.categories.filter(c =&gt; c)<br>if(parent[&quot;length&quot;] &gt; 1)&#123;<br>    parent = page.categories.filter(c =&gt; c.parent)<br>&#125;<br><br>var filterIds = page.categories.map(c =&gt; c._id)<br>filterIds.push(page._id)<br>%&gt;<br><br>&lt;%- partial(&#x27;_partials/custom/relative-post-list&#x27;, &#123;<br>    curCats  : parent,<br>    params: &#123;<br>      type     : &#x27;post&#x27;,<br>      filterIds: filterIds,<br>      postLimit: theme.post.category_bar.post_limit,<br>      postOrderBy: theme.post.category_bar.post_order_by || config.index_generator.order_by<br>    &#125;<br>&#125;) %&gt;<br></code></pre></td></tr></table></figure><p>新增 <code>blog\themes\fluid\layout\_partials\custom\relative-post-list.ejs</code>，获取同子分类文章</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;% function render_categories(curCats, params = &#123;&#125;, depth = 0) &#123; %&gt;<br>    &lt;% return curCats.each((cat) =&gt; &#123; %&gt;<br>        &lt;% var subCats = site.categories.find(&#123; parent: cat._id &#125;).sort(params.orderBy || &#x27;name&#x27;).filter(cat =&gt; cat.length) %&gt;<br>        &lt;% var collapsed = subCats.length === 0 || depth &gt;= theme.category.collapse_depth %&gt;<br>        &lt;% if ((params.filterIds || []).includes(cat._id)) collapsed = false %&gt;<br>        <br>        &lt;div class=&quot;category-collapse collapse &lt;%= collapsed ? &#x27;&#x27; : &#x27;show&#x27; %&gt;&quot; id=&quot;collapse-&lt;%= md5(cat.name) %&gt;&quot;<br>                role=&quot;tabpanel&quot; aria-labelledby=&quot;heading-&lt;%= md5(cat.name) %&gt;&quot;&gt;<br>            &lt;% var posts = cat.posts.sort(params.postOrderBy || &#x27;-date&#x27;) %&gt;<br>            &lt;%- render_posts(posts, cat, params) %&gt;<br>        &lt;/div&gt;<br>    &lt;% &#125;) %&gt;<br>&lt;% &#125; %&gt;<br>  <br>&lt;% function render_posts(posts, cat, params) &#123; %&gt;<br>&lt;div class=&quot;category-post-list&quot;&gt;<br>    &lt;% var limit = 5 /*params.postLimit*/ %&gt;<br>    &lt;% for (var idx = 0; idx &lt; posts.length; idx++) &#123; %&gt;<br>        &lt;% var post = posts.data[idx] %&gt;<br>        &lt;% if (idx &amp;&amp; limit &amp;&amp; idx &gt;= limit) &#123; %&gt;<br>            &lt;a href=&quot;&lt;%= url_for(cat.path) %&gt;&quot; class=&quot;list-group-item list-group-item-action&quot;&gt;<br>            &lt;span class=&quot;category-post&quot;&gt;&lt;%- __(&#x27;category.more&#x27;) %&gt;&lt;/span&gt;<br>            &lt;/a&gt;<br>            &lt;% break %&gt;<br>        &lt;% &#125; else &#123; %&gt;<br>            &lt;a href=&quot;&lt;%= url_for(post.path) %&gt;&quot; title=&quot;&lt;%= post.title %&gt;&quot;<br>                class=&quot;list-group-item list-group-item-action<br>                &lt;%= (params.filterIds || []).includes(post._id) ? &#x27;active&#x27; : &#x27;&#x27;  %&gt;&quot;&gt;<br>            &lt;span class=&quot;category-post&quot; style=&quot;white-space: nowrap; overflow: hidden; text-overflow: ellipsis;&quot;&gt;&lt;%= post.title %&gt;&lt;/span&gt;<br>            &lt;/a&gt;<br>        &lt;% &#125; %&gt;<br>    &lt;% &#125; %&gt;<br>&lt;/div&gt;<br>&lt;% &#125; %&gt;<br>  <br>&lt;div class=&quot;category-list&quot;&gt;<br>&lt;%- render_categories(curCats, params) %&gt;<br>&lt;/div&gt;<br><br>&lt;% function shuffleArray(array) &#123;<br>    for (let i = array.length - 1; i &gt; 0; i--) &#123;<br>      const j = Math.floor(Math.random() * (i + 1));<br>      [array[i], array[j]] = [array[j], array[i]];<br>    &#125;<br>    return array;<br>  &#125; %&gt;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Fluid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础类库-3</title>
      <link href="/posts/cd69.html"/>
      <url>/posts/cd69.html</url>
      
        <content type="html"><![CDATA[<div class="note note-success">            <p>对应《疯狂Java讲义（第5版）》7.5 章节</p>          </div><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式是用于匹配字符串的模板</p><h2 id="String类提供的方法"><a href="#String类提供的方法" class="headerlink" title="String类提供的方法"></a>String类提供的方法</h2><ul><li>boolean matches(String regax)：判断字符串是否匹配指定的正则表达式</li><li>String replaceAll(String regex, String replacement)：将该字符串所有匹配regax的子串替换为replacement</li><li>String replaceFirst(String regax, String replacement)：将该字符串第一个匹配regax的子串替换为replacement</li><li>String[] split(String regax)：以regax作为分隔符，分割为多个子串</li></ul><p>此外，Java提供了<code>Pattern</code>和<code>Matcher</code>两个类专门用于提供正则表达式支持</p><h2 id="正则表达式的匹配规则"><a href="#正则表达式的匹配规则" class="headerlink" title="正则表达式的匹配规则"></a>正则表达式的匹配规则</h2><h3 id="基本字符"><a href="#基本字符" class="headerlink" title="基本字符"></a>基本字符</h3><table><thead><tr><th>字符</th><th>解释</th></tr></thead><tbody><tr><td>x</td><td>字符x</td></tr><tr><td>\0mnn</td><td>八进制数 0mnn 所表示的字符</td></tr><tr><td>\xhh</td><td>十六进制值 0xhh 所表示的字符</td></tr><tr><td>\uhhhh</td><td>十六进制值 0xhhhh 所表示的Unicode字符</td></tr><tr><td>\t</td><td>制表符（’\u0009’）</td></tr><tr><td>\n</td><td>新行（换行）符（’\u000A’）</td></tr><tr><td>\r</td><td>回车符（’\u000D’）</td></tr><tr><td>\f</td><td>换页符（’\u000C’）</td></tr><tr><td>\a</td><td>报警（bell）符（’\u0007’）</td></tr><tr><td>\e</td><td>Escape符（’\u001B’）</td></tr><tr><td>\cx</td><td>x对应的控制符。如<code>\cM</code>匹配 Ctrl-M。x必须为A<del>Z或a</del>z之一</td></tr></tbody></table><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td>$</td><td></td></tr><tr><td>^</td><td></td></tr><tr><td>( )</td><td></td></tr><tr><td>[ ]</td><td></td></tr><tr><td>{ }</td><td></td></tr><tr><td>*</td><td></td></tr><tr><td>+</td><td></td></tr><tr><td>?</td><td></td></tr><tr><td>.</td><td></td></tr><tr><td>\</td><td></td></tr><tr><td>|</td><td></td></tr></tbody></table><h3 id="预定义字符（通配符）"><a href="#预定义字符（通配符）" class="headerlink" title="预定义字符（通配符）"></a>预定义字符（通配符）</h3><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>可以匹配任何字符</td></tr><tr><td>\d</td><td>匹配 0~9 的所有数字</td></tr><tr><td>\D</td><td>匹配非数字</td></tr><tr><td>\s</td><td>匹配所有的空白字符，包括空格、制表符、回车符、换页符、换行符等</td></tr><tr><td>\S</td><td>匹配所有的非空白字符</td></tr><tr><td>\w</td><td>匹配所有的单词字符，包括 0~9 的所有数字，26个英文字母和下划线（_）</td></tr><tr><td>\W</td><td>匹配所有的非单词字符</td></tr></tbody></table><h3 id="方括号表达式"><a href="#方括号表达式" class="headerlink" title="方括号表达式"></a>方括号表达式</h3><table><thead><tr><th>方括号表达式</th><th>说明</th></tr></thead><tbody><tr><td>[abc]，[gz]</td><td>枚举，表示a、b、c中任意一个字符</td></tr><tr><td>[a-f]，[\u0041-\u0056]</td><td>表示范围，可以和枚举共用，如[a-cx-z]</td></tr><tr><td>[^abc]，[^a-f]</td><td>求否，非a、b、c的任意字符，非 a~f 的任意字符</td></tr><tr><td>[a-z&amp;&amp;[def]]</td><td>与运算，求交集</td></tr><tr><td>[a-d[m-p]]</td><td>并运算[a-dm-p]</td></tr></tbody></table><blockquote><p>匹配所有中文字符：<code>[\\u0041-\\u0056]</code></p></blockquote><h3 id="圆括号表达式"><a href="#圆括号表达式" class="headerlink" title="圆括号表达式"></a>圆括号表达式</h3><p>用于将多个表达式组成一个子表达式，可以使用运算符 | ，如：</p><blockquote><p><code>((public)|(protected)|(private))</code>用于匹配Java三个访问控制符之一</p></blockquote><h3 id="边界匹配符"><a href="#边界匹配符" class="headerlink" title="边界匹配符"></a>边界匹配符</h3><table><thead><tr><th>边界匹配符</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>行的开头</td></tr><tr><td>$</td><td>行的结尾</td></tr><tr><td>\b</td><td>单词的边界</td></tr><tr><td>\B</td><td>非单词的边界</td></tr><tr><td>\A</td><td>输入的开头</td></tr><tr><td>\G</td><td>前一个匹配的结尾</td></tr><tr><td>\Z</td><td>输入的结尾，仅用于最后的结束符</td></tr><tr><td>\z</td><td>输入的结尾</td></tr></tbody></table><h3 id="三种匹配模式与数量表示符"><a href="#三种匹配模式与数量表示符" class="headerlink" title="三种匹配模式与数量表示符"></a>三种匹配模式与数量表示符</h3><ul><li>Greedy（贪婪模式）：默认，一直匹配下去，直到无法匹配为止</li><li>Reluctant（勉强模式）：加（?）后缀，匹配最少字符</li><li>Pocessive（占有模式）：加（+）后缀，仅Java</li></ul><table><thead><tr><th>贪婪模式</th><th>勉强模式</th><th>占用模式</th><th>说明</th></tr></thead><tbody><tr><td>X?</td><td>X??</td><td>X?+</td><td>X表达式出现零次或一次</td></tr><tr><td>X*</td><td>X*?</td><td>X*+</td><td>X表达式出现零次或多次</td></tr><tr><td>X+</td><td>X+?</td><td>X++</td><td>X表达式出现一次或多次</td></tr><tr><td>X{n}</td><td>X{n}?</td><td>X{n}+</td><td>X表达式出现n次</td></tr><tr><td>X{n,}</td><td>X{n,}?</td><td>X{n,}+</td><td>X表达式出现至少n次</td></tr><tr><td>X{n,m}</td><td>X{n,m}?</td><td>X{n,m}+</td><td>X表达式出现至少n次，至少m次</td></tr></tbody></table><h2 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h2>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础类库-2</title>
      <link href="/posts/daa.html"/>
      <url>/posts/daa.html</url>
      
        <content type="html"><![CDATA[<div class="note note-success">            <p>对应《疯狂Java讲义（第5版）》7.3-7.4 章节</p>          </div><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><p>Object是所有类、数组、枚举类的父类，没有使用extends显式指定父类的类默认继承Object类</p><ul><li><p><strong>boolean equals(Object obj)</strong>      是否为同一对象</p></li><li><p><strong>protected void finalize()</strong>          垃圾回收器清理该对象资源</p></li><li><p><strong>Class&lt;?&gt; getClass()</strong>               返回运行时类</p></li><li><p><strong>int hashCode()</strong>      默认根据地址计算，与System.identityHashCode(Object x)相同，但很多类改写了该方法</p></li><li><p><strong>String toString()</strong>    对象的字符串表示，默认返回<code>运行时类名@16进制hashCode</code></p></li><li><p><strong>wait()、notify()、notifyAll()</strong>     控制线程的运行和暂停</p></li><li><p><strong>protected Clone()</strong>  实现对象的“自我克隆”，得到一个完全隔离的副本</p><ul><li>“浅克隆”，只克隆该对象的所有成员变量值，不会对引用类型的成员变量引用的对象进行克隆</li><li>“深克隆”需要开发者自己进行“递归克隆”</li></ul><ol><li>实现 Cloneable 接口（只是一个标记，接口里没有任何方法）</li><li>实现自定义的 clone() 方法</li><li>通过 super.clone() 调用父类的克隆方法</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span><br>&#123;<br>String detail;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Address</span><span class="hljs-params">(String detail)</span><br>&#123;<br><span class="hljs-built_in">this</span>.detail = detail;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 实现Cloneable接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span><br>&#123;<br><span class="hljs-type">int</span> age;<br>Address address;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span><br>&#123;<br><span class="hljs-built_in">this</span>.age = age;<br>address = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Address</span>(<span class="hljs-string">&quot;广州天河&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 通过调用super.clone()来实现clone()方法</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">clone</span><span class="hljs-params">()</span><br><span class="hljs-keyword">throws</span> CloneNotSupportedException<br>&#123;<br><span class="hljs-keyword">return</span> (User)<span class="hljs-built_in">super</span>.clone();<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CloneTest</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br><span class="hljs-keyword">throws</span> CloneNotSupportedException<br>&#123;<br><span class="hljs-type">User</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">29</span>);<br><span class="hljs-comment">// clone得到u1对象的副本。</span><br><span class="hljs-type">User</span> <span class="hljs-variable">u2</span> <span class="hljs-operator">=</span> u1.clone();<br><span class="hljs-comment">// 判断u1、u2是否相同</span><br>System.out.println(u1 == u2);      <span class="hljs-comment">//①</span><br><span class="hljs-comment">// 判断u1、u2的address是否相同</span><br>System.out.println(u1.address == u2.address);     <span class="hljs-comment">//②</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="操作对象的Objects工具类（Java-7）"><a href="#操作对象的Objects工具类（Java-7）" class="headerlink" title="操作对象的Objects工具类（Java 7）"></a>操作对象的Objects工具类（Java 7）</h2><p>提供的工具方法大都“空指针”安全，不会引发空指针异常，如toSting()将输出null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectsTest</span><br>&#123;<br><span class="hljs-comment">// 定义一个obj变量，它的默认值是null</span><br><span class="hljs-keyword">static</span> ObjectsTest obj;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-comment">// 输出一个null对象的hashCode值，输出0</span><br>System.out.println(Objects.hashCode(obj));<br><span class="hljs-comment">// 输出一个null对象的toString，输出null</span><br>System.out.println(Objects.toString(obj));<br><span class="hljs-comment">// 要求obj不能为null，如果obj为null则引发异常</span><br>System.out.println(Objects.requireNonNull(obj<br>, <span class="hljs-string">&quot;obj参数不能是null！&quot;</span>));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>requireNonNull()</strong></p><p>传入不是null时，返回参数本身，否则将引发NullPointerException异常</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Foo</span><span class="hljs-params">(Bar bar)</span>&#123;<br>    <span class="hljs-comment">//校验bar参数，为null将引发NullPointerException异常</span><br>    <span class="hljs-built_in">this</span>.bar = Objects.requireNonNull(bar);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="String、StringBuffer、StringBuilder类（Java-9-改进）"><a href="#String、StringBuffer、StringBuilder类（Java-9-改进）" class="headerlink" title="String、StringBuffer、StringBuilder类（Java 9 改进）"></a>String、StringBuffer、StringBuilder类（Java 9 改进）</h2><p><strong>String</strong>是不可变类，包含的字符序列不可修改</p><p><strong>StringBuffer</strong>对象代表一个字符序列可变的字符串</p><p><strong>StringBuilder</strong>和StringBuffer基本相同，但StringBuffer线程安全，StringBuilder没有实现线程安全，所以性能略高</p><blockquote><p>都实现了CharSequence接口，字符串协议接口</p><p>Java 9 以前采用char[]数组保存字符， 每个字符占用2字节；Java 9 开始采用byte[]数组再加一个encoding-flag字段来保存字符，每个字符只占1字节</p></blockquote><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>下面是 String 类支持的方法，更多详细，参看 <a href="https://www.runoob.com/manual/jdk11api/java.base/java/lang/String.html">Java String API</a> 文档:</p>    <div class="fold">      <div class="fold-title fold-secondary collapsed" data-toggle="collapse" href="#collapse-3080f611" role="button" aria-expanded="false" aria-controls="collapse-3080f611">        <div class="fold-arrow">▶</div>展开查看相关方法      </div>      <div class="fold-collapse collapse" id="collapse-3080f611">        <div class="fold-content">          <table><thead><tr><th>1</th><th><a href="https://www.runoob.com/java/java-string-charat.html">char charAt(int index)</a> 返回指定索引处的 char 值。</th></tr></thead><tbody><tr><td>2</td><td><a href="https://www.runoob.com/java/java-string-compareto.html">int compareTo(Object o)</a> 把这个字符串和另一个对象比较。</td></tr><tr><td>3</td><td><a href="https://www.runoob.com/java/java-string-compareto.html">int compareTo(String anotherString)</a> 按字典顺序比较两个字符串。</td></tr><tr><td>4</td><td><a href="https://www.runoob.com/java/java-string-comparetoignorecase.html">int compareToIgnoreCase(String str)</a> 按字典顺序比较两个字符串，不考虑大小写。</td></tr><tr><td>5</td><td><a href="https://www.runoob.com/java/java-string-concat.html">String concat(String str)</a> 将指定字符串连接到此字符串的结尾。</td></tr><tr><td>6</td><td><a href="https://www.runoob.com/java/java-string-contentequals.html">boolean contentEquals(StringBuffer sb)</a> 当且仅当字符串与指定的StringBuffer有相同顺序的字符时候返回真。</td></tr><tr><td>7</td><td><a href="https://www.runoob.com/java/java-string-copyvalueof.html">static String copyValueOf(char[] data)</a> 返回指定数组中表示该字符序列的 String。</td></tr><tr><td>8</td><td><a href="https://www.runoob.com/java/java-string-copyvalueof.html">static String copyValueOf(char[] data, int offset, int count)</a> 返回指定数组中表示该字符序列的 String。</td></tr><tr><td>9</td><td><a href="https://www.runoob.com/java/java-string-endswith.html">boolean endsWith(String suffix)</a> 测试此字符串是否以指定的后缀结束。</td></tr><tr><td>10</td><td><a href="https://www.runoob.com/java/java-string-equals.html">boolean equals(Object anObject)</a> 将此字符串与指定的对象比较。</td></tr><tr><td>11</td><td><a href="https://www.runoob.com/java/java-string-equalsignorecase.html">boolean equalsIgnoreCase(String anotherString)</a> 将此 String 与另一个 String 比较，不考虑大小写。</td></tr><tr><td>12</td><td><a href="https://www.runoob.com/java/java-string-getbytes.html">byte[] getBytes()</a>  使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</td></tr><tr><td>13</td><td><a href="https://www.runoob.com/java/java-string-getbytes.html">byte[] getBytes(String charsetName)</a> 使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</td></tr><tr><td>14</td><td><a href="https://www.runoob.com/java/java-string-getchars.html">void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)</a> 将字符从此字符串复制到目标字符数组。</td></tr><tr><td>15</td><td><a href="https://www.runoob.com/java/java-string-hashcode.html">int hashCode()</a> 返回此字符串的哈希码。</td></tr><tr><td>16</td><td><a href="https://www.runoob.com/java/java-string-indexof.html">int indexOf(int ch)</a> 返回指定字符在此字符串中第一次出现处的索引。</td></tr><tr><td>17</td><td><a href="https://www.runoob.com/java/java-string-indexof.html">int indexOf(int ch, int fromIndex)</a> 返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。</td></tr><tr><td>18</td><td><a href="https://www.runoob.com/java/java-string-indexof.html">int indexOf(String str)</a>  返回指定子字符串在此字符串中第一次出现处的索引。</td></tr><tr><td>19</td><td><a href="https://www.runoob.com/java/java-string-indexof.html">int indexOf(String str, int fromIndex)</a> 返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。</td></tr><tr><td>20</td><td><a href="https://www.runoob.com/java/java-string-intern.html">String intern()</a>  返回字符串对象的规范化表示形式。</td></tr><tr><td>21</td><td><a href="https://www.runoob.com/java/java-string-lastindexof.html">int lastIndexOf(int ch)</a>  返回指定字符在此字符串中最后一次出现处的索引。</td></tr><tr><td>22</td><td><a href="https://www.runoob.com/java/java-string-lastindexof.html">int lastIndexOf(int ch, int fromIndex)</a> 返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。</td></tr><tr><td>23</td><td><a href="https://www.runoob.com/java/java-string-lastindexof.html">int lastIndexOf(String str)</a> 返回指定子字符串在此字符串中最右边出现处的索引。</td></tr><tr><td>24</td><td><a href="https://www.runoob.com/java/java-string-lastindexof.html">int lastIndexOf(String str, int fromIndex)</a>  返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索。</td></tr><tr><td>25</td><td><a href="https://www.runoob.com/java/java-string-length.html">int length()</a> 返回此字符串的长度。</td></tr><tr><td>26</td><td><a href="https://www.runoob.com/java/java-string-matches.html">boolean matches(String regex)</a> 告知此字符串是否匹配给定的正则表达式。</td></tr><tr><td>27</td><td><a href="https://www.runoob.com/java/java-string-regionmatches.html">boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)</a> 测试两个字符串区域是否相等。</td></tr><tr><td>28</td><td><a href="https://www.runoob.com/java/java-string-regionmatches.html">boolean regionMatches(int toffset, String other, int ooffset, int len)</a> 测试两个字符串区域是否相等。</td></tr><tr><td>29</td><td><a href="https://www.runoob.com/java/java-string-replace.html">String replace(char oldChar, char newChar)</a> 返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</td></tr><tr><td>30</td><td><a href="https://www.runoob.com/java/java-string-replaceall.html">String replaceAll(String regex, String replacement)</a> 使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</td></tr><tr><td>31</td><td><a href="https://www.runoob.com/java/java-string-replacefirst.html">String replaceFirst(String regex, String replacement)</a>  使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</td></tr><tr><td>32</td><td><a href="https://www.runoob.com/java/java-string-split.html">String[] split(String regex)</a> 根据给定正则表达式的匹配拆分此字符串。</td></tr><tr><td>33</td><td><a href="https://www.runoob.com/java/java-string-split.html">String[] split(String regex, int limit)</a> 根据匹配给定的正则表达式来拆分此字符串。</td></tr><tr><td>34</td><td><a href="https://www.runoob.com/java/java-string-startswith.html">boolean startsWith(String prefix)</a> 测试此字符串是否以指定的前缀开始。</td></tr><tr><td>35</td><td><a href="https://www.runoob.com/java/java-string-startswith.html">boolean startsWith(String prefix, int toffset)</a> 测试此字符串从指定索引开始的子字符串是否以指定前缀开始。</td></tr><tr><td>36</td><td><a href="https://www.runoob.com/java/java-string-subsequence.html">CharSequence subSequence(int beginIndex, int endIndex)</a>  返回一个新的字符序列，它是此序列的一个子序列。</td></tr><tr><td>37</td><td><a href="https://www.runoob.com/java/java-string-substring.html">String substring(int beginIndex)</a> 返回一个新的字符串，它是此字符串的一个子字符串。</td></tr><tr><td>38</td><td><a href="https://www.runoob.com/java/java-string-substring.html">String substring(int beginIndex, int endIndex)</a> 返回一个新字符串，它是此字符串的一个子字符串。</td></tr><tr><td>39</td><td><a href="https://www.runoob.com/java/java-string-tochararray.html">char[] toCharArray()</a> 将此字符串转换为一个新的字符数组。</td></tr><tr><td>40</td><td><a href="https://www.runoob.com/java/java-string-tolowercase.html">String toLowerCase()</a> 使用默认语言环境的规则将此 String 中的所有字符都转换为小写。</td></tr><tr><td>41</td><td><a href="https://www.runoob.com/java/java-string-tolowercase.html">String toLowerCase(Locale locale)</a>  使用给定 Locale 的规则将此 String 中的所有字符都转换为小写。</td></tr><tr><td>42</td><td><a href="https://www.runoob.com/java/java-string-tostring.html">String toString()</a>  返回此对象本身（它已经是一个字符串！）。</td></tr><tr><td>43</td><td><a href="https://www.runoob.com/java/java-string-touppercase.html">String toUpperCase()</a> 使用默认语言环境的规则将此 String 中的所有字符都转换为大写。</td></tr><tr><td>44</td><td><a href="https://www.runoob.com/java/java-string-touppercase.html">String toUpperCase(Locale locale)</a> 使用给定 Locale 的规则将此 String 中的所有字符都转换为大写。</td></tr><tr><td>45</td><td><a href="https://www.runoob.com/java/java-string-trim.html">String trim()</a> 返回字符串的副本，忽略前导空白和尾部空白。</td></tr><tr><td>46</td><td><a href="https://www.runoob.com/java/java-string-valueof.html">static String valueOf(primitive data type x)</a> 返回给定data type类型x参数的字符串表示形式。</td></tr><tr><td>47</td><td><a href="https://www.runoob.com/java/java-string-contains.html">contains(CharSequence chars)</a> 判断是否包含指定的字符系列。</td></tr><tr><td>48</td><td><a href="https://www.runoob.com/java/java-string-isempty.html">isEmpty()</a> 判断字符串是否为空。</td></tr></tbody></table>        </div>      </div>    </div><h3 id="StringBuilder和StringBuffer"><a href="#StringBuilder和StringBuffer" class="headerlink" title="StringBuilder和StringBuffer"></a>StringBuilder和StringBuffer</h3><p>StringBuilder提供了一系列插入、追加、改变该字符串包含的字符序列的方法</p><p><code>length</code>和<code>capacity</code>，<code>length</code>代表字符序列长度，可以setLength(int len)，<code>capacity</code>表示StringBuilder的容量，通常大于<code>length</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringBuilderTest</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><span class="hljs-comment">// 追加字符串</span><br>sb.append(<span class="hljs-string">&quot;java&quot;</span>);<span class="hljs-comment">//sb = &quot;java&quot;</span><br><span class="hljs-comment">// 插入</span><br>sb.insert(<span class="hljs-number">0</span> , <span class="hljs-string">&quot;hello &quot;</span>); <span class="hljs-comment">// sb=&quot;hello java&quot;</span><br><span class="hljs-comment">// 替换</span><br>sb.replace(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-string">&quot;,&quot;</span>); <span class="hljs-comment">// sb=&quot;hello,java&quot;</span><br><span class="hljs-comment">// 删除</span><br>sb.delete(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>); <span class="hljs-comment">// sb=&quot;hellojava&quot;</span><br>System.out.println(sb);<br><span class="hljs-comment">// 反转</span><br>sb.reverse(); <span class="hljs-comment">// sb=&quot;avajolleh&quot;</span><br>System.out.println(sb);<br>System.out.println(sb.length()); <span class="hljs-comment">// 输出9</span><br>System.out.println(sb.capacity()); <span class="hljs-comment">// 输出16</span><br><span class="hljs-comment">// 改变StringBuilder的长度，将只保留前面部分</span><br>sb.setLength(<span class="hljs-number">5</span>); <span class="hljs-comment">// sb=&quot;avajo&quot;</span><br>System.out.println(sb);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h2><p>提供更复杂的数学运算，构造器为 private ，方法均为类方法，以及两个类变量 PI 和 E</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathTest</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-comment">/*---------下面是三角运算---------*/</span><br><span class="hljs-comment">// 将弧度转换角度</span><br>System.out.println(<span class="hljs-string">&quot;Math.toDegrees(1.57)：&quot;</span><br>+ Math.toDegrees(<span class="hljs-number">1.57</span>));<br><span class="hljs-comment">// 将角度转换为弧度</span><br>System.out.println(<span class="hljs-string">&quot;Math.toRadians(90)：&quot;</span><br>+ Math.toRadians(<span class="hljs-number">90</span>));<br><span class="hljs-comment">// 计算反余弦，返回的角度范围在 0.0 到 pi 之间。</span><br>System.out.println(<span class="hljs-string">&quot;Math.acos(1.2)：&quot;</span> + Math.acos(<span class="hljs-number">1.2</span>));<br><span class="hljs-comment">// 计算反正弦；返回的角度范围在 -pi/2 到 pi/2 之间。</span><br>System.out.println(<span class="hljs-string">&quot;Math.asin(0.8)：&quot;</span> + Math.asin(<span class="hljs-number">0.8</span>));<br><span class="hljs-comment">// 计算反正切；返回的角度范围在 -pi/2 到 pi/2 之间。</span><br>System.out.println(<span class="hljs-string">&quot;Math.atan(2.3)：&quot;</span> + Math.atan(<span class="hljs-number">2.3</span>));<br><span class="hljs-comment">// 计算三角余弦。</span><br>System.out.println(<span class="hljs-string">&quot;Math.cos(1.57)：&quot;</span> + Math.cos(<span class="hljs-number">1.57</span>));<br><span class="hljs-comment">// 计算值的双曲余弦。</span><br>System.out.println(<span class="hljs-string">&quot;Math.cosh(1.2 )：&quot;</span> + Math.cosh(<span class="hljs-number">1.2</span> ));<br><span class="hljs-comment">// 计算正弦</span><br>System.out.println(<span class="hljs-string">&quot;Math.sin(1.57 )：&quot;</span> + Math.sin(<span class="hljs-number">1.57</span> ));<br><span class="hljs-comment">// 计算双曲正弦</span><br>System.out.println(<span class="hljs-string">&quot;Math.sinh(1.2 )：&quot;</span> + Math.sinh(<span class="hljs-number">1.2</span> ));<br><span class="hljs-comment">// 计算三角正切</span><br>System.out.println(<span class="hljs-string">&quot;Math.tan(0.8 )：&quot;</span> + Math.tan(<span class="hljs-number">0.8</span> ));<br><span class="hljs-comment">// 计算双曲正切</span><br>System.out.println(<span class="hljs-string">&quot;Math.tanh(2.1 )：&quot;</span> + Math.tanh(<span class="hljs-number">2.1</span> ));<br><span class="hljs-comment">// 将矩形坐标 (x, y) 转换成极坐标 (r, thet));</span><br>System.out.println(<span class="hljs-string">&quot;Math.atan2(0.1, 0.2)：&quot;</span> + Math.atan2(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>));<br><span class="hljs-comment">/*---------下面是取整运算---------*/</span><br><span class="hljs-comment">// 取整，返回小于目标数的最大整数。</span><br>System.out.println(<span class="hljs-string">&quot;Math.floor(-1.2 )：&quot;</span> + Math.floor(-<span class="hljs-number">1.2</span> ));<br><span class="hljs-comment">// 取整，返回大于目标数的最小整数。</span><br>System.out.println(<span class="hljs-string">&quot;Math.ceil(1.2)：&quot;</span> + Math.ceil(<span class="hljs-number">1.2</span>));<br><span class="hljs-comment">// 四舍五入取整</span><br>System.out.println(<span class="hljs-string">&quot;Math.round(2.3 )：&quot;</span> + Math.round(<span class="hljs-number">2.3</span> ));<br><span class="hljs-comment">/*---------下面是乘方、开方、指数运算---------*/</span><br><span class="hljs-comment">// 计算平方根。</span><br>System.out.println(<span class="hljs-string">&quot;Math.sqrt(2.3 )：&quot;</span> + Math.sqrt(<span class="hljs-number">2.3</span> ));<br><span class="hljs-comment">// 计算立方根。</span><br>System.out.println(<span class="hljs-string">&quot;Math.cbrt(9)：&quot;</span> + Math.cbrt(<span class="hljs-number">9</span>));<br><span class="hljs-comment">// 返回欧拉数 e 的n次幂。</span><br>System.out.println(<span class="hljs-string">&quot;Math.exp(2)：&quot;</span> + Math.exp(<span class="hljs-number">2</span>));<br><span class="hljs-comment">// 返回 sqrt(x2 +y2)</span><br>System.out.println(<span class="hljs-string">&quot;Math.hypot(4 , 4)：&quot;</span> + Math.hypot(<span class="hljs-number">4</span> , <span class="hljs-number">4</span>));<br><span class="hljs-comment">// 按照 IEEE 754 标准的规定，对两个参数进行余数运算。</span><br>System.out.println(<span class="hljs-string">&quot;Math.IEEEremainder(5 , 2)：&quot;</span><br>+ Math.IEEEremainder(<span class="hljs-number">5</span> , <span class="hljs-number">2</span>));<br><span class="hljs-comment">// 计算乘方</span><br>System.out.println(<span class="hljs-string">&quot;Math.pow(3, 2)：&quot;</span> + Math.pow(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>));<br><span class="hljs-comment">// 计算自然对数</span><br>System.out.println(<span class="hljs-string">&quot;Math.log(12)：&quot;</span> + Math.log(<span class="hljs-number">12</span>));<br><span class="hljs-comment">// 计算底数为 10 的对数。</span><br>System.out.println(<span class="hljs-string">&quot;Math.log10(9)：&quot;</span> + Math.log10(<span class="hljs-number">9</span>));<br><span class="hljs-comment">// 返回参数与 1 之和的自然对数。</span><br>System.out.println(<span class="hljs-string">&quot;Math.log1p(9)：&quot;</span> + Math.log1p(<span class="hljs-number">9</span>));<br><span class="hljs-comment">/*---------下面是符号相关的运算---------*/</span><br><span class="hljs-comment">// 计算绝对值。</span><br>System.out.println(<span class="hljs-string">&quot;Math.abs(-4.5)：&quot;</span> + Math.abs(-<span class="hljs-number">4.5</span>));<br><span class="hljs-comment">// 符号赋值，返回带有第二个浮点数符号的第一个浮点参数。</span><br>System.out.println(<span class="hljs-string">&quot;Math.copySign(1.2, -1.0)：&quot;</span><br>+ Math.copySign(<span class="hljs-number">1.2</span>, -<span class="hljs-number">1.0</span>));<br><span class="hljs-comment">// 符号函数；如果参数为 0，则返回 0；如果参数大于 0，</span><br><span class="hljs-comment">// 则返回 1.0；如果参数小于 0，则返回 -1.0。</span><br>System.out.println(<span class="hljs-string">&quot;Math.signum(2.3)：&quot;</span> + Math.signum(<span class="hljs-number">2.3</span>));<br><span class="hljs-comment">/*---------下面是大小相关的运算---------*/</span><br><span class="hljs-comment">// 找出最大值</span><br>System.out.println(<span class="hljs-string">&quot;Math.max(2.3 , 4.5)：&quot;</span> + Math.max(<span class="hljs-number">2.3</span> , <span class="hljs-number">4.5</span>));<br><span class="hljs-comment">// 计算最小值</span><br>System.out.println(<span class="hljs-string">&quot;Math.min(1.2 , 3.4)：&quot;</span> + Math.min(<span class="hljs-number">1.2</span> , <span class="hljs-number">3.4</span>));<br><span class="hljs-comment">// 返回第一个参数和第二个参数之间与第一个参数相邻的浮点数。</span><br>System.out.println(<span class="hljs-string">&quot;Math.nextAfter(1.2, 1.0)：&quot;</span><br>+ Math.nextAfter(<span class="hljs-number">1.2</span>, <span class="hljs-number">1.0</span>));<br><span class="hljs-comment">// 返回比目标数略大的浮点数</span><br>System.out.println(<span class="hljs-string">&quot;Math.nextUp(1.2 )：&quot;</span> + Math.nextUp(<span class="hljs-number">1.2</span> ));<br><span class="hljs-comment">// 返回一个伪随机数，该值大于等于 0.0 且小于 1.0。</span><br>System.out.println(<span class="hljs-string">&quot;Math.random()：&quot;</span> + Math.random());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ThreadLocalRandom-（Java-7）与-Random"><a href="#ThreadLocalRandom-（Java-7）与-Random" class="headerlink" title="ThreadLocalRandom （Java 7）与 Random"></a>ThreadLocalRandom （Java 7）与 Random</h2><p>Random 类专门生成伪随机数，两个构造器，一个以当前时间为种子，另一个需显示传入 long 型证书作为种子</p><p>ThreadLocalRandom 在并发访问环境可以减少线程资源竞争，提高线程安全性，通过静态 current() 方法返回 ThreadLocalRandom 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomTest</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-type">Random</span> <span class="hljs-variable">rand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>System.out.println(<span class="hljs-string">&quot;rand.nextBoolean()：&quot;</span><br>+ rand.nextBoolean());<br><span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">16</span>];<br>rand.nextBytes(buffer);<br>System.out.println(Arrays.toString(buffer));<br><span class="hljs-comment">// 生成0.0~1.0之间的伪随机double数</span><br>System.out.println(<span class="hljs-string">&quot;rand.nextDouble()：&quot;</span><br>+ rand.nextDouble());<br><span class="hljs-comment">// 生成0.0~1.0之间的伪随机float数</span><br>System.out.println(<span class="hljs-string">&quot;rand.nextFloat()：&quot;</span><br>+ rand.nextFloat());<br><span class="hljs-comment">// 生成平均值是 0.0，标准差是 1.0的伪高斯数</span><br>System.out.println(<span class="hljs-string">&quot;rand.nextGaussian()：&quot;</span><br>+ rand.nextGaussian());<br><span class="hljs-comment">// 生成一个处于int整数取值范围的伪随机整数</span><br>System.out.println(<span class="hljs-string">&quot;rand.nextInt()：&quot;</span> + rand.nextInt());<br><span class="hljs-comment">// 生成0~26之间的伪随机整数</span><br>System.out.println(<span class="hljs-string">&quot;rand.nextInt(26)：&quot;</span> + rand.nextInt(<span class="hljs-number">26</span>));<br><span class="hljs-comment">// 生成一个处于long整数取值范围的伪随机整数</span><br>System.out.println(<span class="hljs-string">&quot;rand.nextLong()：&quot;</span> +  rand.nextLong());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果两个Random对象的种子相同，且方法的调用顺序相同，则会产生相同的数字序列（伪随机），推荐使用当前时间作为Random对象的种子 System.currentTimeMillis()</p><h3 id="ThreadLoaclRandom用法："><a href="#ThreadLoaclRandom用法：" class="headerlink" title="ThreadLoaclRandom用法："></a>ThreadLoaclRandom用法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ThreadLocalRandom</span> <span class="hljs-variable">rand</span> <span class="hljs-operator">=</span> ThreadLoaclRandom.current();<br><span class="hljs-type">int</span> <span class="hljs-variable">val1</span> <span class="hljs-operator">=</span> rand.nextInt(<span class="hljs-number">4</span>, <span class="hljs-number">20</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">val2</span> <span class="hljs-operator">=</span> rand.nextDouble(<span class="hljs-number">2.0</span>, <span class="hljs-number">10.0</span>);<br></code></pre></td></tr></table></figure><h2 id="BigDecimal类"><a href="#BigDecimal类" class="headerlink" title="BigDecimal类"></a>BigDecimal类</h2><p>BigDecimal 类可以实现精确的浮点运算，float、double两种基本浮点类型会引起精度丢失</p><p>不推荐 new BigDecimal( 0.1 ) , 推荐 new BigDecimal( “0.1” )，<strong>因为浮点数的值不会正好等于0.1</strong><br>如果使用浮点数作为参数，则使用 BigDecimal.valueOf(0.01);</p><p>提供了 add()、substract()、multiply()、divide()、pow(）等精确浮点数运算方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BigDecimalTest</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;0.05&quot;</span>);<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(<span class="hljs-number">0.01</span>);<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">f3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0.05</span>);<br>System.out.println(<span class="hljs-string">&quot;使用String作为BigDecimal构造器参数：&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;0.05 + 0.01 = &quot;</span> + f1.add(f2));<br>System.out.println(<span class="hljs-string">&quot;0.05 - 0.01 = &quot;</span> + f1.subtract(f2));<br>System.out.println(<span class="hljs-string">&quot;0.05 * 0.01 = &quot;</span> + f1.multiply(f2));<br>System.out.println(<span class="hljs-string">&quot;0.05 / 0.01 = &quot;</span> + f1.divide(f2));<br>System.out.println(<span class="hljs-string">&quot;使用double作为BigDecimal构造器参数：&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;0.05 + 0.01 = &quot;</span> + f3.add(f2));<br>System.out.println(<span class="hljs-string">&quot;0.05 - 0.01 = &quot;</span> + f3.subtract(f2));<br>System.out.println(<span class="hljs-string">&quot;0.05 * 0.01 = &quot;</span> + f3.multiply(f2));<br>System.out.println(<span class="hljs-string">&quot;0.05 / 0.01 = &quot;</span> + f3.divide(f2));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个 Arith 工具类，提供double类型的精确计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Arith</span><br>&#123;<br><span class="hljs-comment">// 默认除法运算精度</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEF_DIV_SCALE</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-comment">// 构造器私有，让这个类不能实例化</span><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Arith</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-comment">// 提供精确的加法运算。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">double</span> v1,<span class="hljs-type">double</span> v2)</span><br>&#123;<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(v1);<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(v2);<br><span class="hljs-keyword">return</span> b1.add(b2).doubleValue();<br>&#125;<br><span class="hljs-comment">// 提供精确的减法运算。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">double</span> v1,<span class="hljs-type">double</span> v2)</span><br>&#123;<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(v1);<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(v2);<br><span class="hljs-keyword">return</span> b1.subtract(b2).doubleValue();<br>&#125;<br><span class="hljs-comment">// 提供精确的乘法运算。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">double</span> v1,<span class="hljs-type">double</span> v2)</span><br>&#123;<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(v1);<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(v2);<br><span class="hljs-keyword">return</span> b1.multiply(b2).doubleValue();<br>&#125;<br><span class="hljs-comment">// 提供（相对）精确的除法运算，当发生除不尽的情况时.</span><br><span class="hljs-comment">// 精确到小数点以后10位的数字四舍五入。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">double</span> v1,<span class="hljs-type">double</span> v2)</span><br>&#123;<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(v1);<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(v2);<br><span class="hljs-keyword">return</span> b1.divide(b2 , DEF_DIV_SCALE<br>, RoundingMode.HALF_UP).doubleValue();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>System.out.println(<span class="hljs-string">&quot;0.05 + 0.01 = &quot;</span><br>+ Arith.add(<span class="hljs-number">0.05</span> , <span class="hljs-number">0.01</span>));<br>System.out.println(<span class="hljs-string">&quot;1.0 - 0.42 = &quot;</span><br>+ Arith.sub(<span class="hljs-number">1.0</span> , <span class="hljs-number">0.42</span>));<br>System.out.println(<span class="hljs-string">&quot;4.015 * 100 = &quot;</span><br>+ Arith.mul(<span class="hljs-number">4.015</span> , <span class="hljs-number">100</span>));<br>System.out.println(<span class="hljs-string">&quot;123.3 / 100 = &quot;</span><br>+ Arith.div(<span class="hljs-number">123.3</span> , <span class="hljs-number">100</span>));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Date类（java-util-Date）"><a href="#Date类（java-util-Date）" class="headerlink" title="Date类（java.util.Date）"></a>Date类（java.util.Date）</h2><p>用于处理日期与时间，大部分方法、构造器已经过时</p><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><ul><li><strong>Date()</strong> 底层调用System.currentTimeMillis() ,生成当前日期参数的Date对象</li><li><strong>Date( long date )</strong></li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li>boolean after( date when )</li><li>boolean before( date when )</li><li>long getTime()</li><li>void setTime()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DateTest</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-type">Date</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-comment">// 获取当前时间之后100ms的时间</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + <span class="hljs-number">100</span>);<br>System.out.println(d2);<br>System.out.println(d1.compareTo(d2));<br>System.out.println(d1.before(d2));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Calender-类"><a href="#Calender-类" class="headerlink" title="Calender 类"></a>Calender 类</h2><p>Calander 是一个抽象类，是所有日历类的模板，本身不能实例化，Java提供了一个 GregorianCalendar 类，一个代表格里高利日历的子类。也可以创建自己的 Calendar 子类，作为 Calendar 对象使用（多态）</p><p>通过getInstance()方法获取Calendar对象，依据TimeZone和Local类</p><blockquote><p>tips：Month范围 0~11，代表1~12月</p></blockquote><ul><li><p>void add(int field, int amount)</p><p>  加减指定的时间量，上一级字段会进位，下一级字段会修正到变化最小的值 ，如 2003-8-31 &#x3D;》 2004-2-29</p></li><li><p>int get(int field)</p></li><li><p>int getActualMaximum(int field)</p></li><li><p>int getActualMinimum(int field)</p></li><li><p>void roll(int field, int amount)</p><p>  与add类似，但不会向上一字段进位</p></li><li><p>void set(int field, int value)</p></li><li><p>void set(int year, int month, int date)</p></li><li><p>void set(int year, int month, int date, int hourOfDay, int minute, int second)</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.util.Calendar.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalendarTest</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-type">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br><span class="hljs-comment">// 取出年</span><br>System.out.println(c.get(YEAR));<br><span class="hljs-comment">// 取出月份</span><br>System.out.println(c.get(MONTH));<br><span class="hljs-comment">// 取出日</span><br>System.out.println(c.get(DATE));<br><span class="hljs-comment">// 分别设置年、月、日、小时、分钟、秒</span><br>c.set(<span class="hljs-number">2003</span> , <span class="hljs-number">10</span> , <span class="hljs-number">23</span> , <span class="hljs-number">12</span>, <span class="hljs-number">32</span>, <span class="hljs-number">23</span>); <span class="hljs-comment">//2003-11-23 12:32:23</span><br>System.out.println(c.getTime());<br><span class="hljs-comment">// 将Calendar的年前推1年</span><br>c.add(YEAR , -<span class="hljs-number">1</span>); <span class="hljs-comment">//2002-11-23 12:32:23</span><br>System.out.println(c.getTime());<br><span class="hljs-comment">// 将Calendar的月前推8个月</span><br>c.roll(MONTH , -<span class="hljs-number">8</span>); <span class="hljs-comment">//2002-03-23 12:32:23</span><br>System.out.println(c.getTime());<br><br><br><span class="hljs-type">Calendar</span> <span class="hljs-variable">cal1</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>cal1.set(<span class="hljs-number">2003</span>, <span class="hljs-number">7</span>, <span class="hljs-number">23</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> , <span class="hljs-number">0</span>); <span class="hljs-comment">// 2003-8-23</span><br>cal1.add(MONTH, <span class="hljs-number">6</span>); <span class="hljs-comment">//2003-8-23 =&gt; 2004-2-23</span><br>System.out.println(cal1.getTime());<br><br><br><span class="hljs-type">Calendar</span> <span class="hljs-variable">cal2</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>cal2.set(<span class="hljs-number">2003</span>, <span class="hljs-number">7</span>, <span class="hljs-number">31</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> , <span class="hljs-number">0</span>); <span class="hljs-comment">// 2003-8-31</span><br><span class="hljs-comment">// 因为进位到后月份改为2月，2月没有31日，自动变成29日</span><br>cal2.add(MONTH, <span class="hljs-number">6</span>); <span class="hljs-comment">// 2003-8-31 =&gt; 2004-2-29</span><br>System.out.println(cal2.getTime());<br><br><br><span class="hljs-type">Calendar</span> <span class="hljs-variable">cal3</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>cal3.set(<span class="hljs-number">2003</span>, <span class="hljs-number">7</span>, <span class="hljs-number">23</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> , <span class="hljs-number">0</span>); <span class="hljs-comment">//2003-8-23</span><br><span class="hljs-comment">// MONTH字段“进位”，但YEAR字段并不增加</span><br>cal3.roll(MONTH, <span class="hljs-number">6</span>); <span class="hljs-comment">//2003-8-23 =&gt; 2003-2-23</span><br>System.out.println(cal3.getTime());<br><br><br><span class="hljs-type">Calendar</span> <span class="hljs-variable">cal4</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>cal4.set(<span class="hljs-number">2003</span>, <span class="hljs-number">7</span>, <span class="hljs-number">31</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> , <span class="hljs-number">0</span>); <span class="hljs-comment">//2003-8-31</span><br><span class="hljs-comment">// MONTH字段“进位”后变成2，2月没有31日，</span><br><span class="hljs-comment">// YEAR字段不会改变，2003年2月只有28天</span><br>cal4.roll(MONTH, <span class="hljs-number">6</span>); <span class="hljs-comment">//2003-8-31 =&gt; 2003-2-28</span><br>System.out.println(cal4.getTime());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Calendar-的容错性"><a href="#Calendar-的容错性" class="headerlink" title="Calendar 的容错性"></a>Calendar 的容错性</h3><p>setLenient(false) 可以关闭容错性（non-lenient），进行严格的参数检查，超出允许范围将抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LenientTest</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args</span><br><span class="hljs-params">&#123;</span><br><span class="hljs-params">Calendar cal = Calendar.getInstance()</span>;<br><span class="hljs-comment">// 结果是YEAR字段加1，MONTH字段为1（二月）</span><br>cal.set(MONTH , <span class="hljs-number">13</span>);   <span class="hljs-comment">//①</span><br>System.out.println(cal.getTime());<br><span class="hljs-comment">// 关闭容错性</span><br>cal.setLenient(<span class="hljs-literal">false</span>);<br><span class="hljs-comment">// 导致运行时异常</span><br>cal.set(MONTH , <span class="hljs-number">13</span>);   <span class="hljs-comment">//②</span><br>System.out.println(cal.getTime());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="set-方法的延迟修改"><a href="#set-方法的延迟修改" class="headerlink" title="set() 方法的延迟修改"></a>set() 方法的延迟修改</h3><p>日历字段 f 立即更改，但 Calendar 代表的时间不会立即修改，需等到下次 get()、add()等时才会重新计算日历的时间，防止多次set()时不必要的计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyTest</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-type">Calendar</span> <span class="hljs-variable">cal</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>cal.set(<span class="hljs-number">2003</span> , <span class="hljs-number">7</span> , <span class="hljs-number">31</span>);  <span class="hljs-comment">//2003-8-31</span><br><span class="hljs-comment">// 将月份设为9，但9月31日不存在。</span><br><span class="hljs-comment">// 如果立即修改，系统将会把cal自动调整到10月1日。</span><br>cal.set(MONTH , <span class="hljs-number">8</span>);<br><span class="hljs-comment">// 下面代码输出10月1日</span><br><span class="hljs-comment">//System.out.println(cal.getTime());    //①</span><br><span class="hljs-comment">// 设置DATE字段为5</span><br>cal.set(DATE , <span class="hljs-number">5</span>);    <span class="hljs-comment">//②</span><br>        <span class="hljs-comment">// 输出 2003-9-5 而不是 2003-10-5</span><br>System.out.println(cal.getTime());    <span class="hljs-comment">//③</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="新的日期、时间包（java-time）"><a href="#新的日期、时间包（java-time）" class="headerlink" title="新的日期、时间包（java.time）"></a>新的日期、时间包（java.time）</h2><p>Java 8 新增 java.time 包，包含了以下类：</p><ul><li>Clock（指定时区的当前日期、时间）</li><li>Duration（持续时间，一段时间）</li><li>Instant （具体时刻）</li><li>LocalDate（不带时区的日期）2007-12-03</li><li>LocalTime（不带时区的时间）10:15:30</li><li>LocalDateTime       2007-12-03T10:15:30</li><li>MonthDay（月日）  –04-12</li><li>Year                          2014</li><li>YearMonth（年月）  2014-04</li><li>ZonedDateTime（时区化的日期、时间）</li><li>ZoneId（代表一个时区）</li><li>DayOfWeek （枚举类，周日到周六的枚举值）</li><li>Month（枚举类，一月到十二月的枚举值）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NewDatePackageTest</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-comment">// -----下面是关于Clock的用法-----</span><br><span class="hljs-comment">// 获取当前Clock</span><br><span class="hljs-type">Clock</span> <span class="hljs-variable">clock</span> <span class="hljs-operator">=</span> Clock.systemUTC();<br><span class="hljs-comment">// 通过Clock获取当前时刻</span><br>System.out.println(<span class="hljs-string">&quot;当前时刻为：&quot;</span> + clock.instant());<br><span class="hljs-comment">// 获取clock对应的毫秒数，与System.currentTimeMillis()输出相同</span><br>System.out.println(clock.millis());<br>System.out.println(System.currentTimeMillis());<br><span class="hljs-comment">// -----下面是关于Duration的用法-----</span><br><span class="hljs-type">Duration</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> Duration.ofSeconds(<span class="hljs-number">6000</span>);<br>System.out.println(<span class="hljs-string">&quot;6000秒相当于&quot;</span> + d.toMinutes() + <span class="hljs-string">&quot;分&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;6000秒相当于&quot;</span> + d.toHours() + <span class="hljs-string">&quot;小时&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;6000秒相当于&quot;</span> + d.toDays() + <span class="hljs-string">&quot;天&quot;</span>);<br><span class="hljs-comment">// 在clock基础上增加6000秒，返回新的Clock</span><br><span class="hljs-type">Clock</span> <span class="hljs-variable">clock2</span> <span class="hljs-operator">=</span> Clock.offset(clock, d);<br><span class="hljs-comment">// 可看到clock2与clock1相差1小时40分</span><br>System.out.println(<span class="hljs-string">&quot;当前时刻加6000秒为：&quot;</span> +clock2.instant());<br><span class="hljs-comment">// -----下面是关于Instant的用法-----</span><br><span class="hljs-comment">// 获取当前时间</span><br><span class="hljs-type">Instant</span> <span class="hljs-variable">instant</span> <span class="hljs-operator">=</span> Instant.now();<br>System.out.println(instant);<br><span class="hljs-comment">// instant添加6000秒（即100分钟），返回新的Instant</span><br><span class="hljs-type">Instant</span> <span class="hljs-variable">instant2</span> <span class="hljs-operator">=</span> instant.plusSeconds(<span class="hljs-number">6000</span>);<br>System.out.println(instant2);<br><span class="hljs-comment">// 根据字符串中解析Instant对象</span><br><span class="hljs-type">Instant</span> <span class="hljs-variable">instant3</span> <span class="hljs-operator">=</span> Instant.parse(<span class="hljs-string">&quot;2014-02-23T10:12:35.342Z&quot;</span>);<br>System.out.println(instant3);<br><span class="hljs-comment">// 在instant3的基础上添加5小时4分钟</span><br><span class="hljs-type">Instant</span> <span class="hljs-variable">instant4</span> <span class="hljs-operator">=</span> instant3.plus(Duration<br>.ofHours(<span class="hljs-number">5</span>).plusMinutes(<span class="hljs-number">4</span>));<br>System.out.println(instant4);<br><span class="hljs-comment">// 获取instant4的5天以前的时刻</span><br><span class="hljs-type">Instant</span> <span class="hljs-variable">instant5</span> <span class="hljs-operator">=</span> instant4.minus(Duration.ofDays(<span class="hljs-number">5</span>));<br>System.out.println(instant5);<br><span class="hljs-comment">// -----下面是关于LocalDate的用法-----</span><br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">localDate</span> <span class="hljs-operator">=</span> LocalDate.now();<br>System.out.println(localDate);<br><span class="hljs-comment">// 获得2014年的第146天</span><br>localDate = LocalDate.ofYearDay(<span class="hljs-number">2014</span>, <span class="hljs-number">146</span>);<br>System.out.println(localDate); <span class="hljs-comment">// 2014-05-26</span><br><span class="hljs-comment">// 设置为2014年5月21日</span><br>localDate = LocalDate.of(<span class="hljs-number">2014</span>, Month.MAY, <span class="hljs-number">21</span>);<br>System.out.println(localDate); <span class="hljs-comment">// 2014-05-21</span><br><span class="hljs-comment">// -----下面是关于LocalTime的用法-----</span><br><span class="hljs-comment">// 获取当前时间</span><br><span class="hljs-type">LocalTime</span> <span class="hljs-variable">localTime</span> <span class="hljs-operator">=</span> LocalTime.now();<br><span class="hljs-comment">// 设置为22点33分</span><br>localTime = LocalTime.of(<span class="hljs-number">22</span>, <span class="hljs-number">33</span>);<br>System.out.println(localTime); <span class="hljs-comment">// 22:33</span><br><span class="hljs-comment">// 返回一天中的第5503秒</span><br>localTime = LocalTime.ofSecondOfDay(<span class="hljs-number">5503</span>);<br>System.out.println(localTime); <span class="hljs-comment">// 01:31:43</span><br><span class="hljs-comment">// -----下面是关于localDateTime的用法-----</span><br><span class="hljs-comment">// 获取当前日期、时间</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br><span class="hljs-comment">// 当前日期、时间加上25小时３分钟</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">future</span> <span class="hljs-operator">=</span> localDateTime.plusHours(<span class="hljs-number">25</span>).plusMinutes(<span class="hljs-number">3</span>);<br>System.out.println(<span class="hljs-string">&quot;当前日期、时间的25小时3分之后：&quot;</span> + future);<br><span class="hljs-comment">// 下面是关于Year、YearMonth、MonthDay的用法示例-----</span><br><span class="hljs-type">Year</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> Year.now(); <span class="hljs-comment">// 获取当前的年份</span><br>System.out.println(<span class="hljs-string">&quot;当前年份：&quot;</span> + year); <span class="hljs-comment">// 输出当前年份</span><br>year = year.plusYears(<span class="hljs-number">5</span>); <span class="hljs-comment">// 当前年份再加5年</span><br>System.out.println(<span class="hljs-string">&quot;当前年份再过5年：&quot;</span> + year);<br><span class="hljs-comment">// 根据指定月份获取YearMonth</span><br><span class="hljs-type">YearMonth</span> <span class="hljs-variable">ym</span> <span class="hljs-operator">=</span> year.atMonth(<span class="hljs-number">10</span>);<br>System.out.println(<span class="hljs-string">&quot;year年10月：&quot;</span> + ym); <span class="hljs-comment">// 输出XXXX-10，XXXX代表当前年份</span><br><span class="hljs-comment">// 当前年月再加5年，减3个月</span><br>ym = ym.plusYears(<span class="hljs-number">5</span>).minusMonths(<span class="hljs-number">3</span>);<br>System.out.println(<span class="hljs-string">&quot;year年10月再加5年、减3个月：&quot;</span> + ym);<br><span class="hljs-type">MonthDay</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> MonthDay.now();<br>System.out.println(<span class="hljs-string">&quot;当前月日：&quot;</span> + md); <span class="hljs-comment">// 输出--XX-XX，代表几月几日</span><br><span class="hljs-comment">// 设置为5月23日</span><br><span class="hljs-type">MonthDay</span> <span class="hljs-variable">md2</span> <span class="hljs-operator">=</span> md.with(Month.MAY).withDayOfMonth(<span class="hljs-number">23</span>);<br>System.out.println(<span class="hljs-string">&quot;5月23日为：&quot;</span> + md2); <span class="hljs-comment">// 输出--05-23</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础类库-1</title>
      <link href="/posts/cea.html"/>
      <url>/posts/cea.html</url>
      
        <content type="html"><![CDATA[<div class="note note-success">            <p>对应《疯狂Java讲义（第5版）》7.1-7.2 章节</p>          </div><h2 id="Java程序的入口"><a href="#Java程序的入口" class="headerlink" title="Java程序的入口"></a>Java程序的入口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;...&#125;<br></code></pre></td></tr></table></figure><p>public : 暴露main方法，保证JVM可以调用</p><p>static：JVM直接通过类调用类方法，而不用创建实例</p><p>void: 方法没有返回值</p><p>args：运行java时后面带的字符串参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java ArgsTest Java Spring &quot;Java Spring&quot;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArgsTest</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-comment">// 输出args数组的长度</span><br>System.out.println(args.length);<br><span class="hljs-comment">// 遍历args数组的每个元素, 输出3个值：&quot;Java&quot; &quot;Spring&quot; &quot;Java Spring&quot;</span><br><span class="hljs-keyword">for</span> (String arg : args)<br>&#123;<br>System.out.println(arg);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Scanner获取输入"><a href="#Scanner获取输入" class="headerlink" title="Scanner获取输入"></a>Scanner获取输入</h2><p>Scanner类是一个基于正则表达式的文本扫描器</p><p>可以接收输入流（键盘）、文件、字符串等作为数据源并解析数据</p><p>可能阻塞等待信息输入。输入源未结束，且Scanner读不到更多输入时，hasNext()和next()都有可能阻塞</p><h3 id="扫描输入两种方法"><a href="#扫描输入两种方法" class="headerlink" title="扫描输入两种方法"></a>扫描输入两种方法</h3><p>使用 hasNextXxx() 方法进行验证，再使用 nextXxx() 来读取：Int、Long、Float</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScannerKeyBoardTest</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-comment">// System.in代表标准输入，就是键盘输入</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-comment">// 增加下面一行将只把回车作为分隔符</span><br><span class="hljs-comment">// sc.useDelimiter(&quot;\n&quot;);</span><br><span class="hljs-comment">// 判断是否还有下一个输入项</span><br><span class="hljs-keyword">while</span>(sc.hasNext())<br>&#123;<br><span class="hljs-comment">// 输出输入项</span><br>System.out.println(<span class="hljs-string">&quot;键盘输入的内容是：&quot;</span><br>+ sc.next());<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> sc.useDelimiter(“\n”);可改变Scanner的分隔符，参数为一个正则表达式</p><blockquote><p>若执行nextLong() ， 输入不是整数，则程序会直接退出</p></blockquote><h3 id="next-与-nextLine-区别"><a href="#next-与-nextLine-区别" class="headerlink" title="next() 与 nextLine() 区别"></a>next() 与 nextLine() 区别</h3><p>next(): （空格、Tab、回车）</p><ul><li>1、一定要读取到有效字符后才可以结束输入。</li><li>2、对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。</li><li>3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</li><li>next() 不能得到带有空格的字符串。</li></ul><p>nextLine()：</p><ul><li>1、以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。</li><li>2、可以获得空白。</li></ul><h3 id="读取文件输入"><a href="#读取文件输入" class="headerlink" title="读取文件输入"></a>读取文件输入</h3><p>以File对象作为构造器参数，读文件可能引发IO异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScannerFileTest</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br><span class="hljs-keyword">throws</span> Exception<br>&#123;<br><span class="hljs-comment">// 将一个File对象作为Scanner的构造器参数，Scanner读取文件内容</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;ScannerFileTest.java&quot;</span>));<br>System.out.println(<span class="hljs-string">&quot;ScannerFileTest.java文件内容如下：&quot;</span>);<br><span class="hljs-comment">// 判断是否还有下一行</span><br><span class="hljs-keyword">while</span>(sc.hasNextLine())<br>&#123;<br><span class="hljs-comment">// 输出文件中的下一行</span><br>System.out.println(sc.nextLine());<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h2><p>System类代表当前Java程序运行的平台，System类提供了访问平台环境变量和系统属性的类方法，程序不能创建System类的对象</p><p>getenv()，getProperties()，getProperty(“os.name”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SystemTest</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception<br>&#123;<br><span class="hljs-comment">// 获取系统所有的环境变量</span><br>Map&lt;String,String&gt; env = System.getenv();<br><span class="hljs-keyword">for</span> (String name : env.keySet())<br>&#123;<br>System.out.println(name + <span class="hljs-string">&quot; ---&gt; &quot;</span> + env.get(name));<br>&#125;<br><span class="hljs-comment">// 获取指定环境变量的值</span><br>System.out.println(System.getenv(<span class="hljs-string">&quot;JAVA_HOME&quot;</span>));<br><span class="hljs-comment">// 获取所有的系统属性</span><br><span class="hljs-type">Properties</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> System.getProperties();<br><span class="hljs-comment">// 将所有系统属性保存到props.txt文件中</span><br>props.store(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;props.txt&quot;</span>)<br>, <span class="hljs-string">&quot;System Properties&quot;</span>);<br><span class="hljs-comment">// 输出特定的系统属性</span><br>System.out.println(System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>currentTimeMills()</code>, <code>nanoTime()</code>,返回距离1970年1月1日午夜的时间差</p><p>时间粒度取决于底层操作系统</p><p>标准输入流、输出流、错误输出流</p><p>in、out、err、setIn、setOut、setErr()</p><p>identityHashCode(Object X)</p><p>返回指定对象精确hashCode值，hashCode值相同必定为同一对象，根据对象地址计算得到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IdentityHashCodeTest</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-comment">// 下面程序中s1和s2是两个不同对象</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br><span class="hljs-comment">// String重写了hashCode()方法——改为根据字符序列计算hashCode值，</span><br><span class="hljs-comment">// 因为s1和s2的字符序列相同，所以它们的hashCode方法返回值相同</span><br>System.out.println(s1.hashCode()<br>+ <span class="hljs-string">&quot;----&quot;</span> + s2.hashCode());<br><span class="hljs-comment">// s1和s2是不同的字符串对象，所以它们的identityHashCode值不同</span><br>System.out.println(System.identityHashCode(s1)<br>+ <span class="hljs-string">&quot;----&quot;</span> + System.identityHashCode(s2));<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java&quot;</span>;<br><span class="hljs-comment">// s3和s4是相同的字符串对象，所以它们的identityHashCode值相同</span><br>System.out.println(System.identityHashCode(s3)<br>+ <span class="hljs-string">&quot;----&quot;</span> + System.identityHashCode(s4));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Runtime类"><a href="#Runtime类" class="headerlink" title="Runtime类"></a>Runtime类</h2><p>代表java程序的运行时环境，每个Java程序对应一个Runtime实例，通过getRuntime()获取</p><p>gc()和runFinalization()通知系统垃圾回收</p><p>可以访问JVM的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RuntimeTest</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-comment">// 获取Java程序关联的运行时对象</span><br><span class="hljs-type">Runtime</span> <span class="hljs-variable">rt</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>System.out.println(<span class="hljs-string">&quot;处理器数量：&quot;</span><br>+ rt.availableProcessors());<br>System.out.println(<span class="hljs-string">&quot;空闲内存数：&quot;</span><br>+ rt.freeMemory());<br>System.out.println(<span class="hljs-string">&quot;总内存数：&quot;</span><br>+ rt.totalMemory());<br>System.out.println(<span class="hljs-string">&quot;可用最大内存数：&quot;</span><br>+ rt.maxMemory());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>exec() 启动进程运行操作系统命令，即产生了一个<strong>进程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExecTest</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br><span class="hljs-keyword">throws</span> Exception<br>&#123;<br><span class="hljs-type">Runtime</span> <span class="hljs-variable">rt</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br><span class="hljs-comment">// 运行记事本程序</span><br>rt.exec(<span class="hljs-string">&quot;notepad.exe&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Java9-的-ProcessHandle"><a href="#Java9-的-ProcessHandle" class="headerlink" title="Java9 的 ProcessHandle"></a>Java9 的 ProcessHandle</h2><p>Process代表进程，ProcessHandle接口可获取进程信息，<code>ProcessHandle ph = p.toHandle()</code>，<code>ProcessHandle.Info info = ph.info()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProcessHandleTest</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br><span class="hljs-keyword">throws</span> Exception<br>&#123;<br><span class="hljs-type">Runtime</span> <span class="hljs-variable">rt</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br><span class="hljs-comment">// 运行记事本程序</span><br><span class="hljs-type">Process</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> rt.exec(<span class="hljs-string">&quot;notepad.exe&quot;</span>);<br><span class="hljs-type">ProcessHandle</span> <span class="hljs-variable">ph</span> <span class="hljs-operator">=</span> p.toHandle();<br>System.out.println(<span class="hljs-string">&quot;进程是否运行: &quot;</span> + ph.isAlive());<br>System.out.println(<span class="hljs-string">&quot;进程ID: &quot;</span> + ph.pid());<br>System.out.println(<span class="hljs-string">&quot;父进程: &quot;</span> + ph.parent());<br><span class="hljs-comment">// 获取ProcessHandle.Info信息</span><br>ProcessHandle.<span class="hljs-type">Info</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> ph.info();<br><span class="hljs-comment">// 通过ProcessHandle.Info信息获取进程相关信息</span><br>System.out.println(<span class="hljs-string">&quot;进程命令: &quot;</span> + info.command());<br>System.out.println(<span class="hljs-string">&quot;进程参数: &quot;</span> + info.arguments());<br>System.out.println(<span class="hljs-string">&quot;进程启动时间: &quot;</span> + info.startInstant());<br>System.out.println(<span class="hljs-string">&quot;进程累计运行时间: &quot;</span> + info.totalCpuDuration());<br><span class="hljs-comment">// 通过CompletableFuture在进程结束时运行某个任务</span><br>CompletableFuture&lt;ProcessHandle&gt; cf = ph.onExit();<br>cf.thenRunAsync(()-&gt;&#123;<br>System.out.println(<span class="hljs-string">&quot;程序退出&quot;</span>);<br>&#125;);<br>Thread.sleep(<span class="hljs-number">5000</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客主题美化</title>
      <link href="/posts/5a77.html"/>
      <url>/posts/5a77.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>博客框架：hexo</p><p>主题：Fluid</p><p>其他较好的hexo主题：<strong>butterfly</strong> <strong>next</strong> </p></blockquote><h2 id="Fluid主题美化参考"><a href="#Fluid主题美化参考" class="headerlink" title="Fluid主题美化参考"></a>Fluid主题美化参考</h2><blockquote><p><a href="https://blog.kevinchu.top/2023/07/17/hexo-theme-fluid-modify/">🔗Hexo博客Fluid主题魔改记录 - KEVIN’S BLOG (kevinchu.top)</a></p><p><a href="https://www.erenship.com/posts/40222.html">🔗Hexo’s Fluid 主题私人定制（持续更新） - Eren の 宇宙船 (erenship.com)</a></p><p><a href="https://emoryhuang.cn/blog/1729600336.html">🔗Hexo + Fluid 美化 | EmoryHuang’s Blog</a></p><p><a href="https://www.jianshu.com/p/ba692a97a602">🔗让你的 Hexo 博客更美观的 N 种配置（基于 Fluid 主题扩展） - 简书 (jianshu.com)</a></p><p><a href="https://kiyanyang.github.io/posts/f92be1eb/">🔗Hexo-Fluid 博客美化和修改 | Kiyan’s Blog (kiyanyang.github.io)</a></p><p><a href="https://gilgamesh-lzq.github.io/blog/6560820db005/">🔗hexo博客fluid主题美化 - Gilgamesh’s Blog (gilgamesh-lzq.github.io)</a></p><p>🔗<a href="https://chen320.github.io/2022/07/14/Hexo-Fluid%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/">Hexo-Fluid博客主题美化 - Chen’s Blog (chen320.github.io)</a></p></blockquote><h2 id="经过美化的博客"><a href="#经过美化的博客" class="headerlink" title="经过美化的博客"></a>经过美化的博客</h2><blockquote><p>🔗<a href="https://www.cnblogs.com/zhangshuhao1116/p/14913401.html">博客园美化：添加公告栏时钟控件 - Shu_HowZ - 博客园 (cnblogs.com)</a></p></blockquote><h2 id="Hexo自定义HTML，JS，CSS的一种引入方法"><a href="#Hexo自定义HTML，JS，CSS的一种引入方法" class="headerlink" title="Hexo自定义HTML，JS，CSS的一种引入方法"></a>Hexo自定义HTML，JS，CSS的一种引入方法</h2><p>博客根目录<code>scripts</code>文件夹下新建任意名称js文件</p><p>body_end表示插入位置，default代表作用范围为全局</p><p><a href="https://hexo.io/zh-cn/api/injector">注入器（Injector） | Hexo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_end&#x27;</span>, <br><span class="hljs-string">``</span>, <br><span class="hljs-string">&#x27;default&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="Hexo网页折叠块（Fluid主题自带）"><a href="#Hexo网页折叠块（Fluid主题自带）" class="headerlink" title="Hexo网页折叠块（Fluid主题自带）"></a>Hexo网页折叠块（Fluid主题自带）</h2><blockquote><p><a href="https://github.com/AimTao/hexo-fold/blob/master/README_CN.md">hexo-fold&#x2F;README_CN.md at master · AimTao&#x2F;hexo-fold (github.com)</a></p></blockquote><h2 id="看板娘"><a href="#看板娘" class="headerlink" title="看板娘"></a>看板娘</h2><p>配置博客：<a href="https://www.cnblogs.com/cxfs/p/16620809.html">给你的hexo添加live2D看板娘 - 遗失的美好灬 - 博客园 (cnblogs.com)</a></p><p>加强版项目地址：<a href="https://github.com/stevenjoezhang/live2d-widget">stevenjoezhang&#x2F;live2d-widget: 把萌萌哒的看板娘抱回家 (ノ≧∇≦)ノ | Live2D widget for web platform (github.com)</a></p><p>看板娘拖拽功能： <a href="https://github.com/pymastera/live2d-widget/pull/2/files">https://github.com/pymastera/live2d-widget/pull/2/files</a></p><p>纯本地版：<a href="https://blog.csdn.net/qq_57421630/article/details/127162328">【live2D看板娘】为你的网站添加萌萌的二次元板娘，这都拿不下你？-CSDN博客</a></p>    <div class="fold">      <div class="fold-title fold-secondary collapsed" data-toggle="collapse" href="#collapse-5450337e" role="button" aria-expanded="false" aria-controls="collapse-5450337e">        <div class="fold-arrow">▶</div>展开查看教程      </div>      <div class="fold-collapse collapse" id="collapse-5450337e">        <div class="fold-content">          <h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>下载 <a href="https://github.com/stevenjoezhang/live2d-widget">stevenjoezhang的项目</a>，解压到本地博客目录的 <code>themes/next/source</code> 下，修改文件夹名为 <code>live2d-widget</code>（部署时记得把li ve2d-widget目录的.git删了），修改项目中的 <code>autoload.js</code> 文件，如下：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">// const live2d_path <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://fastly.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/&quot;</span><span class="hljs-comment">;</span><br>const live2d_path <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/live2d-widget/&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><blockquote><p>如果你的hexo加了URL前缀，就将前缀加入live2d_path</p></blockquote><h3 id="修改API"><a href="#修改API" class="headerlink" title="修改API"></a>修改API</h3><p><code>autoload.js</code>下的第34行是填写了live2d模型的API，如果你在国内可能<code>jsdelivr.net</code>CDN不仅不能加速，还会减速，我们把他注释掉，然后使用fghrsh的API接口：<a href="https://www.fghrsh.net/post/170.html"><code>live2d.fghrsh.net</code></a>。或者你拥有自己的服务器，也可以自己搭建<a href="https://github.com/fghrsh/live2d_api">live2d API项目</a>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">initWidget</span>(&#123;<br>   <span class="hljs-attr">waifuPath</span>: live2d_path + <span class="hljs-string">&quot;waifu-tips.json&quot;</span>,<br>  <span class="hljs-attr">apiPath</span>: <span class="hljs-string">&quot;https://live2d.fghrsh.net/api/&quot;</span>,<br>  // <span class="hljs-attr">cdnPath</span>: <span class="hljs-string">&quot;https://fastly.jsdelivr.net/gh/fghrsh/live2d_api/&quot;</span><br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>每个主题引入不一样，具体请查询自己的主题文档，这里拿next举例</p><p>在<code>/themes/next/layout/_layout.swig</code>中,新增如下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/live2d-widget/autoload.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>引入jQuery和font-awesome。你的主题如果默认引入了，那请不要重复引入。2020年1月1日起，该项目不再依赖于 jQuery。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;script <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;link <span class="hljs-attribute">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>想修改看板娘大小、位置、格式、文本内容等，可查看并修改 waifu-tips.js 、 waifu-tips.json 和 waifu.css。</p>        </div>      </div>    </div><h2 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h2><p>部署API：<a href="https://github.com/imsyy/Meting-API/">imsyy&#x2F;Meting-API: 🐳 Meting API 的容器化与部署 (github.com)</a></p><p>引入：<a href="https://github.com/xizeyoupan/MetingJS">xizeyoupan&#x2F;MetingJS: :cake: A powerful plugin connect APlayer and Meting (github.com)</a></p><p>调整：<a href="https://blog.saop.cc/p/8dc9/">Butterfly主题Aplayer播放器的美化与调整 | 定の栈 (saop.cc)</a></p><h3 id="其他播放器"><a href="#其他播放器" class="headerlink" title="其他播放器"></a>其他播放器</h3><blockquote><p><a href="https://myhkw.cn/">🎵明月浩空网-永久免费的HTML5网站音乐播放器 (myhkw.cn)</a></p></blockquote><h2 id="JS渲染"><a href="#JS渲染" class="headerlink" title="JS渲染"></a>JS渲染</h2><p>可以考虑延迟加载：defer，“延迟” 之意。这里的延迟，指的是延迟执行脚本，下载则不会被阻塞。可防止<strong>阻塞 HTML 的 DOM 构建</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;app.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>樱花特效：<a href="https://cdn.jsdelivr.net/gh/Ukenn2112/UkennWeb@3.0/index/web.js">https://cdn.jsdelivr.net/gh/Ukenn2112/UkennWeb@3.0/index/web.js</a></p><p>鼠标移动小星星特效：<a href="https://static.kevinchu.top/blog/assets/js/stars.js">https://static.kevinchu.top/blog/assets/js/stars.js</a></p><p>礼花打字特效：<a href="https://static.kevinchu.top/blog/assets/js/typing-effect.js">https://static.kevinchu.top/blog/assets/js/typing-effect.js</a></p><p>小雪花飘落效果：<a href="https://cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/snowflake.min.js">https://cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/snowflake.min.js</a></p><p>鼠标点击出字（defer）：<a href="https://cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/containsWord.min.js">https://cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/containsWord.min.js</a></p><p>鼠标点击爱心（defer）：<a href="https://cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/love.min.js">https://cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/love.min.js</a> </p></blockquote><p>更多特效参考：<a href="https://chen320.github.io/2022/07/14/Hexo-Fluid%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/">Hexo-Fluid博客主题美化 - Chen’s Blog (chen320.github.io)</a></p><p>鼠标点击特效（烟花特效）：<a href="https://blog.csdn.net/qq_43562785/article/details/109511585">纯Javascript实现鼠标点击特效（烟花特效）_js鼠标点击效果-CSDN博客</a></p><h2 id="网页背景线条："><a href="#网页背景线条：" class="headerlink" title="网页背景线条："></a>网页背景线条：</h2><p>&#x2F;js&#x2F;canvas-nest.js 存在问题</p><p>修改铺满全屏幕：修改style：display:block;position:fixed;top:0;left:0;right:0;bottom:0;</p><h2 id="一言"><a href="#一言" class="headerlink" title="一言"></a>一言</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://v1.hitokoto.cn/?encode=js&amp;select=%23hitokoto&quot;</span> <span class="hljs-attr">defer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hitokoto&quot;</span>&gt;</span>:D 获取中...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="悬挂的喵"><a href="#悬挂的喵" class="headerlink" title="悬挂的喵"></a>悬挂的喵</h2><p>参考博客园：<a href="https://blog.csdn.net/fshool/article/details/104688363">博客园使用悬挂猫(上吊猫)置顶插件-CSDN博客</a>，可实现快速返回顶部的功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 悬挂的喵 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/szgotop.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/css/szgotop.css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;back-to-top cd-top faa-float animated cd-is-visible&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;top: -900px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="萌国备案"><a href="#萌国备案" class="headerlink" title="萌国备案"></a>萌国备案</h2><p><a href="https://moe.one/thread-433.htm">怎么添加萌备图标-综合版块-萌社区 (moe.one)</a></p><p>LOGO包位于 <a href="https://icp.gov.moe/moe-icon.zip">https://icp.gov.moe/moe-icon.zip</a></p><h2 id="浏览器标题恶搞"><a href="#浏览器标题恶搞" class="headerlink" title="浏览器标题恶搞"></a>浏览器标题恶搞</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//添加浏览器标题恶搞</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">OriginTitle</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span>;<br><span class="hljs-keyword">var</span> titleTime;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;visibilitychange&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">hidden</span>) &#123;<br>        $(<span class="hljs-string">&#x27;[rel=&quot;icon&quot;]&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;href&#x27;</span>, <span class="hljs-string">&quot;/img/favicon.png&quot;</span>);<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;╭(°A°`)╮ 页面崩溃啦 ~&#x27;</span>;<br>        <span class="hljs-built_in">clearTimeout</span>(titleTime);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        $(<span class="hljs-string">&#x27;[rel=&quot;icon&quot;]&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;href&#x27;</span>, <span class="hljs-string">&quot;/img/favicon.png&quot;</span>);<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;(ฅ&gt;ω&lt;*ฅ) 噫又好啦 ~&#x27;</span> + <span class="hljs-title class_">OriginTitle</span>;<br>        titleTime = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-title class_">OriginTitle</span>;<br>        &#125;, <span class="hljs-number">2000</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="页面加载动画"><a href="#页面加载动画" class="headerlink" title="页面加载动画"></a>页面加载动画</h2><blockquote><p><a href="https://blog.kevinchu.top/2023/07/17/hexo-theme-fluid-modify/">🔗Hexo博客Fluid主题魔改记录 - KEVIN’S BLOG (kevinchu.top)</a></p></blockquote><p>增加超过1s移除功能，需放于较前位置加载：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//移除加载动画</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;loading&#x27;</span>);<br>    box.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;<br><br>    <span class="hljs-comment">// 👇️ hides element (still takes up space on page)</span><br>    <span class="hljs-comment">// box.style.visibility = &#x27;hidden&#x27;;</span><br>&#125;, <span class="hljs-number">1000</span>); <span class="hljs-comment">// 👈️ time in milliseconds</span><br></code></pre></td></tr></table></figure>    <div class="fold">      <div class="fold-title fold-secondary collapsed" data-toggle="collapse" href="#collapse-15b362a4" role="button" aria-expanded="false" aria-controls="collapse-15b362a4">        <div class="fold-arrow">▶</div>展开查看教程      </div>      <div class="fold-collapse collapse" id="collapse-15b362a4">        <div class="fold-content">          <p>在<code>themes\fluid\layout\_partials\</code>路径下创建<code>loading.ejs</code>，内容参考：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;%<br>    play_time=theme.loading.play_time || 500<br>%&gt;<br><br>&lt;style type=&quot;text/css&quot;&gt;<br>    @keyframes spin3D &#123;<br>        from &#123;<br>            transform: rotate3d(0.5, 0.5, 0.5, 360deg);<br>        &#125;<br><br>        to &#123;<br>            transform: rotate3d(0deg);<br>        &#125;<br>    &#125;<br><br>    #loading &#123;<br>        height: 100%;<br>        background-color: #172d4781;<br>        backdrop-filter: saturate(100%) blur(10px);<br>        display: flex;<br>        justify-content: center;<br>        align-items: center;<br>        position: fixed;<br>        top: 0;<br>        left: 0;<br>        right: 0;<br>        overflow: hidden;<br>        z-index: 99999999;<br>    &#125;<br><br>    .spinner-box &#123;<br>        width: 300px;<br>        height: 300px;<br>        display: flex;<br>        justify-content: center;<br>        align-items: center;<br>        background-color: transparent;<br>    &#125;<br><br>    .leo &#123;<br>        position: absolute;<br>        display: flex;<br>        justify-content: center;<br>        align-items: center;<br>        border-radius: 50%;<br>    &#125;<br><br>    .blue-orbit &#123;<br>        width: 175px;<br>        height: 175px;<br>        border: 2px solid #1a91fa;<br>        animation: spin3D 3s linear .2s infinite;<br>    &#125;<br><br>    .green-orbit &#123;<br>        width: 135px;<br>        height: 135px;<br>        border: 2px solid #00ffdd;<br>        animation: spin3D 2s linear 0s infinite;<br>    &#125;<br><br>    .red-orbit &#123;<br>        width: 100px;<br>        height: 100px;<br>        border: 2px solid #d75151;<br>        animation: spin3D 1s linear 0s infinite;<br>    &#125;<br><br>    .white-orbit-a &#123;<br>        width: 70px;<br>        height: 70px;<br>        border: 1px solid #faf5f5;<br>        animation: spin3D 3s linear 0s infinite;<br>    &#125;<br><br>    .white-orbit-b &#123;<br>        width: 70px;<br>        height: 70px;<br>        border: 1px solid #faf5f5;<br>        animation: spin3D 1.5s linear 0s infinite;<br>    &#125;<br><br>    .nucleus &#123;<br>        width: 1px;<br>        height: 1px;<br>        border: 1px solid #ffffff;<br>        animation: spin3D 1s linear 0s infinite;<br>    &#125;<br>&lt;/style&gt;<br><br>&lt;div id=&quot;loading&quot;&gt;<br>    &lt;div class=&quot;spinner-box&quot;&gt;<br>        &lt;div class=&quot;blue-orbit leo&quot;&gt;&lt;/div&gt;<br>        &lt;div class=&quot;green-orbit leo&quot;&gt;&lt;/div&gt;<br>        &lt;div class=&quot;red-orbit leo&quot;&gt;&lt;/div&gt;<br>        &lt;div class=&quot;white-orbit-a leo&quot;&gt;&lt;/div&gt;<br>        &lt;div class=&quot;white-orbit-b leo&quot;&gt;&lt;/div&gt;<br>        &lt;div class=&quot;nucleus leo&quot;&gt;&lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>    (function () &#123;<br>        const loaded = function () &#123;<br>            window.onload = function () &#123;<br>                const loader = document.getElementById(&quot;loading&quot;);<br>                loader.className = &quot;fadeout&quot;;<br>                setTimeout(function () &#123;<br>                    loader.style.display = &quot;none&quot;;<br>                &#125;, <br>                &lt;%- play_time %&gt;<br>                );<br>            &#125;<br>        &#125;;<br>        loaded();<br>    &#125;)();<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>修改<code>themes\fluid\layout\layout.ejs</code>文件，找到<code>&lt;body&gt;</code>标签，在其内部第一行插入下面代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;% if (theme.loading.enable) &#123; %&gt;<br>  &lt;%- partial(&#x27;_partials/loading.ejs&#x27;) %&gt;<br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure><p>修改主题配置文件<code>_config.fluid.yml</code>，添加loading动画的配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 加载动画</span><br><span class="hljs-attr">loading:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 动画时长，从动画开始播放计算，不包含页面加载时间，单位ms</span><br>  <span class="hljs-attr">play_time:</span> <span class="hljs-number">500</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div><h2 id="CSS渲染"><a href="#CSS渲染" class="headerlink" title="CSS渲染"></a>CSS渲染</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;//cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/shubiao.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>滚动条颜色：<a href="https://cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/scroll.css">https://cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/scroll.css</a></p><p>头部打字机颜色效果渐变：<a href="https://cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/gradient.css">https://cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/gradient.css</a>“</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#subtitle</span> &#123;<br>    <span class="hljs-attribute">background-size</span>: auto <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>增加以上css修改</p></blockquote><p>更换鼠标指针样式 ：<a href="https://cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/shubiao.css">https://cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/shubiao.css</a>“</p><p>文章标题修改：title.css</p></blockquote><h3 id="标题颜色-首行缩进-代码框表格框折叠"><a href="#标题颜色-首行缩进-代码框表格框折叠" class="headerlink" title="标题颜色,首行缩进,代码框表格框折叠:"></a>标题颜色,首行缩进,代码框表格框折叠:</h3><p><a href="https://gilgamesh-lzq.github.io/blog/6560820db005/">hexo博客fluid主题美化 - Gilgamesh’s Blog (gilgamesh-lzq.github.io)</a></p><p>保证表格完全展开</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 代码和表格设置最大高度，高度或宽度超出都不会显示在页面中，可以通过滚动条查看 */</span><br><span class="hljs-selector-tag">figure</span> <span class="hljs-selector-tag">table</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">word-break</span>: initial;<br>    <span class="hljs-attribute">overflow-x</span>: auto;<br>    <span class="hljs-attribute">max-height</span>: <span class="hljs-number">30em</span>;<br>    <span class="hljs-attribute">overflow-y</span>: auto <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="黑暗模式作用域"><a href="#黑暗模式作用域" class="headerlink" title="黑暗模式作用域:"></a>黑暗模式作用域:</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 黑暗模式作用域 */</span><br><span class="hljs-selector-attr">[data-user-color-scheme=<span class="hljs-string">&#x27;dark&#x27;</span>]</span> <span class="hljs-selector-tag">body</span>&#123;<br>    <span class="hljs-attribute">background-image</span>: none;<br>&#125;<br><span class="hljs-selector-attr">[data-user-color-scheme=<span class="hljs-string">&#x27;dark&#x27;</span>]</span> <span class="hljs-selector-id">#board</span>&#123;<br>    <span class="hljs-attribute">background-image</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="减小文字页边距"><a href="#减小文字页边距" class="headerlink" title="减小文字页边距"></a>减小文字页边距</h3><p>fluid主题本来中间文字框已经不大了，再加上边距，实际文字占宽度一半不到。这或许美观，但不实用。可以将页边距从10%改为5%，视觉上内容会充实许多。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.post-content</span>&#123;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">5%</span><br>  padding-right: <span class="hljs-number">5%</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="行内代码颜色"><a href="#行内代码颜色" class="headerlink" title="行内代码颜色"></a>行内代码颜色</h3><p>默认的行内代码颜色和正文颜色是继承关系，且行内代码背景色也不明显，因此视觉上难以区分。但是配置文件中又没有对应选项可以修改，查阅 GitHub 的 Issue 发现，有人曾提供过一个解决方案。</p><p>打开路径 <code>hewei2001/themes/fluid/source/css/_pages/_base</code> 下的 <code>base.styl</code> 文件，找到 <code>code</code> 配置项，修改颜色为 <code>#E05B35</code>。</p><h2 id="替换Mac风格代码块"><a href="#替换Mac风格代码块" class="headerlink" title="替换Mac风格代码块"></a>替换Mac风格代码块</h2><p>在主题文件<code>\source\css</code>目录下新建样式文件，如<code>macpanel.styl</code>，内容参考：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.highlight</span><br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#21252b</span><br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span><br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-number">30px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">4</span>)<br>    <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">30px</span><br><br>    <span class="hljs-selector-pseudo">&amp;::before</span><br>      <span class="hljs-attribute">background</span>: <span class="hljs-number">#fc625d</span><br>      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span><br>      <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span> <span class="hljs-number">#fdbc40</span>, <span class="hljs-number">40px</span> <span class="hljs-number">0</span> <span class="hljs-number">#35cd4b</span><br>      <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27; &#x27;</span><br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">12px</span><br>      <span class="hljs-attribute">left</span>: <span class="hljs-number">12px</span><br>      <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">20px</span><br>      <span class="hljs-attribute">position</span>: absolute<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">12px</span><br></code></pre></td></tr></table></figure><p>修改主题配置文件<code>_config.fluid.yml</code>，找到<code>custom_css</code>配置项，引入刚刚新建的样式文件（此处引入<code>.styl</code>文件无需加后缀）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">custom_css:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/css/macpanel</span><br></code></pre></td></tr></table></figure><p>继续修改<code>_config.fluid.yml</code>，找到<code>code.highlightjs</code>配置项，将代码高亮风格修改暗色风格（dark系列），如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">highlightjs:</span><br>  <span class="hljs-comment"># 在链接中挑选 style 填入</span><br>  <span class="hljs-comment"># Select a style in the link</span><br>  <span class="hljs-comment"># See: https://highlightjs.org/static/demo/</span><br>  <span class="hljs-attr">style:</span> <span class="hljs-string">&quot;github dark dimmed&quot;</span><br>  <span class="hljs-attr">style_dark:</span> <span class="hljs-string">&quot;dark&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>注：如果选用其他代码高亮风格，有可能会造成代码背景是偏白色的，与黑色的Mac栏不搭。</p></blockquote><h2 id="Fluid专区"><a href="#Fluid专区" class="headerlink" title="Fluid专区"></a>Fluid专区</h2><h3 id="全屏背景-文章滑入动画"><a href="#全屏背景-文章滑入动画" class="headerlink" title="全屏背景  &amp;&amp; 文章滑入动画"></a>全屏背景  &amp;&amp; 文章滑入动画</h3><p>全屏背景：<a href="https://qingshaner.com/Hexo%20Fluid%E4%B8%BB%E9%A2%98%E8%83%8C%E6%99%AF%E5%9B%BA%E5%AE%9A(ES6%E6%94%B9%E5%86%99%E7%89%88)%E4%B8%8E%E6%AF%9B%E7%8E%BB%E7%92%83%E5%BA%95%E9%A1%B5/">春草明年绿💔王孙归不归 (qingshaner.com)</a></p><p>文章滑入动画：<a href="https://qingshaner.com/Hexo%20fluid%E4%B8%BB%E9%A2%98%E9%A6%96%E9%A1%B5%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%BB%91%E5%85%A5%E5%8A%A8%E7%94%BB/">春草明年绿💔王孙归不归 (qingshaner.com)</a></p><blockquote><p>动画的js代码中cards变量有冲突，修改一个其他名字</p></blockquote>    <div class="fold">      <div class="fold-title fold-secondary collapsed" data-toggle="collapse" href="#collapse-81b1a277" role="button" aria-expanded="false" aria-controls="collapse-81b1a277">        <div class="fold-arrow">▶</div>展开查看教程      </div>      <div class="fold-collapse collapse" id="collapse-81b1a277">        <div class="fold-content">          <p>只要新建两个文件就可实现背景固定</p><p><a href="https://qingshaner.oss-cn-hangzhou.aliyuncs.com/images/202205012020106.jpg"><img src="https://qingshaner.oss-cn-hangzhou.aliyuncs.com/images/202205012020106.jpg" alt="img"></a></p><h3 id="注入背景容器"><a href="#注入背景容器" class="headerlink" title="注入背景容器"></a>注入背景容器</h3><p>根目录新建<code>scripts</code>文件夹,新建<code>injector.js</code></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xquery">const &#123;<span class="hljs-built_in"> root</span>: siteRoot = <span class="hljs-string">&quot;/&quot;</span> &#125; = hexo.config;<br>hexo.extend.injector.register(<span class="hljs-string">&quot;body_begin&quot;</span>, `<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;web_bg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>`);<br>hexo.extend.injector.register(<span class="hljs-string">&quot;body_end&quot;</span>,`<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;$&#123;siteRoot&#125;js/backgroundize.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>`);<br></code></pre></td></tr></table></figure><h3 id="背景替换"><a href="#背景替换" class="headerlink" title="背景替换"></a>背景替换</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dart">source/js`目录新建`backgroundize.js<br><span class="hljs-built_in">document</span><br>  .<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;#web_bg&#x27;</span>)<br>  .setAttribute(<span class="hljs-string">&#x27;style&#x27;</span>, `background-image: $&#123;<span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;.banner&#x27;</span>).style.background.split(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">0</span>]&#125;;position: fixed;width: <span class="hljs-number">100</span>%;height: <span class="hljs-number">100</span>%;z-index: <span class="hljs-number">-1</span>;background-size: cover;`);<br><br><span class="hljs-built_in">document</span><br>  .<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&quot;#banner&quot;</span>)<br>  .setAttribute(<span class="hljs-string">&#x27;style&#x27;</span>, <span class="hljs-string">&#x27;background-image: url()&#x27;</span>)<br><br><span class="hljs-built_in">document</span><br>  .<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&quot;#banner .mask&quot;</span>)<br>  .setAttribute(<span class="hljs-string">&#x27;style&#x27;</span>, <span class="hljs-string">&#x27;background-color:rgba(0,0,0,0)&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="毛玻璃"><a href="#毛玻璃" class="headerlink" title="毛玻璃"></a>毛玻璃</h2><h3 id="透明背景"><a href="#透明背景" class="headerlink" title="透明背景"></a>透明背景</h3><p><code>_config.fluid.yml</code>修改背景色为透明</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-meta"># 主面板背景色</span><br><span class="hljs-meta"># Color of main board</span><br><span class="hljs-symbol">board_color:</span> <span class="hljs-string">&quot;#ffffff80&quot;</span><br><span class="hljs-symbol">board_color_dark:</span> <span class="hljs-string">&quot;#00000080&quot;</span><br></code></pre></td></tr></table></figure><h3 id="毛玻璃滤镜"><a href="#毛玻璃滤镜" class="headerlink" title="毛玻璃滤镜"></a>毛玻璃滤镜</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">css`文件夹新建`cloudedGlass<span class="hljs-selector-class">.css</span><br><span class="hljs-selector-id">#board</span> &#123;<br>  -webkit-backdrop-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">5px</span>);<br>  backdrop-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">5px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>_config.fluid.yml</code>引入</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-comment"># 指定自定义 .css 文件路径，用法和 custom_js 相同</span><br><span class="hljs-comment"># The usage is the same as custom_js</span><br><span class="hljs-attribute">custom_css</span><span class="hljs-punctuation">: </span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/css/cloudedGlass.css</span><br></code></pre></td></tr></table></figure><p><code>backdrop-filter</code>兼容性不好,要结合背景图片适当调节背景色使无毛玻璃时也能展示内容</p><p><strong>参考链接:</strong></p><p><a href="https://aigisss.com/blog/posts/1563abd8.html">《背景固定 (AIGISSS)》</a></p>        </div>      </div>    </div><h3 id="代码框表格框折叠"><a href="#代码框表格框折叠" class="headerlink" title="代码框表格框折叠"></a>代码框表格框折叠</h3><p><a href="https://gilgamesh-lzq.github.io/blog/6560820db005/">hexo博客fluid主题美化 - Gilgamesh’s Blog (gilgamesh-lzq.github.io)</a></p><h3 id="页脚footer"><a href="#页脚footer" class="headerlink" title="页脚footer"></a>页脚footer</h3><p>添加网站运行时间</p><p>萌国备案：<a href="https://icp.gov.moe/?keyword=20240658">萌ICP备20240658号 (gov.moe)</a></p><h3 id="Waline"><a href="#Waline" class="headerlink" title="Waline"></a>Waline</h3><p>实现贴图，自定义样式：<a href="https://blog.fufu.ink/2023/04/walinedecoration.html">Waline 美化教程 | 空想笔记 (fufu.ink)</a></p><h3 id="导航栏标题添加霓虹灯特效"><a href="#导航栏标题添加霓虹灯特效" class="headerlink" title="导航栏标题添加霓虹灯特效"></a>导航栏标题添加霓虹灯特效</h3><p>修改<code>themes\fluid\source\css\_pages\_base\_widget\header.styl</code>，在里面追加样式(注意缩进)：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.navbar-title</span><br>  <span class="hljs-attribute">outline</span> none<br>  <span class="hljs-attr">--c</span> lightseagreen<br>  <span class="hljs-attribute">text-shadow</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-built_in">var</span>(--c),<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">20px</span> <span class="hljs-built_in">var</span>(--c),<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">40px</span> <span class="hljs-built_in">var</span>(--c),<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">80px</span> <span class="hljs-built_in">var</span>(--c),<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">160px</span> <span class="hljs-built_in">var</span>(--c)<br>  <span class="hljs-attribute">animation</span> animate <span class="hljs-number">5s</span> linear infinite<br><br><span class="hljs-keyword">@keyframes</span> animate&#123;<br>  to&#123;<br>      <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">hue-rotate</span>(<span class="hljs-number">360deg</span>)<br>  &#125;<br>&#125;  <br></code></pre></td></tr></table></figure><p>然后修改<code>themes\fluid\layout\_partials\header\navigation.ejs</code>，<br>找到对应导航栏标题的标签内容：<br><code>&lt;strong&gt;&lt;%= theme.navbar.blog_title || config.title %&gt;&lt;/strong&gt;</code><br>给其添加上class属性，修改为：<br><code>&lt;strong class=&quot;navbar-title&quot;&gt;&lt;%= theme.navbar.blog_title || config.title %&gt;&lt;/strong&gt;</code></p><h2 id="配色方案"><a href="#配色方案" class="headerlink" title="配色方案"></a>配色方案</h2><blockquote><p><a href="https://blog.csdn.net/ArthurCaoMH/article/details/109137837">最让人舒服的11种颜色RGB值和十六进制值_好看的颜色rgb-CSDN博客</a></p><p><a href="https://color.dumogu.top/option/gradient">一个好用的配色网站! 毒蘑菇 - 配色 (dumogu.top)</a></p></blockquote><center>最让人舒服的11种颜色RGB值和十六[进制]</center><style> .center  {   width: auto;   display: table;   margin-left: auto;   margin-right: auto; } </style><div class="center"><table><thead><tr><th>序号</th><th>名称</th><th>RGB</th><th>十六进制</th></tr></thead><tbody><tr><td>1</td><td>豆沙绿</td><td>(199, 237, 204)</td><td>#C7EDCC</td></tr><tr><td>2</td><td>银河白</td><td>(255, 255, 255)</td><td>#FFFFFF</td></tr><tr><td>3</td><td>杏仁黄</td><td>(250, 249, 222)</td><td>#FAF9DE</td></tr><tr><td>4</td><td>秋叶褐</td><td>(255, 242, 226)</td><td>#FFF2E2</td></tr><tr><td>5</td><td>胭脂红</td><td>(253, 230, 224)</td><td>#FDE6E0</td></tr><tr><td>6</td><td>青草绿</td><td>(227, 237, 205)</td><td>#E3EDCD</td></tr><tr><td>7</td><td>海天蓝</td><td>(220, 226, 241)</td><td>#DCE2F1</td></tr><tr><td>8</td><td>葛巾紫</td><td>(233, 235, 254)</td><td>#E9EBFE</td></tr><tr><td>9</td><td>极光灰</td><td>(234, 234, 239)</td><td>#EAEAEF</td></tr><tr><td>10</td><td>苹果绿</td><td>(183, 232, 189)</td><td>#B7E8BD</td></tr><tr><td>11</td><td>豆沙绿-略暗</td><td>(204, 232, 207)</td><td>#CCE8CF</td></tr></tbody></table></div><h2 id="自定义字体"><a href="#自定义字体" class="headerlink" title="自定义字体"></a>自定义字体</h2><blockquote><p>Web字体在线生成：<a href="https://transfonter.org/">Online @font-face generator — Transfonter</a></p><p><a href="https://blog.csdn.net/sinat_36728518/article/details/135382779">CSS免费在线字体格式转换器 CSS @font-face 生成器_font-face生成器-CSDN博客</a></p><p>两个实现了自定义字体的博客：</p><p><a href="https://largesse.netlify.app/posts/3c2a5351">Hexo Fluid主题 添加自定义字体 - Largesse’s blog</a></p><p><a href="https://www.erenship.com/posts/40222.html">Hexo’s Fluid 主题私人定制（持续更新） - Eren の 宇宙船 (erenship.com)</a></p></blockquote><h2 id="优化文章链接格式"><a href="#优化文章链接格式" class="headerlink" title="优化文章链接格式"></a>优化文章链接格式</h2><p>参考：<a href="https://hexo.ltski.com/p/20190112020314/">Hexo博客进阶之文章链接—自定义永久链接 | ITsuKiの博客小站 (ltski.com)</a></p><h2 id="压缩静态资源"><a href="#压缩静态资源" class="headerlink" title="压缩静态资源"></a>压缩静态资源</h2><p>博客中有大量 HTML、CSS、JS 文件，这些文件为了阅读方便会加入许多回车和空行，但在页面解析时其实会浪费部分时间，此外如果有许多插图，也会拖慢网页加载，并占据 GitHub 仓库的存储空间。</p><p>目前有关插件有 <code>gulp</code>、<code>hexo-neat</code>、<code>hexo-all-minifier</code>。推荐采用集成度比较高的 <code>hexo-all-minifier</code> 来实现，由于在安装依赖包过程报错，本站最终采用了 <code>hexo-neat</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-all-minifier --save  <span class="hljs-comment"># 出现 npm ERR! code ELIFECYCLE 错误</span><br>$ npm install hexo-neat --save          <span class="hljs-comment"># 换成这个后成功安装</span><br></code></pre></td></tr></table></figure><p>之后在配置文件 <code>hewei2001/_config.yml</code> 中增加如下内容就行：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># hexo-neat</span><br><span class="hljs-comment">## Docs: https://github.com/rozbo/hexo-neat</span><br><span class="hljs-attr">neat_enable:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 压缩 html</span><br><span class="hljs-attr">neat_html:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">exclude:</span><br><span class="hljs-comment"># 压缩 css  </span><br><span class="hljs-attr">neat_css:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">exclude:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/*.min.css&#x27;</span><br><span class="hljs-comment"># 压缩 js</span><br><span class="hljs-attr">neat_js:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">mangle:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">output:</span><br>  <span class="hljs-attr">compress:</span><br>  <span class="hljs-attr">exclude:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/*.min.js&#x27;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/jquery.fancybox.pack.js&#x27;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/index.js&#x27;</span> <br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Fluid </tag>
            
            <tag> 博客美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速免费的公用CDN</title>
      <link href="/posts/1db4.html"/>
      <url>/posts/1db4.html</url>
      
        <content type="html"><![CDATA[<h2 id="jsDelivr"><a href="#jsDelivr" class="headerlink" title="jsDelivr"></a>jsDelivr</h2><p>官网地址：<a href="https://www.jsdelivr.com/">jsDelivr - A free, fast, and reliable CDN for JS and open source</a> 没梯子访问可能有点慢，不过CDN的节点是很快的 可以引用的资源包括NPM、github、wordpress的所有资源，github可以是任意体积小于50M的仓库。</p><p>以github为例，只需要通过符合 JSDelivr 规则的 URL 引用，即可直接使用 Github 中的资源。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs text">// 用户名/仓库名@版本号/文件名<br>https://cdn.jsdelivr.net/gh/user/repo@version/file<br>// load jQuery v3.2.1<br>https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js<br><br><br>// 使用一个范围内的版本<br>https://cdn.jsdelivr.net/gh/jquery/jquery@3.2/dist/jquery.min.js<br>https://cdn.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js<br><br><br>// 忽略版本号则默认使用最新版<br>// you should NOT use this in production<br>https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js<br><br><br>// 在任意JS/CSS文件后添加 .min 能得到一个缩小版<br>// 如果它本身不存在，我们将会为你生成<br>https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js<br><br><br>// 在末尾加 / 则得到目录列表<br>https://cdn.jsdelivr.net/gh/jquery/jquery/<br></code></pre></td></tr></table></figure><p>详细规则参考官网：<a href="https://www.jsdelivr.com/">jsDelivr - A free, fast, and reliable CDN for JS and open source</a></p><p>以我一张图片为例：</p><p>原github链接：<a href="https://raw.githubusercontent.com/growvv/img/master/images/20200118222911.jpeg">https://raw.githubusercontent.com/growvv/img/master/images/20200118222911.jpeg</a></p><p>CDN后的链接：<a href="https://cdn.jsdelivr.net/gh/growvv/img@master/images/20200118222911.jpeg">https://cdn.jsdelivr.net/gh/growvv/img@master/images/20200118222911.jpeg</a></p><h2 id="unpkg"><a href="#unpkg" class="headerlink" title="unpkg"></a>unpkg</h2><p>unpkg是一个内容源自npm的全球快速CDN。它部署在 cloudflare上，在大陆地区访问到的是香港节点。</p><p>比如我们网页需要加载jquery的版本2.1.4时，我们可以写成：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://cdn.jsdelivr.net/npm/jquery@<span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">4</span>/dist/jquery.min.js<br><span class="hljs-attribute">1</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://unpkg.com/jquery@<span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">4</span>/dist/jquery.min.js<br></code></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>除了<code>jsdelivr</code>， 推荐几个免费的且不限流量的CDN，还有 <code>staticaly</code> <code>githack</code> 都是全球通用的，</p><h2 id="staticaly"><a href="#staticaly" class="headerlink" title="staticaly"></a>staticaly</h2><p>官网地址：<a href="https://statically.io/">The CDN for Static Files on GitHub, GitLab, and Bitbucket - Statically</a><br>轻松地从GitHub &#x2F; GitLab &#x2F; Bitbucket等加载您的项目 没有流量限制或限制。</p><p>文件通过超快速全球CDN提供。 在URL（不是分支）中使用特定标记或提交哈希。<br>根据URL永久缓存文件。 除master分支外，文件在浏览器中缓存1年。 具体用法：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># GitHub CDN</span><br><span class="hljs-symbol">https:</span>//cdn.staticaly.com/gh/<span class="hljs-symbol">:user/</span><span class="hljs-symbol">:repo/</span><span class="hljs-symbol">:tag/</span><span class="hljs-symbol">:file</span><br><span class="hljs-symbol">https:</span>//cdn.staticaly.com/gh/growvv/growvv.github.io/master/<span class="hljs-title class_">README</span>.md<br><br><span class="hljs-comment"># GitLab CDN</span><br><span class="hljs-symbol">https:</span>//cdn.staticaly.com/gl/<span class="hljs-symbol">:user/</span><span class="hljs-symbol">:repo/</span><span class="hljs-symbol">:tag/</span><span class="hljs-symbol">:file</span><br><br><span class="hljs-comment"># Bitbucket CDN</span><br><span class="hljs-symbol">https:</span>//cdn.staticaly.com/bb/<span class="hljs-symbol">:user/</span><span class="hljs-symbol">:repo/</span><span class="hljs-symbol">:tag/</span><span class="hljs-symbol">:file</span><br><br><span class="hljs-comment"># WordPress CDN</span><br><span class="hljs-symbol">https:</span>//cdn.staticaly.com/wp/c/<span class="hljs-symbol">:version/wp-includes/</span><span class="hljs-symbol">:file</span>  <br><span class="hljs-symbol">https:</span>//cdn.staticaly.com/wp/p/<span class="hljs-symbol">:plugin_name/</span><span class="hljs-symbol">:version/</span><span class="hljs-symbol">:file</span>  <br><span class="hljs-symbol">https:</span>//cdn.staticaly.com/wp/t/<span class="hljs-symbol">:theme_name/</span><span class="hljs-symbol">:version/</span><span class="hljs-symbol">:file</span><br><br><span class="hljs-comment"># Imgpx CDN</span><br><span class="hljs-symbol">https:</span>//cdn.staticaly.com/img/<span class="hljs-symbol">:image_url</span><br><br><span class="hljs-comment"># Favicons CDN</span><br><span class="hljs-symbol">https:</span>//cdn.staticaly.com/favicons/<span class="hljs-symbol">:favicon_url</span><br></code></pre></td></tr></table></figure><h2 id="githack"><a href="#githack" class="headerlink" title="githack"></a>githack</h2><p>直接从GitHub，Bitbucket或GitLab提供原始文件<br>官网地址：<a href="https://raw.githack.com/">https://raw.githack.com/</a> 具体用法和上面的<code>staticaly</code>很类似</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text"># Github CDN<br>//主分支<br>https://rawcdn.githack.com/liub1934/LB-Blog/master/wp-content/themes/Memory/emoji/xiaodianshi/baiyan.png<br><br>//版本分支<br>https://rawcdn.githack.com/liub1934/LB-Blog/8806f440d3f9a7cc3e6125d7d75564e40262c6a8/wp-content/themes/Memory/emoji/xiaodianshi/baiyan.png<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一些建站主题 | WordPress | Hexo</title>
      <link href="/posts/aa0c.html"/>
      <url>/posts/aa0c.html</url>
      
        <content type="html"><![CDATA[<h2 id="导航站主题"><a href="#导航站主题" class="headerlink" title="导航站主题"></a>导航站主题</h2><p>onenav主题破解：<a href="https://www.hostbbs.net/thread-230740-1-1.html">OneNav一为主题V4.1602开心破解版附授权教程 - 综合交流 - 主机论坛 - HOSTBBS.NET</a></p><p>onenav静态版：<a href="https://github.com/liutongxu/liutongxu.github.io">liutongxu&#x2F;liutongxu.github.io</a></p><p>WebStackPage导航：<a href="https://github.com/WebStackPage/WebStackPage.github.io/">https://github.com/WebStackPage/WebStackPage.github.io/</a></p><h2 id="博客主题"><a href="#博客主题" class="headerlink" title="博客主题"></a>博客主题</h2><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><blockquote><p><a href="https://blog.lixiaomu.fun/posts/43857/">Hexo 10款好看的主题｜新手建站必备！ | 李小沐 (lixiaomu.fun)</a></p></blockquote><p>Fluid：<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid-dev&#x2F;hexo-theme-fluid: :ocean: 一款 Material Design 风格的 Hexo 主题 &#x2F; An elegant Material-Design theme for Hexo (github.com)</a></p><p>Butterfly：<a href="https://butterfly.js.org/">Butterfly - A Simple and Card UI Design theme for Hexo</a></p><blockquote><p>没有 pug 以及 <a href="https://so.csdn.net/so/search?q=stylus&spm=1001.2101.3001.7020">stylus</a> 的渲染器</p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-renderer-pug hexo-renderer-stylus --save<br>npm install hexo-deployer-git --save / yarn add hexo-deployer-git<br></code></pre></td></tr></table></figure></blockquote><p>Next：</p><p>安知鱼主题：<a href="https://docs.anheyu.com/">安知鱼主题官方文档 | 一个简洁、美丽的静态hexo主题 (anheyu.com)</a></p><h3 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h3><p>Argon：<a href="https://github.com/solstice23/argon-theme">solstice23&#x2F;argon-theme: 📖 Argon - 一个轻盈、简洁的 WordPress 主题 (github.com)</a></p><p>Origami：<a href="https://github.com/syfxlin/origami">syfxlin&#x2F;origami: Origami | 一个拥有许多强大功能，简洁，轻快的WordPress主题 (github.com)</a></p><p>Sakurairo：<a href="https://github.com/mirai-mamori/Sakurairo">mirai-mamori&#x2F;Sakurairo: 一个多彩、轻松上手、体验完善，具有强大自定义功能的WordPress主题（基于Sakura主题，支持简繁英日多语言）(github.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> Uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Chrome浏览器扩展实践之CSDN篇（解除关注限制、破解复制）</title>
      <link href="/posts/716.html"/>
      <url>/posts/716.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​      Chrome浏览器扩展是Google Chrome浏览器的浏览器扩展程序，可以在以Chrome为内核的浏览器中运行，包括Chrome、Edge等，能够增强Chrome浏览器的功能，通过添加新的按钮、工具栏、侧边栏、选项页等用户界面元素，或者通过修改网页内容、样式和行为，为用户提供更加个性化、高效和便捷的浏览体验。</p><h2 id="文件夹内容"><a href="#文件夹内容" class="headerlink" title="文件夹内容"></a>文件夹内容</h2><p>├─ CSDN取消关注限制<br>……..├─ manifest.json<br>……..├─ background.js<br>……..├─ content-script.js<br>……..├─ popup.html<br>……..├─ popup.js<br>……..├─ style.css<br>……..└─ images</p><h2 id="manifest-json"><a href="#manifest-json" class="headerlink" title="manifest.json"></a>manifest.json</h2><p><code>manifest.json</code> 是 Chrome 浏览器扩展（以及其他基于 Chromium 的浏览器，如 Edge）的核心文件。它包含了扩展的元数据、版本信息、所需权限、背景脚本、内容脚本等。</p><blockquote><p>当更改 <code>manifest.json</code> 文件后，通常需要重新加载扩展才能看到更改的效果。在 Chrome 中，可以通过“扩展程序”页面（chrome:&#x2F;&#x2F;extensions&#x2F;）的“重新加载”按钮来做到这一点。</p></blockquote><p>完整的配置文档请戳<a href="https://developer.chrome.com/extensions/manifest">这里</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br><span class="hljs-comment">// 插件的名称</span><br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;CNDS无需关注&quot;</span>,<br>    <br>    <span class="hljs-comment">// 插件描述</span><br>    <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;解锁关注后查看限制&quot;</span>,<br>        <br>    <span class="hljs-comment">// 插件的版本</span><br>    <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.1.1&quot;</span>,<br>        <br>    <span class="hljs-comment">// 清单文件的版本，一般为3，2已经弃用</span><br>    <span class="hljs-string">&quot;manifest_version&quot;</span>: <span class="hljs-number">3</span>,<br><br>    <span class="hljs-comment">// 图标，一般偷懒全部用一个尺寸的也没问题</span><br>    <span class="hljs-string">&quot;icons&quot;</span>: <br>    &#123;<br>        <span class="hljs-string">&quot;16&quot;</span>: <span class="hljs-string">&quot;/images/icon.png&quot;</span>,<br>        <span class="hljs-string">&quot;48&quot;</span>: <span class="hljs-string">&quot;/images/icon.png&quot;</span>,<br>        <span class="hljs-string">&quot;128&quot;</span>: <span class="hljs-string">&quot;/images/icon.png&quot;</span><br>    &#125;,<br>    <br>    <span class="hljs-comment">// 会一直常驻的后台JS或后台页面</span><br>    <span class="hljs-string">&quot;background&quot;</span>:<br>    &#123;<br>        <span class="hljs-string">&quot;service_worker&quot;</span>: <span class="hljs-string">&quot;./background.js&quot;</span><br>    &#125;,<br>        <br><span class="hljs-comment">// 浏览器右上角图标设置</span><br>    <span class="hljs-string">&quot;action&quot;</span>:<br>    &#123;<br>        <span class="hljs-string">&quot;default_popup&quot;</span>: <span class="hljs-string">&quot;popup.html&quot;</span>,<br>        <span class="hljs-string">&quot;default_icon &quot;</span>: <span class="hljs-string">&quot;/images/icon.png&quot;</span>,<br>        <span class="hljs-string">&quot;default_title&quot;</span>: <span class="hljs-string">&quot;CNDS无需关注&quot;</span><br>    &#125;,<br>        <br>    <span class="hljs-comment">// 权限申请</span><br>    <span class="hljs-string">&quot;permissions&quot;</span>:<br>    [<br>        <span class="hljs-string">&quot;storage&quot;</span>,<br>        <span class="hljs-string">&quot;tabs&quot;</span>,<br>        <span class="hljs-string">&quot;scripting&quot;</span>,<br>        <span class="hljs-string">&quot;notifications&quot;</span><br>    ],<br>        <br><span class="hljs-comment">//可以访问的网站</span><br>    <span class="hljs-string">&quot;host_permissions&quot;</span>:<br>    [<br>        <span class="hljs-string">&quot;&lt;all_urls&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;https://blog.csdn.net/&quot;</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="background-js"><a href="#background-js" class="headerlink" title="background.js"></a>background.js</h2><p><code>background.js</code> 是扩展的后台脚本，它在扩展的生命周期内持续运行，不受页面加载和卸载的影响。它通常用于处理非页面特定的逻辑，如监听浏览器事件、跨页面通信、管理扩展的状态、存储数据等。</p><p>在 <code>manifest.json</code> 文件中，<code>background.js</code> 通常被配置在 <code>background</code> 字段中</p><blockquote><p>在Chrome扩展的<code>manifest_version 3</code>中，持久化后台脚本已被弃用，并鼓励使用事件页面（Event Pages）来替代。事件页面在需要时才被唤醒，这有助于节省系统资源。如果需要后台持续运行的功能，则需要使用服务工作者（Service Workers）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//安装时默认启用</span><br>chrome.<span class="hljs-property">runtime</span>.<span class="hljs-property">onInstalled</span>.<span class="hljs-title function_">addListener</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    chrome.<span class="hljs-property">storage</span>.<span class="hljs-property">local</span>.<span class="hljs-title function_">set</span>(&#123;<br>        <span class="hljs-title class_">Enabled</span>: <span class="hljs-literal">true</span>,      <span class="hljs-comment">//启用扩展</span><br>        <span class="hljs-title class_">Auto</span><span class="hljs-attr">_expand</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//自动展开</span><br>        <span class="hljs-title class_">Enable</span><span class="hljs-attr">_copy</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">//破解复制</span><br>        <span class="hljs-title class_">Clear</span><span class="hljs-attr">_doms</span>: <span class="hljs-literal">true</span>,   <span class="hljs-comment">//清除弹窗</span><br>    &#125;, <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;OK: Extension is installed!&#x27;</span>);<br>    &#125;);<br>&#125;);<br><br><span class="hljs-comment">//监听tab页面加载，正则匹配CSDN网址</span><br>chrome.<span class="hljs-property">tabs</span>.<span class="hljs-property">onUpdated</span>.<span class="hljs-title function_">addListener</span>(<span class="hljs-function">(<span class="hljs-params">tabId, changeInfo, tab</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/blog.csdn.net/</span>.<span class="hljs-title function_">test</span>(tab.<span class="hljs-property">url</span>) &amp;&amp; <span class="hljs-regexp">/article/</span>.<span class="hljs-title function_">test</span>(tab.<span class="hljs-property">url</span>) &amp;&amp; changeInfo.<span class="hljs-property">status</span> === <span class="hljs-string">&quot;complete&quot;</span>) &#123;<br>        chrome.<span class="hljs-property">scripting</span>.<span class="hljs-title function_">executeScript</span>(&#123;<br>            <span class="hljs-attr">target</span>: &#123;<br>                <span class="hljs-attr">tabId</span>: tabId<br>            &#125;,<br>            <span class="hljs-attr">files</span>: [<span class="hljs-string">&quot;./content-script.js&quot;</span>],<br>        &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;INJECTED SCRIPT SUCC.&quot;</span>);<br>        &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err));<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="content-script-js"><a href="#content-script-js" class="headerlink" title="content-script.js"></a>content-script.js</h2><p><code>content-script.js</code>是内容脚本，它会被注入到匹配的页面上下文中执行。内容脚本可以直接访问和操作页面的DOM，因此它们通常用于修改页面内容、监听用户交互、与页面JavaScript交互等。</p><p>在 <code>manifest.json</code> 文件中，<code>content.js</code> 通常被配置在 <code>content_scripts</code> 字段中，也可以在<code>background.js</code>中执行注入<code>content-script.js</code>操作。</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">fold</span> secondary @展开查看完整代码 %&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs javascript">chrome.<span class="hljs-property">storage</span>.<span class="hljs-property">local</span>.<span class="hljs-title function_">get</span>([<span class="hljs-string">&#x27;Enabled&#x27;</span>, <span class="hljs-string">&#x27;Auto_expand&#x27;</span>, <span class="hljs-string">&#x27;Enable_copy&#x27;</span>, <span class="hljs-string">&#x27;Clear_doms&#x27;</span>], <span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-keyword">if</span> (value.<span class="hljs-property">Enabled</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;扩展开始执行&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (value.<span class="hljs-property">Enable_copy</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;执行破解复制&quot;</span>);<br>            <span class="hljs-comment">//enableCopy();   //启用复制</span><br>            <span class="hljs-title function_">enableCopy2</span>();<br>        &#125;<br><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;执行破解关注&quot;</span>);<br>        <span class="hljs-keyword">if</span> (value.<span class="hljs-property">Auto_expand</span>) &#123;<br>            <span class="hljs-title function_">expand</span>(); <span class="hljs-comment">//自动展开</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_">modify</span>(); <span class="hljs-comment">//修改防止默认跳转</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (value.<span class="hljs-property">Clear_doms</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;执行清除弹窗&quot;</span>);<br>            <span class="hljs-title function_">removeDoms</span>(); <span class="hljs-comment">//移除登录弹窗等</span><br><br>            <span class="hljs-comment">//创建新的dom监听器</span><br>            <span class="hljs-keyword">let</span> observer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MutationObserver</span>(<span class="hljs-function">(<span class="hljs-params">mutationsList</span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> mutation <span class="hljs-keyword">of</span> mutationsList) &#123;<br>                    <span class="hljs-keyword">if</span> (mutation.<span class="hljs-property">type</span> == <span class="hljs-string">&#x27;childList&#x27;</span>) &#123; <span class="hljs-comment">//只监听一级</span><br>                        <span class="hljs-title function_">removeDoms</span>();<br>                    &#125;<br>                &#125;<br>            &#125;);<br>            <span class="hljs-comment">// 开始监听属性变化</span><br>            observer.<span class="hljs-title function_">observe</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>, &#123;<br>                <span class="hljs-attr">childList</span>: <span class="hljs-literal">true</span><br>            &#125;);<br>            <span class="hljs-comment">// beforeDestory(() =&gt; &#123;</span><br>            <span class="hljs-comment">//     observer.disconnect(); //取消对所有dom的监听</span><br>            <span class="hljs-comment">//     observer = null;</span><br>            <span class="hljs-comment">// &#125;);</span><br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;未启用扩展功能&quot;</span>);<br>    &#125;<br>&#125;);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">modify</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> follow_text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;follow-text&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (follow_text.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    follow_text = follow_text[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">if</span> (follow_text.<span class="hljs-property">textContent</span> == <span class="hljs-string">&quot;关注博主即可阅读全文&quot;</span>) &#123;<br>        follow_text.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>            event.<span class="hljs-title function_">stopPropagation</span>(); <span class="hljs-comment">//禁止默认跳转</span><br>            <span class="hljs-title function_">expand</span>(); <span class="hljs-comment">//展开</span><br>        &#125;);<br>        <span class="hljs-keyword">let</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;chevrondown&#x27;</span>)[<span class="hljs-number">0</span>]; <span class="hljs-comment">//&quot;关注博主即可阅读全文&quot;旁向下的箭头图标</span><br>        img.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>            event.<span class="hljs-title function_">stopPropagation</span>(); <span class="hljs-comment">//禁止默认跳转</span><br>            <span class="hljs-title function_">expand</span>(); <span class="hljs-comment">//展开</span><br>        &#125;);<br>        follow_text.<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;关注限制已解锁&quot;</span>;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;关注限制已解锁&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;没有找到\&quot;关注博主即可阅读全文\&quot;&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">expand</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> article_content = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;article_content&quot;</span>);<br>    <span class="hljs-keyword">let</span> hide_article_box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;hide-article-box&#x27;</span>)[<span class="hljs-number">0</span>];<br>    article_content.<span class="hljs-title function_">removeAttribute</span>(<span class="hljs-string">&quot;style&quot;</span>);<br>    hide_article_box.<span class="hljs-property">parentElement</span>.<span class="hljs-title function_">removeChild</span>(hide_article_box);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;全文展开成功&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">removeDoms</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> classes = [<span class="hljs-string">&#x27;passport-login-tip-container false&#x27;</span>, <span class="hljs-string">&#x27;passport-login-container&#x27;</span>, <span class="hljs-string">&#x27;tool-active-list&#x27;</span>, <span class="hljs-string">&#x27;article-search-tip&#x27;</span>,<br>        <span class="hljs-string">&#x27;hljs-button signin active&#x27;</span>, <span class="hljs-string">&#x27;csdn-side-toolbar&#x27;</span>, <span class="hljs-string">&#x27;box-shadow mb8&#x27;</span>, <span class="hljs-string">&#x27;blog-footer-bottom&#x27;</span>];<br>    <span class="hljs-keyword">let</span> infos = [<span class="hljs-string">&#x27;右下角弹窗&#x27;</span>, <span class="hljs-string">&#x27;登录弹窗&#x27;</span>, <span class="hljs-string">&#x27;一键收藏&#x27;</span>, <span class="hljs-string">&#x27;黑色提示框&#x27;</span>, <br>        <span class="hljs-string">&#x27;登录复制提示&#x27;</span>, <span class="hljs-string">&#x27;侧边工具栏&#x27;</span>, <span class="hljs-string">&#x27;左侧广告&#x27;</span>, <span class="hljs-string">&#x27;底部备案信息&#x27;</span>];<br>    <span class="hljs-keyword">let</span> boxs, box;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; classes.<span class="hljs-property">length</span>; i++) &#123;<br>        boxs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(classes[i]);<br>        <span class="hljs-keyword">if</span> (boxs.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>            box = boxs[<span class="hljs-number">0</span>];<br>            box.<span class="hljs-property">parentElement</span>.<span class="hljs-title function_">removeChild</span>(box);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;移除&quot;</span> + infos[i]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> ids = [<span class="hljs-string">&#x27;toolbarBox&#x27;</span>, <span class="hljs-string">&#x27;asideWriteGuide&#x27;</span>, <span class="hljs-string">&#x27;asideNewNps&#x27;</span>, <span class="hljs-string">&#x27;recommendNps&#x27;</span>];<br>    <span class="hljs-keyword">let</span> names = [<span class="hljs-string">&quot;顶部栏&quot;</span>, <span class="hljs-string">&#x27;左侧广告&#x27;</span>, <span class="hljs-string">&#x27;左侧是否推荐&#x27;</span>,<span class="hljs-string">&#x27;底部是否推荐&#x27;</span>];<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; ids.<span class="hljs-property">length</span>; i++) &#123;<br>        box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(ids[i]);<br>        <span class="hljs-keyword">if</span>(box == <span class="hljs-literal">null</span>) <span class="hljs-keyword">continue</span>;<br>        box.<span class="hljs-property">parentElement</span>.<span class="hljs-title function_">removeChild</span>(box);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;移除&quot;</span> + names[i]);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 参考：https://www.cnblogs.com/pu369/p/17425742.html</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">enableCopy</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">setAllSelect</span>(<span class="hljs-params">el = <span class="hljs-variable language_">document</span>.body</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; el.<span class="hljs-property">children</span>.<span class="hljs-property">length</span>; index++) &#123;<br>            <span class="hljs-keyword">const</span> e = el.<span class="hljs-property">children</span>.<span class="hljs-title function_">item</span>(index);<br>            e.<span class="hljs-property">style</span>.<span class="hljs-property">userSelect</span> = <span class="hljs-string">&#x27;text&#x27;</span>;<br>            <span class="hljs-title function_">setAllSelect</span>(e);<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">setAllSelect</span>();<br><br>    <span class="hljs-comment">//监听键盘Ctrl+C</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">onkeydown</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>        <span class="hljs-keyword">if</span> (e.<span class="hljs-property">ctrlKey</span> &amp;&amp; e.<span class="hljs-property">keyCode</span> == <span class="hljs-number">67</span>) &#123;<br>            <span class="hljs-keyword">const</span> pasteText = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">getSelection</span>().<span class="hljs-title function_">toString</span>();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> === pasteText || <span class="hljs-literal">undefined</span> === pasteText || <span class="hljs-string">&#x27;&#x27;</span> === pasteText.<span class="hljs-title function_">trim</span>()) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            navigator.<span class="hljs-property">clipboard</span>.<span class="hljs-title function_">writeText</span>(pasteText).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;复制成功！&quot;</span>); <span class="hljs-comment">//alert(&quot;复制失败！&quot;);</span><br>            &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;复制失败！&quot;</span>);<br>            &#125;);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//监听右键复制无法实现</span><br>&#125;<br><br><span class="hljs-comment">// 参考：https://blog.csdn.net/weixin_49119066/article/details/139220307</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">enableCopy2</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">oncontextmenu</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">oncontextmenu</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">oncopy</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">var</span> hea = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;toolbar-advert&#x27;</span>)[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">if</span> (hea) &#123;<br>        hea.<span class="hljs-title function_">remove</span>()<br>    &#125;;<br>    [...<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;body&#x27;</span>)].<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">dom</span> =&gt;</span> dom.<span class="hljs-property">outerHTML</span> = dom.<span class="hljs-property">outerHTML</span>);<br>    [...<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;body, body *&#x27;</span>)].<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">dom</span> =&gt;</span> &#123;<br>        [<span class="hljs-string">&#x27;onselect&#x27;</span>, <span class="hljs-string">&#x27;onselectstart&#x27;</span>, <span class="hljs-string">&#x27;onselectend&#x27;</span>, <span class="hljs-string">&#x27;ondragstart&#x27;</span>, <span class="hljs-string">&#x27;ondragend&#x27;</span>, <span class="hljs-string">&#x27;oncontextmenu&#x27;</span>, <span class="hljs-string">&#x27;oncopy&#x27;</span>].<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">ev</span> =&gt;</span> dom.<span class="hljs-title function_">removeAttribute</span>(ev));<br>        dom.<span class="hljs-property">style</span>[<span class="hljs-string">&#x27;user-select&#x27;</span>] = <span class="hljs-string">&#x27;auto&#x27;</span>;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">endfold</span> %&#125;</span><br></code></pre></td></tr></table></figure><h2 id="popup-html和style-css"><a href="#popup-html和style-css" class="headerlink" title="popup.html和style.css"></a>popup.html和style.css</h2><p><code>popup.html</code> 通常是一个与浏览器动作（Browser Action）或页面动作（Page Action）关联的弹出窗口的HTML文件。当用户点击扩展时，将显示弹出窗口。用户可在该窗口进行相关设置。</p><p><img src="/img/1719215341752.png"></p><p><code>style.css</code>为样式表文件，用于为网页提供样式信息，控制网页的布局、颜色、字体等视觉表现</p><p>扩展中使用 <code>popup.html</code>，需要在 <code>manifest.json</code> 文件中进行配置。对于浏览器动作，需要设置 <code>browser_action</code> 字段，并指定 <code>default_popup</code> 属性为 <code>popup.html</code> 文件。对于页面动作，则需要设置 <code>page_action</code> 字段。</p><p align="center" style="line-height: 1;"><font size=3 face="黑体">popup.html</font></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./style.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">size</span>=<span class="hljs-string">3</span> <span class="hljs-attr">face</span>=<span class="hljs-string">&quot;黑体&quot;</span>&gt;</span>CSDN插件设置<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;option&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>开启插件：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;switch&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;switch-enable&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;option&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>自动展开：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;switch&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;switch-autoexpand&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;option&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>破解复制：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;switch&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;switch-enablecopy&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;option&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>清除弹窗：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;switch&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;switch-clearDom&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;refresh&quot;</span>&gt;</span>刷新网页<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;popup.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p align="center" style="line-height: 1;"><font size=3 face="黑体">style.css</font></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">html</span>,<span class="hljs-selector-tag">body</span>&#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Courier New&#x27;</span>, Courier, monospace;<br>&#125;<br><br><span class="hljs-selector-class">.name</span>&#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span>;<br>&#125;<br><span class="hljs-selector-class">.checkbox</span>&#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="popup-js"><a href="#popup-js" class="headerlink" title="popup.js"></a>popup.js</h2><p><code>popup.js</code>通常与<code>popup.html</code>一起使用，用于处理弹出窗口（Popup）中的用户交互和动态行为。当用户点击浏览器动作（Browser Action）或页面动作（Page Action）的图标时，会打开<code>popup.html</code>，而<code>popup.js</code>则负责为其中的元素添加事件监听器、处理用户输入以及与其他部分（如背景脚本或内容脚本）进行通信。</p><p><code>&#123;% fold secondary @展开查看完整代码 %&#125;`<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> checkBoxs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&quot;checkbox&quot;</span>);<br><br><span class="hljs-comment">//获取各个选项值</span><br>chrome.<span class="hljs-property">storage</span>.<span class="hljs-property">local</span>.<span class="hljs-title function_">get</span>([<span class="hljs-string">&#x27;Enabled&#x27;</span>, <span class="hljs-string">&#x27;Auto_expand&#x27;</span>, <span class="hljs-string">&#x27;Enable_copy&#x27;</span>, <span class="hljs-string">&#x27;Clear_doms&#x27;</span>], <span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) &#123;<br>    checkBoxs[<span class="hljs-number">0</span>].<span class="hljs-property">checked</span> = value.<span class="hljs-property">Enabled</span>;<br>    checkBoxs[<span class="hljs-number">1</span>].<span class="hljs-property">checked</span> = value.<span class="hljs-property">Auto_expand</span>;<br>    checkBoxs[<span class="hljs-number">2</span>].<span class="hljs-property">checked</span> = value.<span class="hljs-property">Enable_copy</span>;<br>    checkBoxs[<span class="hljs-number">3</span>].<span class="hljs-property">checked</span> = value.<span class="hljs-property">Clear_doms</span>;<br>&#125;);<br><br><span class="hljs-comment">//启用插件</span><br>checkBoxs[<span class="hljs-number">0</span>].<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;change&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (checkBoxs[<span class="hljs-number">0</span>].<span class="hljs-property">checked</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;启用扩展&quot;</span>);<br>        chrome.<span class="hljs-property">storage</span>.<span class="hljs-property">local</span>.<span class="hljs-title function_">set</span>(&#123;<br>            <span class="hljs-title class_">Enabled</span>: <span class="hljs-literal">true</span><br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;关闭扩展&quot;</span>);<br>        chrome.<span class="hljs-property">storage</span>.<span class="hljs-property">local</span>.<span class="hljs-title function_">set</span>(&#123;<br>            <span class="hljs-title class_">Enabled</span>: <span class="hljs-literal">false</span><br>        &#125;);<br>    &#125;<br>    <br>    <span class="hljs-comment">//刷新网页</span><br>    chrome.<span class="hljs-property">tabs</span>.<span class="hljs-title function_">query</span>(&#123;<br>        <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">currentWindow</span>: <span class="hljs-literal">true</span><br>    &#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">tabs</span>) &#123;<br>        chrome.<span class="hljs-property">scripting</span>.<span class="hljs-title function_">executeScript</span>(&#123;<br>            <span class="hljs-attr">target</span>: &#123;<br>                <span class="hljs-attr">tabId</span>: tabs[<span class="hljs-number">0</span>].<span class="hljs-property">id</span><br>            &#125;,<br>            <span class="hljs-attr">func</span>: refreshPage,<br>        &#125;);<br>    &#125;);<br>&#125;);<br><br><span class="hljs-comment">//自动展开</span><br>checkBoxs[<span class="hljs-number">1</span>].<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;change&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (checkBoxs[<span class="hljs-number">1</span>].<span class="hljs-property">checked</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;启用自动展开&quot;</span>);<br>        chrome.<span class="hljs-property">storage</span>.<span class="hljs-property">local</span>.<span class="hljs-title function_">set</span>(&#123;<br>            <span class="hljs-title class_">Auto</span><span class="hljs-attr">_expand</span>: <span class="hljs-literal">true</span><br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;关闭自动展开&quot;</span>);<br>        chrome.<span class="hljs-property">storage</span>.<span class="hljs-property">local</span>.<span class="hljs-title function_">set</span>(&#123;<br>            <span class="hljs-title class_">Auto</span><span class="hljs-attr">_expand</span>: <span class="hljs-literal">false</span><br>        &#125;);<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">//破解复制</span><br>checkBoxs[<span class="hljs-number">2</span>].<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;change&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (checkBoxs[<span class="hljs-number">2</span>].<span class="hljs-property">checked</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;启用破解复制&quot;</span>);<br>        chrome.<span class="hljs-property">storage</span>.<span class="hljs-property">local</span>.<span class="hljs-title function_">set</span>(&#123;<br>            <span class="hljs-title class_">Enable</span><span class="hljs-attr">_copy</span>: <span class="hljs-literal">true</span><br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;关闭破解复制&quot;</span>);<br>        chrome.<span class="hljs-property">storage</span>.<span class="hljs-property">local</span>.<span class="hljs-title function_">set</span>(&#123;<br>            <span class="hljs-title class_">Enable</span><span class="hljs-attr">_copy</span>: <span class="hljs-literal">false</span><br>        &#125;);<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">//清除弹窗</span><br>checkBoxs[<span class="hljs-number">3</span>].<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;change&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (checkBoxs[<span class="hljs-number">3</span>].<span class="hljs-property">checked</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;启用清除弹窗&quot;</span>);<br>        chrome.<span class="hljs-property">storage</span>.<span class="hljs-property">local</span>.<span class="hljs-title function_">set</span>(&#123;<br>            <span class="hljs-title class_">Clear</span><span class="hljs-attr">_doms</span>: <span class="hljs-literal">true</span><br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;关闭清除弹窗&quot;</span>);<br>        chrome.<span class="hljs-property">storage</span>.<span class="hljs-property">local</span>.<span class="hljs-title function_">set</span>(&#123;<br>            <span class="hljs-title class_">Clear</span><span class="hljs-attr">_doms</span>: <span class="hljs-literal">false</span><br>        &#125;);<br>    &#125;<br>&#125;);<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;refresh&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    chrome.<span class="hljs-property">tabs</span>.<span class="hljs-title function_">query</span>(&#123;<br>        <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">currentWindow</span>: <span class="hljs-literal">true</span><br>    &#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">tabs</span>) &#123;<br>        chrome.<span class="hljs-property">scripting</span>.<span class="hljs-title function_">executeScript</span>(&#123;<br>            <span class="hljs-attr">target</span>: &#123;<br>                <span class="hljs-attr">tabId</span>: tabs[<span class="hljs-number">0</span>].<span class="hljs-property">id</span><br>            &#125;,<br>            <span class="hljs-attr">func</span>: refreshPage,<br>        &#125;);<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">refreshPage</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-title function_">reload</span>();<br>&#125;<br></code></pre></td></tr></table></figure>`&#123;% endfold %&#125;</code></p><h2 id="分享链接"><a href="#分享链接" class="headerlink" title="分享链接"></a>分享链接</h2><p>蓝奏云：<a href="https://www.lanzoub.com/iTWzE22lfbxa">https://www.lanzoub.com/iTWzE22lfbxa</a><br>密码:9dq3</p>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Termux-安卓终端模拟器</title>
      <link href="/posts/a5d9.html"/>
      <url>/posts/a5d9.html</url>
      
        <content type="html"><![CDATA[<p>Termux是一个Android下一个高级的终端模拟器, 开源且不需要root即可安装运行容器环境，通过一键安装脚本可快速安装相应系统。</p><blockquote><p><strong>参考链接：</strong></p><p><a href="https://gitee.com/skymysky/linux/">Tmoe-linux: 在 GNU&#x2F;Linux 和Android-Termux上一键安装 GNU&#x2F;Linux容器，并自动配置中文环境。 (gitee.com)</a></p><p><a href="https://gitee.com/tiankongsnow/linux">Tmoe-linux: 在 GNU&#x2F;Linux 和Android-Termux上一键安装 GNU&#x2F;Linux容器，并自动配置中文环境。 (gitee.com)</a></p></blockquote><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://github.com/termux/termux-app/releases">Releases · termux&#x2F;termux-app (github.com)</a></p><p>测试版本为0.118</p><h3 id="一键安装脚本"><a href="#一键安装脚本" class="headerlink" title="一键安装脚本"></a>一键安装脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bash -c &quot;$(curl -Lv gitee.com/mo2/linux/raw/master/debian.sh)&quot;<br></code></pre></td></tr></table></figure><blockquote><p>建议选proot容器，无root也可安装</p><p>经测试Android7系统，chroot报错无法成功安装，建议Android8以上安装chroot</p></blockquote><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">debian<br></code></pre></td></tr></table></figure><h3 id="启动Tmoe"><a href="#启动Tmoe" class="headerlink" title="启动Tmoe"></a>启动Tmoe</h3><p>Tmoe可以修改一些配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tmoe-tools<br></code></pre></td></tr></table></figure><h3 id="图形化桌面和VNC"><a href="#图形化桌面和VNC" class="headerlink" title="图形化桌面和VNC"></a>图形化桌面和VNC</h3><p>根据手机实际情况选择是否安装，过旧的手机可能连接卡顿，使用体验较差</p><p>推荐<strong>xfce</strong>桌面</p><p>启动和停止VNC命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">startvnc<br>stopvnc<br></code></pre></td></tr></table></figure><h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install openssh-server<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Termux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cloudflare Zerotrust 之 Webssh</title>
      <link href="/posts/4763.html"/>
      <url>/posts/4763.html</url>
      
        <content type="html"><![CDATA[<h4 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h4><blockquote><p><a href="https://www.cnblogs.com/kelley-h/p/17516053.html">使用cloudflare转发ssh端口 - kelley_go - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8cloudflare-tunnels%E9%80%9A%E8%BF%87web-ssh%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E5%99%A8/">使用 Cloudflare Tunnels 通过 Web SSH 访问服务器 (hellowood.dev)</a></p><p><a href="https://blog.csdn.net/stone_fall/article/details/108630115">Linux | systemd详解 | system.service | 参数解析_remainafterexit-CSDN博客</a></p><p><a href="https://cloudflared.cn/get-started/create-local-tunnel/">创建本地管理隧道 (CLI) | Cloudflare Tunnel 中文文档 (cloudflared.cn)</a></p></blockquote><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><p>必须需要一个 cloudflare 账号，以及开通 cloudflare zero trust</p><p>安装cloudflare：<a href="https://github.com/cloudflare/cloudflared/releases">Releases · cloudflare&#x2F;cloudflared (github.com)</a></p><h2 id="配置-Tunnels"><a href="#配置-Tunnels" class="headerlink" title="配置 Tunnels"></a>配置 Tunnels</h2><p>Cloudflare 提供两种方式创建隧道：</p><ol><li>在 zero trust 页面用 web 添加授权</li><li>在本地服务器（raspberry）上用 config 文件添加</li></ol><p>建议采用第一种方法，配置较为直观。本教程只讲述第二种方法</p><h3 id="登录cloudflared"><a href="#登录cloudflared" class="headerlink" title="登录cloudflared"></a>登录cloudflared</h3><p>先安装cloudflared，然后运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cloudflared tunnel login<br></code></pre></td></tr></table></figure><blockquote><p>终端会给出一个类似 <a href="https://dash.cloudflare.com/argotunnel?callback=https://login.cloudflareaccess.org%25xxxxxxxxxxxxxxxxxxxxxxx">https://dash.cloudflare.com/argotunnel?callback=https%3A%2F%2Flogin.cloudflareaccess.org%xxxxxxxxxxxxxxxxxxxxxxx</a> 的登陆地址，复制黏贴该地址到浏览器中，然后按照要求登录即可。<br>如果是有二步验证的，需要登录了以后，再次黏贴该地址，因为二步验证结束后并不会自动跳转到该 cloudflared 验证登录页面。</p><p>授权的话，每次只能选择一个网站，当然，一个网站也就够用了，我们可以解析很多三级域名。</p><p>当然如果需要授权多个网站，授权完成后不要关闭网页！依次点击其他需要授权的域名，进行多次授权。 </p></blockquote><p>运行成功的话，会生成 ~&#x2F;.cloudflared&#x2F;cert.pem文件。</p><h3 id="创建tunnel"><a href="#创建tunnel" class="headerlink" title="创建tunnel"></a>创建tunnel</h3><p>创建完以后，会把信息保存到 <code>~ /.cloudflared</code> 文件夹下，注意不要误删了 </p><ul><li><code>cloudflared tunnel create &lt;你的隧道名字&gt;</code></li><li>示例： <code>cloudflared tunnel create xm2</code></li></ul><h3 id="创建域名-CNAME"><a href="#创建域名-CNAME" class="headerlink" title="创建域名 CNAME"></a>创建域名 CNAME</h3><p>添加一个域名:</p><ul><li><code>cloudflared tunnel route dns &lt;隧道名字&gt; &lt;域名&gt;</code></li><li>示例<code> cloudflared tunnel route dns xm2 ssh.cngo.us.kg</code></li></ul><p>然后 cloudflare 就会在你的域名下自动生成一个 CNAME，把 ssh.cngo.us.kg 指向 &lt;隧道 UUID&gt;.cfargotunnel.com</p><p>以此类推，我们可以如法炮制在面板上添加其他的需要的 CNAME</p><h3 id="配置-Config-文件"><a href="#配置-Config-文件" class="headerlink" title="配置 Config 文件"></a>配置 Config 文件</h3><p>添加好想要穿透的域名后，我们就可以开始映射了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">sudo vim  ~/.cloudflared/config.yml</span><br><br>tunnel: 8d7488ac-fae9-4672-bb34-f864c7b0b385<br>credentials-file: /home/android/.cloudflared/8d7488ac-fae9-4672-bb34-f864c7b0b385.json<br><br>ingress:<br>  - hostname: ssh.cngo.us.kg<br>    service: ssh://localhost:22<br>  - service: http_status:404<br></code></pre></td></tr></table></figure><p>注意：最后的 - service: http_status:404 一定要加，这是兜底的规则。还有复制黏贴的时候确保格式没有错误，很可能会发生 mapping error。</p><p>最后生效的配置文件位置 &#x2F;etc&#x2F;cloudflared&#x2F;config.yml </p><h3 id="配置完以后，可以测试下配置文件是否有问题。"><a href="#配置完以后，可以测试下配置文件是否有问题。" class="headerlink" title="配置完以后，可以测试下配置文件是否有问题。"></a>配置完以后，可以测试下配置文件是否有问题。</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># sudo cloudflared --config ~/.cloudflared/config.yml  tunnel ingress validate</span><br>Validating rules from /home/android/.cloudflared/config.yml<br>OK<br></code></pre></td></tr></table></figure><h3 id="启动隧道"><a href="#启动隧道" class="headerlink" title="启动隧道"></a>启动隧道</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">cloudflared tunnel --config [配置文件路径] run`<br>示例：`cloudflared tunnel --config ~/.cloudflared/config.yml run<br></code></pre></td></tr></table></figure><h3 id="移除已有服务"><a href="#移除已有服务" class="headerlink" title="移除已有服务"></a>移除已有服务</h3><p>若以前配置过cloudflared服务，则需要先卸载，同时移除配置文件<code>/etc/cloudflared/config.yml</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo cloudflared service uninstall<br><br>sudo rm /etc/cloudflared/config.yml<br></code></pre></td></tr></table></figure><h3 id="安装cloudflared服务"><a href="#安装cloudflared服务" class="headerlink" title="安装cloudflared服务"></a>安装cloudflared服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo cloudflared --config ~/.cloudflared/config.yml service install<br><br><br>2024-06-22T15:40:40Z INF Using SysV<br>2024-06-22T15:40:41Z INF Linux service for cloudflared installed successfully<br></code></pre></td></tr></table></figure><blockquote><p>指定安装config文件，否则可能报错：</p><p>Cannot determine default configuration path. No file [config.yml config.yaml] in [~&#x2F;.cloudflared ~&#x2F;.cloudflare-warp ~&#x2F;cloudflare-warp &#x2F;etc&#x2F;cloudflared &#x2F;usr&#x2F;local&#x2F;etc&#x2F;cloudflared]</p></blockquote><h3 id="配置Linux系统服务cloudflared-service"><a href="#配置Linux系统服务cloudflared-service" class="headerlink" title="配置Linux系统服务cloudflared.service"></a>配置Linux系统服务cloudflared.service</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vim /usr/lib/systemd/system/cloudflared.service<br></code></pre></td></tr></table></figure><p>加入如下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs text">[Unit]<br>Description=Cloudflared<br>After=network.target<br><br>[Service]<br>Type=simple<br>ExecStart=/etc/init.d/cloudflared start<br>ExecReload=/etc/init.d/cloudflared restart<br>ExecStop=/etc/init.d/cloudflared stop<br><br>Restart=on-failure<br>TimeoutSec=300<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>然后配置开机自启动，由于chroot容器不支持systemctl，可根据下列链接安装servicectl命令</p><blockquote><p><a href="https://www.cnblogs.com/sw-code/p/14998645.html">安卓手机改造服务器——解决chroot下无法使用systemctl - sw-code - 博客园 (cnblogs.com)</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl enable cloudflared<br><span class="hljs-meta prompt_">#</span><span class="language-bash">or</span><br>sudo servicectl enable cloudflared<br></code></pre></td></tr></table></figure><h2 id="创建-SSH-应用"><a href="#创建-SSH-应用" class="headerlink" title="创建 SSH 应用"></a>创建 SSH 应用</h2><ul><li>创建应用</li></ul><p>在 Cloudflare 控制台 &gt; Zero Trust &gt; Access &gt; Applications 选择 Add an application 创建新的应用；应用类型为 Self-hosted</p><p><img src="https://img.hellowood.dev/picture/homelab-cloudflare-ssh-application-create.png" alt="homelab-cloudflare-ssh-application-create.png"></p><ul><li>配置应用信息</li></ul><p>指定应用名称，并为应用配置域名；session 的过期时间可以按需配置</p><p><img src="https://img.hellowood.dev/picture/homelab-cloudflare-ssh-configuration-application.png" alt="homelab-cloudflare-ssh-configuration-application.png"></p><ul><li>指定访问策略</li></ul><p>需要配置访问策略，只允许特定的邮箱登陆；如果需要使用其他的认证方式，如 GitHub&#x2F;Google SSO 等，可以在 Cloudflare 控制台 &gt; Zero Trust &gt; Settings &gt; Authentication &gt; Login Methods 中添加</p><p><img src="https://img.hellowood.dev/picture/homelab-cloudflare-ssh-configuration-policy.png" alt="homelab-cloudflare-ssh-configuration-policy.png"></p><ul><li>修改应用类型</li></ul><p>在 Additional settings 中，将 Browser rendering 的类型改为 SSH；然后选择保存，这样就配置好 SSH 应用了</p><p><img src="https://img.hellowood.dev/picture/homelab-cloudflare-ssh-set-application-type.png" alt="homelab-cloudflare-ssh-set-application-type.png"></p><h2 id="踩坑经历"><a href="#踩坑经历" class="headerlink" title="踩坑经历"></a>踩坑经历</h2><p>通过cloudns配置的域名未添加子域名NS，导致CNAME不生效，一定要确保域名CNAME是生效的</p>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloudflare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大学四年阅读清单</title>
      <link href="/posts/6b24.html"/>
      <url>/posts/6b24.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://img.cngo.cloudns.nz/file/08aa8abce7ff702aba0da.png"></p>]]></content>
      
      
      <categories>
          
          <category> Uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java内部类</title>
      <link href="/posts/fe21.html"/>
      <url>/posts/fe21.html</url>
      
        <content type="html"><![CDATA[<div class="note note-success">            <p>对应《疯狂Java讲义（第5版）》6.7 章节</p>          </div><h2 id="内部类（JDK1-1）"><a href="#内部类（JDK1-1）" class="headerlink" title="内部类（JDK1.1）"></a>内部类（JDK1.1）</h2><p>定义在其他类内部的类成为内部类，或称嵌套类；包含内部类的类为外部类，或宿主类</p><p>内部类作为外部类成员，可<strong>直接</strong>访问外部类私有数据，但外部类不能<strong>直接</strong>访问内部类的实现细节</p><p>内部类比外部类可多使用三个修饰符：private、protectd、static</p><blockquote><p>参考链接：<a href="https://blog.csdn.net/youngogo/article/details/82531978">Java的外部类，为什么只能使用public和default进行修饰_java public default一起用-CSDN博客</a></p></blockquote><p><strong>Java内部类包括成员内部类（非静态内部类、静态内部类）、局部内部类、匿名内部类</strong></p><h3 id="成员内部类：非静态内部类"><a href="#成员内部类：非静态内部类" class="headerlink" title="成员内部类：非静态内部类"></a>成员内部类：非静态内部类</h3><p>不允许在非静态内部类中定义静态成员</p><p>非静态内部类对象中，保存了一个寄生的外部类对象的引用，即<code>&#123;外部类类名&#125;.this</code></p><p><img src="https://img.cngo.cloudns.nz/file/c786c8c342fd63f5d0016.png"></p><p>显示创建内部类实例对象来调用访问其实例成员</p><p align="center" style="line-height: 1;"><font size=1 face="黑体">DiscernVariable.java</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DiscernVariable</span><br>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;外部类的实例变量&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InClass</span><br>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;内部类的实例变量&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">info</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;局部变量&quot;</span>;<br><span class="hljs-comment">// 通过 外部类类名.this.varName 访问外部类实例变量</span><br>System.out.println(<span class="hljs-string">&quot;外部类的实例变量值：&quot;</span><br>+ DiscernVariable.<span class="hljs-built_in">this</span>.prop);<br><span class="hljs-comment">// 通过 this.varName 访问内部类实例的变量</span><br>System.out.println(<span class="hljs-string">&quot;内部类的实例变量值：&quot;</span> + <span class="hljs-built_in">this</span>.prop);<br><span class="hljs-comment">// 直接访问局部变量</span><br>System.out.println(<span class="hljs-string">&quot;局部变量的值：&quot;</span> + prop);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">InClass</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InClass</span>();<br>in.info();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">DiscernVariable</span>().test();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>外部类以外调用非静态内部类</strong></p><p>内部类完整类名 OutClass.InnerClass</p><p>必须先创建外部类对象然后<code>outerInstance.new InnerConstructor()</code>创建内部类实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Out</span><br>&#123;<br><span class="hljs-comment">// 定义一个内部类，不使用访问控制符，</span><br><span class="hljs-comment">// 即只有同一个包中其他类可访问该内部类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">In</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">In</span><span class="hljs-params">(String msg)</span><br>&#123;<br>System.out.println(msg);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CreateInnerInstance</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>Out.<span class="hljs-type">In</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Out</span>().<span class="hljs-keyword">new</span> <span class="hljs-title class_">In</span>(<span class="hljs-string">&quot;测试信息&quot;</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">上面代码可改为如下三行代码：</span><br><span class="hljs-comment">使用OutterClass.InnerClass的形式定义内部类变量</span><br><span class="hljs-comment">Out.In in;</span><br><span class="hljs-comment">创建外部类实例，非静态内部类实例将寄存在该实例中</span><br><span class="hljs-comment">Out out = new Out();</span><br><span class="hljs-comment">通过外部类实例和new来调用内部类构造器创建非静态内部类实例</span><br><span class="hljs-comment">in = out.new In(&quot;测试信息&quot;);</span><br><span class="hljs-comment">*/</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="成员内部类：static-静态内部类"><a href="#成员内部类：static-静态内部类" class="headerlink" title="成员内部类：static 静态内部类"></a>成员内部类：static 静态内部类</h3><p>属于外部类本身，只能访问外部类类成员，而不能访问外部类实例成员</p><p>静态内部类可包含静态和非静态成员，但非静态成员也无法访问外部类实例成员</p><blockquote><p><strong>静态内部类对象只持有外部类的引用，没有持有外部类对象的引用。</strong>如果允许静态内部类的实例方法访问外部类的实例成员，但找不到被寄生的外部类对象，这将引起错误。</p></blockquote><p>外部类可通过静态内部类类名访问其类成员，或通过静态内部类对象访问其实例成员</p><p align="center" style="line-height: 1;"><font size=1 face="黑体">CreateStaticInnerInstance.java</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticOutS</span><br>&#123;<br><span class="hljs-comment">// 定义一个静态内部类，不使用访问控制符，</span><br><span class="hljs-comment">// 即同一个包中其他类可访问该内部类</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticIn</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">StaticIn</span><span class="hljs-params">()</span><br>&#123;<br>System.out.println(<span class="hljs-string">&quot;静态内部类的构造器&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CreateStaticInnerInstance</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>StaticOut.<span class="hljs-type">StaticIn</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StaticOut</span>.StaticIn();<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">上面代码可改为如下两行代码：</span><br><span class="hljs-comment">使用OutterClass.InnerClass的形式定义内部类变量</span><br><span class="hljs-comment">StaticOut.StaticIn in;</span><br><span class="hljs-comment">通过new来调用内部类构造器创建静态内部类实例</span><br><span class="hljs-comment">in = new StaticOut.StaticIn();</span><br><span class="hljs-comment">*/</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p>局部内部类在方法中定义，仅在方法中有效，不能使用<code>访问控制符</code>和<code>static</code>修饰</p><p align="center" style="line-height: 1;"><font size=1 face="黑体">LocalInnerClass.java</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LocalInnerClass</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-comment">// 定义局部内部类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerBase</span><br>&#123;<br><span class="hljs-type">int</span> a;<br>&#125;<br><span class="hljs-comment">// 定义局部内部类的子类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerSub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InnerBase</span><br>&#123;<br><span class="hljs-type">int</span> b;<br>&#125;<br><span class="hljs-comment">// 创建局部内部类的对象</span><br><span class="hljs-type">InnerSub</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InnerSub</span>();<br>is.a = <span class="hljs-number">5</span>;<br>is.b = <span class="hljs-number">8</span>;<br>System.out.println(<span class="hljs-string">&quot;InnerSub对象的a和b实例变量是：&quot;</span><br>+ is.a + <span class="hljs-string">&quot;,&quot;</span> + is.b);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>生成LocalInnerClass.class，LocalInnerClass$1InnerBase.class，LocalInnerClass$1InnerSub.class</p><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>匿名内部类适合创建一次性使用的类</p><p>匿名内部类创建时立即创建一个实例，类定义立即消失，不能重复使用</p><p>匿名内部类必须继承一个父类，或实现一个接口，但最多只能继承一个父类，或实现一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> 实现接口() | 父类构造器(实参列表)<br>&#123;<br>    <span class="hljs-comment">//不能定义构造器（因为没有类名），但可以有初始化块</span><br>    <span class="hljs-comment">//不能定义为抽象类（因为立即创建实例）</span><br>&#125;<br></code></pre></td></tr></table></figure><p>实现例子：</p><p align="center" style="line-height: 1;"><font size=1 face="黑体">AnonymousInner.java</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Device</span><br>&#123;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Device</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Device</span><span class="hljs-params">(String name)</span><br>&#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-comment">// 此处省略了name的setter和getter方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span><br>&#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnonymousInner</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Device d)</span><br>&#123;<br>System.out.println(<span class="hljs-string">&quot;购买了一个&quot;</span> + d.getName()<br>+ <span class="hljs-string">&quot;，花掉了&quot;</span> + d.getPrice());<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-type">AnonymousInner</span> <span class="hljs-variable">ai</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnonymousInner</span>();<br><span class="hljs-comment">// 调用有参数的构造器创建Device匿名实现类的对象</span><br>ai.test(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Device</span>(<span class="hljs-string">&quot;电子示波器&quot;</span>)<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">67.8</span>;<br>&#125;<br>&#125;);<br><span class="hljs-comment">// 调用无参数的构造器创建Device匿名实现类的对象</span><br><span class="hljs-type">Device</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Device</span>()<br>&#123;<br><span class="hljs-comment">// 初始化块</span><br>&#123;<br>System.out.println(<span class="hljs-string">&quot;匿名内部类的初始化块...&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 实现抽象方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">56.2</span>;<br>&#125;<br><span class="hljs-comment">// 重写父类的实例方法</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;键盘&quot;</span>;<br>&#125;<br>&#125;;<br>ai.test(d);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>匿名内部类访问的局部变量必须按有final修饰的来用，如示例中的age，Java8以后会自动修饰final</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span><br>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ATest</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;     <span class="hljs-comment">// ①</span><br><span class="hljs-comment">// 下面代码将会导致编译错误</span><br><span class="hljs-comment">// 由于age局部变量被匿名内部类访问了，因此age相当于被final修饰了</span><br><span class="hljs-comment">//age = 2;</span><br><span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>()<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">// 在Java 8以前下面语句将提示错误：age必须使用final修饰</span><br><span class="hljs-comment">// 从Java 8开始，匿名内部类、局部内部类允许访问非final的局部变量</span><br>System.out.println(age);<br>&#125;<br>&#125;;<br>a.test();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 类与对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java抽象类与接口</title>
      <link href="/posts/1229.html"/>
      <url>/posts/1229.html</url>
      
        <content type="html"><![CDATA[<div class="note note-success">            <p>对应《疯狂Java讲义（第5版）》6.5-6.6 章节</p>          </div><h2 id="抽象类（abstract）"><a href="#抽象类（abstract）" class="headerlink" title="抽象类（abstract）"></a>抽象类（abstract）</h2><p><strong>从多个类中抽象出来的模板，避免子类设计的随意性。</strong></p><p>某种情况下，父类只能知道子类应该具备一个怎样的方法，但是不能够明确知道如何实现该方法，只能在子类中才能确定如何去实现方法体。例如：所有几何图形都应该具备一个计算面积的方法，但是不同的几何图形计算面积的方式不同。</p><p><strong>抽象方法</strong>（abstract修饰）没有方法主体，表明这个方法必须由子类重写实现。</p><blockquote><p>public abstract void test( ); 后面无{ }<br>public void test( ){ } 已经定义方法体，只是方法体为空，不可使用abstract修饰</p></blockquote><p>Java语法规定，包含抽象方法的类只能定义为<strong>抽象类</strong>。其中，包含抽象方法指：</p><blockquote><p>直接定义一个抽象方法<br>继承抽象类或接口,但没有完全实现全部抽象方法</p></blockquote><p>抽象类<strong>无法实例化</strong>，无法使用new创建抽象类的实例，抽象类只能被继承，其构造器只能在创建子类实例时通过子类调用。</p><p>抽象类普通方法可依赖于抽象方法，而抽象方法推迟到子类中实现。</p><p align="center" style="line-height: 1;"><font size=1 face="黑体">Shape.java</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span><br>&#123;<br>&#123;<br>System.out.println(<span class="hljs-string">&quot;执行Shape的初始化块...&quot;</span>);<br>&#125;<br><span class="hljs-keyword">private</span> String color;<br><span class="hljs-comment">// 定义一个计算周长的抽象方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calPerimeter</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 定义一个返回形状的抽象方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">getType</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 定义Shape的构造器，该构造器并不是用于创建Shape对象，</span><br><span class="hljs-comment">// 而是用于被子类调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Shape</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Shape</span><span class="hljs-params">(String color)</span><br>&#123;<br>System.out.println(<span class="hljs-string">&quot;执行Shape的构造器...&quot;</span>);<br><span class="hljs-built_in">this</span>.color = color;<br>&#125;<br><span class="hljs-comment">// 省略color的setter和getter方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setColor</span><span class="hljs-params">(String color)</span><br>&#123;<br><span class="hljs-built_in">this</span>.color = color;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getColor</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.color;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p align="center" style="line-height: 1;"><font size=1 face="黑体">Triangle.java</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span><br>&#123;<br><span class="hljs-comment">// 定义三角形的三边</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">double</span> a;<br><span class="hljs-keyword">private</span> <span class="hljs-type">double</span> b;<br><span class="hljs-keyword">private</span> <span class="hljs-type">double</span> c;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Triangle</span><span class="hljs-params">(String color , <span class="hljs-type">double</span> a</span><br><span class="hljs-params">, <span class="hljs-type">double</span> b , <span class="hljs-type">double</span> c)</span><br>&#123;<br><span class="hljs-built_in">super</span>(color);<br><span class="hljs-built_in">this</span>.setSides(a , b , c);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSides</span><span class="hljs-params">(<span class="hljs-type">double</span> a , <span class="hljs-type">double</span> b , <span class="hljs-type">double</span> c)</span><br>&#123;<br><span class="hljs-keyword">if</span> (a &gt;= b + c || b &gt;= a + c || c &gt;= a + b)<br>&#123;<br>System.out.println(<span class="hljs-string">&quot;三角形两边之和必须大于第三边&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-built_in">this</span>.a = a;<br><span class="hljs-built_in">this</span>.b = b;<br><span class="hljs-built_in">this</span>.c = c;<br>&#125;<br><span class="hljs-comment">// 重写Shape类的的计算周长的抽象方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calPerimeter</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">return</span> a + b + c;<br>&#125;<br><span class="hljs-comment">// 重写Shape类的的返回形状的抽象方法</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getType</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;三角形&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p align="center" style="line-height: 1;"><font size=1 face="黑体">Circle.java</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span><br>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">double</span> radius;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Circle</span><span class="hljs-params">(String color , <span class="hljs-type">double</span> radius)</span><br>&#123;<br><span class="hljs-built_in">super</span>(color);<br><span class="hljs-built_in">this</span>.radius = radius;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRadius</span><span class="hljs-params">(<span class="hljs-type">double</span> radius)</span><br>&#123;<br><span class="hljs-built_in">this</span>.radius = radius;<br>&#125;<br><span class="hljs-comment">// 重写Shape类的的计算周长的抽象方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calPerimeter</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * Math.PI * radius;<br>&#125;<br><span class="hljs-comment">// 重写Shape类的的返回形状的抽象方法</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getType</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">return</span> getColor() + <span class="hljs-string">&quot;圆形&quot;</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-type">Shape</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Triangle</span>(<span class="hljs-string">&quot;黑色&quot;</span> , <span class="hljs-number">3</span> , <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br><span class="hljs-type">Shape</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>(<span class="hljs-string">&quot;黄色&quot;</span> , <span class="hljs-number">3</span>);<br>System.out.println(s1.getType());<br>System.out.println(s1.calPerimeter());<br>System.out.println(s2.getType());<br>System.out.println(s2.calPerimeter());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Shape类型引用变量可直接指向Triangle和Circle类型的对象，调用相应方法，无需转换为子类类型，更好发挥<strong>多态</strong>的优势。</p><h2 id="接口（interface）"><a href="#接口（interface）" class="headerlink" title="接口（interface）"></a>接口（interface）</h2><p><strong>定义多个类应遵守的规范，规定这批类必须提供某些方法，而不关心实现细节</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">[<span class="hljs-keyword">public</span>] interface 接口名 extends 父接口<span class="hljs-number">1</span>, 父接口<span class="hljs-number">2.</span>..<br>&#123;<br>    成员变量（静态常量）定义<br>        <span class="hljs-comment">//自动添加public static final修饰符，必须定义时指定默认值</span><br>    抽象方法（普通方法）定义<br>        <span class="hljs-comment">//自动使用public abstract修饰</span><br>    内部类、接口、枚举定义<br>        <span class="hljs-comment">//自动使用public abstract修饰</span><br>    私有方法、默认方法或类方法定义（Java9新增）<br>        <span class="hljs-comment">//默认方法 default</span><br>        <span class="hljs-comment">//类方法   static</span><br>        <span class="hljs-comment">//私有方法 private</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    不能包含构造器和初始化块</span><br><span class="hljs-comment">    */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>修饰符只能为<code>public</code>或<code>省略</code>(包权限访问)；</p><p>接口只能继承接口，不能继承类，可有多个父接口，获得所有抽象方法、常量；</p><p>一个Java源文件只能有一个Public接口，且文件名与接口名相同；</p><p>接口可以用于声明引用变量类型（可引用接口实现类的对象），或通过接口直接调用常量（均为public static final）。</p><p align="center" style="line-height: 1;"><font size=1 face="黑体">Output.java</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Output</span><br>&#123;<br><span class="hljs-comment">// 接口里定义的成员变量只能是常量</span><br><span class="hljs-type">int</span> <span class="hljs-variable">MAX_CACHE_LINE</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br><span class="hljs-comment">// 接口里定义的普通方法只能是public的抽象方法</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">getData</span><span class="hljs-params">(String msg)</span>;<br><span class="hljs-comment">// 在接口中定义默认方法，需要使用default修饰</span><br><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(String... msgs)</span><br>&#123;<br><span class="hljs-keyword">for</span> (String msg : msgs)<br>&#123;<br>System.out.println(msg);<br>&#125;<br>&#125;<br><span class="hljs-comment">// 在接口中定义默认方法，需要使用default修饰</span><br><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>&#123;<br>System.out.println(<span class="hljs-string">&quot;默认的test()方法&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 在接口中定义类方法，需要使用static修饰</span><br><span class="hljs-keyword">static</span> String <span class="hljs-title function_">staticTest</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;接口里的类方法&quot;</span>;<br>&#125;<br><span class="hljs-comment">// 定义私有方法</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">foo</span><span class="hljs-params">()</span><br>&#123;<br>System.out.println(<span class="hljs-string">&quot;foo私有方法&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 定义私有静态方法</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bar</span><span class="hljs-params">()</span><br>&#123;<br>System.out.println(<span class="hljs-string">&quot;bar私有静态方法&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>默认方法 default，自动添加public，只能由<strong>接口的实现类的实例</strong>调用默认方法，相当于有方法体的实例方法</li><li>类方法 static，自动添加public，可以由接口直接调用</li><li>私有方法 private，私有类方法 private static ，用于实现隐藏的工具方法，为默认方法或类方法提供支持</li></ul><h3 id="接口被类实现（implements）"><a href="#接口被类实现（implements）" class="headerlink" title="接口被类实现（implements）"></a>接口被类实现（implements）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] class 类名 extends 父类 implements 接口<span class="hljs-number">1</span>, 接口<span class="hljs-number">2.</span>..<br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>类必须实现接口定义的全部抽象方法</strong>，否则将保留抽象方法，且必须定义为<strong>抽象类</strong>；</p><p>实现接口方法，必须使用<code>public</code>控制符，权限只能更大（接口抽象方法默认public abstract）；</p><p>可同时实现多个接口，弥补单继承的不足。</p><p align="center" style="line-height: 1;"><font size=1 face="黑体">Printer.java</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义一个Product接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Product</span><br>&#123;<br><span class="hljs-type">int</span> <span class="hljs-title function_">getProduceTime</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-comment">// 让Printer类实现Output和Product接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Printer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Output</span> , Product<br>&#123;<br><span class="hljs-keyword">private</span> String[] printData<br>= <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[MAX_CACHE_LINE];<br><span class="hljs-comment">// 用以记录当前需打印的作业数</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">dataNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">// 只要还有作业，继续打印</span><br><span class="hljs-keyword">while</span>(dataNum &gt; <span class="hljs-number">0</span>)<br>&#123;<br>System.out.println(<span class="hljs-string">&quot;打印机打印：&quot;</span> + printData[<span class="hljs-number">0</span>]);<br><span class="hljs-comment">// 把作业队列整体前移一位，并将剩下的作业数减1</span><br>System.arraycopy(printData , <span class="hljs-number">1</span><br>, printData, <span class="hljs-number">0</span>, --dataNum);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getData</span><span class="hljs-params">(String msg)</span><br>&#123;<br><span class="hljs-keyword">if</span> (dataNum &gt;= MAX_CACHE_LINE)<br>&#123;<br>System.out.println(<span class="hljs-string">&quot;输出队列已满，添加失败&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">// 把打印数据添加到队列里，已保存数据的数量加1。</span><br>printData[dataNum++] = msg;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getProduceTime</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">45</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-comment">// 创建一个Printer对象，当成Output使用</span><br><span class="hljs-type">Output</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Printer</span>();<br>o.getData(<span class="hljs-string">&quot;轻量级Java EE企业应用实战&quot;</span>);<br>o.getData(<span class="hljs-string">&quot;疯狂Java讲义&quot;</span>);<br>o.out();<br>o.getData(<span class="hljs-string">&quot;疯狂Android讲义&quot;</span>);<br>o.getData(<span class="hljs-string">&quot;疯狂Ajax讲义&quot;</span>);<br>o.out();<br><span class="hljs-comment">// 调用Output接口中定义的默认方法</span><br>o.print(<span class="hljs-string">&quot;孙悟空&quot;</span> , <span class="hljs-string">&quot;猪八戒&quot;</span> , <span class="hljs-string">&quot;白骨精&quot;</span>);<br>o.test();<br><span class="hljs-comment">// 创建一个Printer对象，当成Product使用</span><br><span class="hljs-type">Product</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Printer</span>();<br>System.out.println(p.getProduceTime());<br><span class="hljs-comment">// 所有接口类型的引用变量都可直接赋给Object类型的变量</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> p;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h2><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p>具体场景：Computer类需要组合一个输出设备，如前文提到的Printer类，在系统重构时，需要用BetterPrinter代替Printer。</p><p>对于如下Computer，完全与Printer类分离，只与Output接口耦合，且不负责创建Output对象。</p><p align="center" style="line-height: 1;"><font size=1 face="黑体">Computer.java</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Computer</span><br>&#123;<br><span class="hljs-keyword">private</span> Output out;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Computer</span><span class="hljs-params">(Output out)</span><br>&#123;<br><span class="hljs-built_in">this</span>.out = out;<br>&#125;<br><span class="hljs-comment">// 定义一个模拟获取字符串输入的方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyIn</span><span class="hljs-params">(String msg)</span><br>&#123;<br>out.getData(msg);<br>&#125;<br><span class="hljs-comment">// 定义一个模拟打印的方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span><br>&#123;<br>out.out();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>提供Output工厂负责生成Output对象，改变<code>getOutput()</code>方法即可更改Output具体的实现类。</p><p align="center" style="line-height: 1;"><font size=1 face="黑体">OutputFactory.java</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OutputFactory</span><br>&#123;<br><span class="hljs-keyword">public</span> Output <span class="hljs-title function_">getOutput</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">//return new Printer();</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BetterPrinter</span>();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-type">OutputFactory</span> <span class="hljs-variable">of</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputFactory</span>();<br><span class="hljs-type">Computer</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Computer</span>(of.getOutput());<br>c.keyIn(<span class="hljs-string">&quot;轻量级Java EE企业应用实战&quot;</span>);<br>c.keyIn(<span class="hljs-string">&quot;疯狂Java讲义&quot;</span>);<br>c.print();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重构后的BetterPrinter，修改<code>return new BetterPrinter()</code>即可运行新的BetterPrinter对象</p><p align="center" style="line-height: 1;"><font size=1 face="黑体">BetterPrinter.java</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BetterPrinter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Output</span><br>&#123;<br><span class="hljs-keyword">private</span> String[] printData<br>= <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[MAX_CACHE_LINE * <span class="hljs-number">2</span>];<br><span class="hljs-comment">// 用以记录当前需打印的作业数</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">dataNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">// 只要还有作业，继续打印</span><br><span class="hljs-keyword">while</span>(dataNum &gt; <span class="hljs-number">0</span>)<br>&#123;<br>System.out.println(<span class="hljs-string">&quot;高速打印机正在打印：&quot;</span> + printData[<span class="hljs-number">0</span>]);<br><span class="hljs-comment">// 把作业队列整体前移一位，并将剩下的作业数减1</span><br>System.arraycopy(printData , <span class="hljs-number">1</span>, printData, <span class="hljs-number">0</span>, --dataNum);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getData</span><span class="hljs-params">(String msg)</span><br>&#123;<br><span class="hljs-keyword">if</span> (dataNum &gt;= MAX_CACHE_LINE * <span class="hljs-number">2</span>)<br>&#123;<br>System.out.println(<span class="hljs-string">&quot;输出队列已满，添加失败&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">// 把打印数据添加到队列里，已保存数据的数量加1。</span><br>printData[dataNum++] = msg;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>适用场景：某个方法需要完成某一行为，但具体实现无法确定，必须等到执行该方法时才可以确定</p><p>具体一点：某个方法需要遍历某个数组的数组元素，但无法确定在遍历时如何处理这些元素，需要在调用该方法时指定具体的处理行为</p><p>使用Command接口定义方法，封装处理行为，但具体行为尚未定义。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Command</span><br>&#123;<br><span class="hljs-comment">// 接口里定义的process()方法用于封装“处理行为”</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">int</span>[] target)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>数组的处理类中，Command参数负责具体的处理行为。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProcessArray</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">int</span>[] target , Command cmd)</span><br>&#123;<br>cmd.process(target);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>传入Command对象，确定数组的处理行为。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommandTest</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-type">ProcessArray</span> <span class="hljs-variable">pa</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessArray</span>();<br><span class="hljs-type">int</span>[] target = &#123;<span class="hljs-number">3</span>, -<span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>&#125;;<br><span class="hljs-comment">// 第一次处理数组，具体处理行为取决于PrintCommand</span><br>pa.process(target , <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintCommand</span>());<br>System.out.println(<span class="hljs-string">&quot;------------------&quot;</span>);<br><span class="hljs-comment">// 第二次处理数组，具体处理行为取决于SquareCommand</span><br>pa.process(target , <span class="hljs-keyword">new</span> <span class="hljs-title class_">SquareCommand</span>());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>两次不同的处理行为通过<code>PrintCommand</code>和<code>SquareCommand</code>类提供</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Command</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">int</span>[] target)</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> tmp : target )<br>&#123;<br>System.out.println(<span class="hljs-string">&quot;迭代输出目标数组的元素:&quot;</span> + tmp);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SquareCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Command</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">int</span>[] target)</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> tmp : target )<br>&#123;<br>System.out.println(<span class="hljs-string">&quot;数组元素的平方是:&quot;</span> + tmp*tmp);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 类与对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cloudflare相关教程</title>
      <link href="/posts/a111.html"/>
      <url>/posts/a111.html</url>
      
        <content type="html"><![CDATA[<p>​<strong>Cloudflare是偶滴神！</strong></p><ol><li><h2 id="Workers-Pages-项目集"><a href="#Workers-Pages-项目集" class="headerlink" title="Workers &amp; Pages 项目集"></a>Workers &amp; Pages 项目集</h2><ul><li><a href="https://github.com/zhuima/awesome-cloudflare">GitHub - zhuima&#x2F;awesome-cloudflare: 精选的 Cloudflare 工具、开源项目、指南、博客和其他资源列表</a></li><li><a href="https://jialikemeng.github.io/post/Cloudflare%20Workers%20-you-xiu-xiang-mu-ji-jing.html">Cloudflare Workers 优秀项目集景 (jialikemeng.github.io)</a></li><li><a href="https://igdux.com/workers">Cloudflare Workers优秀项目收集（持续更新） - iGdu (igdux.com)</a></li></ul></li><li><h2 id="ZeroTurst-内网穿透系列"><a href="#ZeroTurst-内网穿透系列" class="headerlink" title="ZeroTurst 内网穿透系列"></a>ZeroTurst 内网穿透系列</h2><ul><li><p><a href="https://dmesg.app/cloudflare">Cloudflare | 土豆不好吃 (dmesg.app)</a></p><p>当然如果不想改 config 那么也可以</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cloudflared access ssh <span class="hljs-attr">--hostname</span> ssh<span class="hljs-selector-class">.dmesg</span><span class="hljs-selector-class">.app</span> <span class="hljs-attr">--url</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">10022</span><br></code></pre></td></tr></table></figure><p>然后另外一个窗口</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span> root@<span class="hljs-number">127.0.0.1</span> -p <span class="hljs-number">10022</span><br></code></pre></td></tr></table></figure></li><li><p><a href="https://josephcz.xyz/technology/network/cloudflare-webssh-zerotrust/">使用 Cloudflare ZeroTrust 搭建 WebSSH | Joseph’s Blog (josephcz.xyz)</a></p></li></ul></li><li><h2 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h2></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloudflare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo自定义域名与Fluid评论系统</title>
      <link href="/posts/af57.html"/>
      <url>/posts/af57.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://hexo.fluid-dev.com/docs/guide/#%E8%AF%84%E8%AE%BA">配置指南 | Hexo Fluid 用户手册 (fluid-dev.com)</a></p><p><a href="https://waline.js.org/guide/get-started/">快速上手 | Waline</a></p><p><a href="https://blog.csdn.net/weixin_41747528/article/details/102772937">解决 Hexo 部署 Github Pages 自定义域名失效的问题(即使已添加 CNAME）_gitpages cname值在哪里找到-CSDN博客</a></p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>“<strong>站点配置</strong>“ 指的 Hexo 博客目录下的 <code>_config.yml</code></p><p>“<strong>主题配置</strong>“ 指的是 <code>_config.fluid.yml</code>（高优先级）或者<code>theme/fluid/_config.yml</code> </p><p><code>source</code> 目录都指的是博客目录下的 <code>source</code> 文件夹，不推荐修改主题内 <code>source</code> 目录</p><h2 id="Github自定义域名"><a href="#Github自定义域名" class="headerlink" title="Github自定义域名"></a>Github自定义域名</h2><p>找到 <strong>hexo</strong> 博客根目录下的 <strong>source</strong> 文件夹</p><p>新建一个文件，名为 CNAME ，内容为你的域名</p><h2 id="Fluid主题评论系统"><a href="#Fluid主题评论系统" class="headerlink" title="Fluid主题评论系统"></a>Fluid主题评论系统</h2><ul><li><a href="https://valine.js.org/configuration.html">Valine</a>:基于 LeanCloud</li><li><a href="https://waline.js.org/">Waline</a>: 从 Valine 衍生而来，额外增加了服务端和多种功能</li></ul><h2 id="Leancloud配置教程"><a href="#Leancloud配置教程" class="headerlink" title="Leancloud配置教程"></a>Leancloud配置教程</h2><ul><li>注册Leancloud，获得<code>APP ID</code>,<code>APP Key</code> 和 <code>Master Key</code></li><li>防止域名被墙，设置<code>自定义API访问域名</code></li><li>此时Valine配置已经完成，在Valine配置中填入<code>APP ID</code>,<code>APP Key</code>,<code>server_urls</code>即可</li><li>Waline仍需进行服务端配置</li></ul><h2 id="Vercel服务端配置"><a href="#Vercel服务端配置" class="headerlink" title="Vercel服务端配置"></a>Vercel服务端配置</h2><ul><li><p>点击<a href="https://vercel.com/new/clone?repository-url=https://github.com/walinejs/waline/tree/main/example">Vercel自动部署</a>，跳转至 Vercel 进行 Server 端部署</p></li><li><p>设置环境变量</p><table><thead><tr><th>项</th><th>值</th></tr></thead><tbody><tr><td>LEAN_ID</td><td>APP ID</td></tr><tr><td>LEAN_KEY</td><td>APP KEY</td></tr><tr><td>LEAN_MASTER_KEY</td><td>Master Key</td></tr><tr><td><em>LEAN_SERVER</em></td><td>自定义API访问域名</td></tr></tbody></table></li><li><p>测试访问是否正常</p></li><li><p>绑定自定义域名</p><p>国内vercel.app已被DNS污染</p><p>CNAME值使用vercel国内专用<code>name-china.vercel-dns.com.</code></p></li><li><p>此时Valine配置已经完成，在Waline配置中填入serverURL,值为<code>https://&#123;自定义域名&#125;</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Fluid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo|Fluid主题功能测试</title>
      <link href="/posts/d574.html"/>
      <url>/posts/d574.html</url>
      
        <content type="html"><![CDATA[<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://hexo.io/zh-cn/docs/">🔗文档 | Hexo</a></p><p><a href="https://hexo.fluid-dev.com/docs/">🔗Hexo Fluid 用户手册 (fluid-dev.com)</a></p><p><a href="https://www.imooc.com/wiki/markdownlesson">🔗Markdown 入门教程-慕课网 (imooc.com)</a></p><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><blockquote><p>参考链接：<a href="https://github.com/MoePlayer/hexo-tag-dplayer">MoePlayer&#x2F;hexo-tag-dplayer: Embed dplayer in Hexo posts&#x2F;pages (github.com)</a></p><p>测试视频URL：<a href="https://blog.csdn.net/weixin_41010198/article/details/88055078">MP4视频测试URL地址，亲测有效_视频地址-CSDN博客</a></p><p><a href="https://media.w3.org/2010/05/sintel/trailer.mp4">https://media.w3.org/2010/05/sintel/trailer.mp4</a></p><p><a href="https://pan.cngo.us.kg/raw/public/trailer.mp4">https://pan.cngo.us.kg/raw/public/trailer.mp4</a></p></blockquote><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&#123;<span class="hljs-meta">%</span> dplayer <span class="hljs-string">&quot;url=http://vjs.zencdn.net/v/oceans.mp4&quot;</span> <span class="hljs-string">&quot;pic=&quot;</span> <span class="hljs-string">&quot;autoplay=false&quot;</span>  <span class="hljs-meta">%</span>&#125;<br></code></pre></td></tr></table></figure><div id="dplayer1" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer1"),"video":{"url":"https://media.w3.org/2010/05/sintel/trailer.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><h3 id="front-matter（文章前注）"><a href="#front-matter（文章前注）" class="headerlink" title="front-matter（文章前注）"></a>front-matter（文章前注）</h3><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量</p><p>要修改<code>hexo new &quot;&#123;文章名&#125;&quot;</code>时生成的默认Front-matter模板，可修改<strong>模板文件</strong><code>/scaffolds/post.md</code></p><blockquote><p>表格居中方法：<a href="https://www.cnblogs.com/jianmuzi/p/16795528.html">Markdown表格居中显示 - jianmuzi - 博客园 (cnblogs.com)</a></p></blockquote><div style="width: auto; display: table; margin-left: auto; margin-right: auto;"><table><thead><tr><th>项</th><th>释义</th></tr></thead><tbody><tr><td>title</td><td>文章标题</td></tr><tr><td>date</td><td>建立日期</td></tr><tr><td>updated</td><td>更新时间</td></tr><tr><td>sticky</td><td>设置该项时置顶，值越大越靠前</td></tr><tr><td>tags</td><td>标签 [Hexo, Fluid]</td></tr><tr><td>categories</td><td>分类 [Technical articles, Linux] [一级分类，二级分类]</td></tr><tr><td>index_img</td><td>缩略图</td></tr><tr><td>banner_img</td><td>顶部大图</td></tr><tr><td>category_bar</td><td>左侧显示同分类文章</td></tr><tr><td>comments</td><td>评论开关或指定评论系统</td></tr><tr><td>math</td><td>数学公式渲染开关</td></tr><tr><td>mermaid</td><td>流程图渲染开关</td></tr><tr><td>hide</td><td>是否隐藏，这两个设置了就不会显示在首页了</td></tr><tr><td>archive</td><td>是否归档</td></tr><tr><td>excerpt</td><td>文章摘要</td></tr><tr><td>layout</td><td>布局，文章默认post</td></tr></tbody></table></div><h3 id="图片测试"><a href="#图片测试" class="headerlink" title="图片测试"></a>图片测试</h3><p><img src="/img/preview.jpeg"></p><h3 id="引用块-blockquote"><a href="#引用块-blockquote" class="headerlink" title="引用块 blockquote"></a>引用块 blockquote</h3><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote><h3 id="组图"><a href="#组图" class="headerlink" title="组图"></a>组图</h3><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/cngoxu/hexo@master/img/preview.jpeg"></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/cngoxu/hexo@master/img/preview.jpeg"></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/cngoxu/hexo@master/img/preview.jpeg"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/cngoxu/hexo@master/img/preview.jpeg"></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/cngoxu/hexo@master/img/preview.jpeg"></div></div></div><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>这是一句话<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="参考资料1">[1]</span></a></sup></p><h3 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h3><div class="note note-success">            <p>这是一个便签</p>          </div><p class="note note-primary">这是一个HTML形式便签</p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>这是一个<span class="label label-primary">标签</span></p><p>这是一个行内<span class="label label-warning">HTML标签</span></p><h3 id="折叠块"><a href="#折叠块" class="headerlink" title="折叠块"></a>折叠块</h3>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-278eddbe" role="button" aria-expanded="false" aria-controls="collapse-278eddbe">        <div class="fold-arrow">▶</div>折叠内容的标题      </div>      <div class="fold-collapse collapse" id="collapse-278eddbe">        <div class="fold-content">          <p>这里是折叠显示的内容，支持Markdown</p>        </div>      </div>    </div><h3 id="勾选框"><a href="#勾选框" class="headerlink" title="勾选框"></a>勾选框</h3><p><code>&#123;% cb 勾选框示例True, true, false %&#125;</code></p><p><code>&#123;% cb 勾选框示例False, false, false %&#125;</code></p><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><a class="btn" href="/"  title="点击可跳转" target="_blank">跳转到首页</a><p><a class="btn" href="/" title="点击可跳转">跳转到首页</a></p><h3 id="LaTeX数学公式（和最终浏览器渲染有关）"><a href="#LaTeX数学公式（和最终浏览器渲染有关）" class="headerlink" title="LaTeX数学公式（和最终浏览器渲染有关）"></a>LaTeX数学公式（和最终浏览器渲染有关）</h3><p>$$<br>F(0) &#x3D; \frac{1}{T}\int_0^T f(x)dx<br>$$</p><p>$$<br>E&#x3D;mc^2<br>$$</p><h3 id="Mermaid流程图"><a href="#Mermaid流程图" class="headerlink" title="Mermaid流程图"></a>Mermaid流程图</h3><pre><code class=" mermaid">classDiagramClass01 &lt;|-- AveryLongClass : CoolClass03 *-- Class04Class05 o-- Class06Class07 .. Class08Class09 --&gt; C2 : Where am i?Class09 --* C3Class09 --|&gt; Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaClass08 &lt;--&gt; C2: Cool label</code></pre><section class="footnotes"><h4>参考资料</h4><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>参考资料1<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>参考资料2<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Fluid </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小米平板2ROOT教程</title>
      <link href="/posts/adfa.html"/>
      <url>/posts/adfa.html</url>
      
        <content type="html"><![CDATA[<h3 id="下载开发版线刷包"><a href="#下载开发版线刷包" class="headerlink" title="下载开发版线刷包"></a>下载开发版线刷包</h3><blockquote><p>链接1：<a href="https://roms.miuier.com/zh-cn/devices/latte/">小米平板 2(latte) 官方ROM下载 - MIUI官方ROM仓库 (miuier.com)</a></p><p>链接2：<a href="https://xiaomirom.com/rom/mipad-2-latte-china-fastboot-recovery-rom">小米平板 2 (latte) 国行版 Fastboot 线刷包 &amp; Recovery 卡刷包 ROM</a></p></blockquote><p>找到开发版最新8.4.26</p><ul><li><strong>机型名称 ：</strong>小米平板 2</li><li><strong>机型代号 ：</strong>latte</li><li><strong>解锁 B L ：</strong>所有线刷都以解锁Bootloader为前提，并且解锁Bootloader时会清除数据</li></ul><h3 id="准备刷机工具"><a href="#准备刷机工具" class="headerlink" title="准备刷机工具"></a>准备刷机工具</h3><p>两种方法(各自成功一次)</p><ul><li><h4 id="OneKey2MIUI"><a href="#OneKey2MIUI" class="headerlink" title="OneKey2MIUI"></a>OneKey2MIUI</h4><blockquote><p>参考链接：<a href="https://blog.csdn.net/weixin_41939688/article/details/103223262">小米平板2 Windows刷回MIUI9线刷教程（2019）_onekey2miui-CSDN博客</a></p><p>链接: <a href="https://pan.baidu.com/s/1eCYqyz_idXjjD_PjU3GQPg">https://pan.baidu.com/s/1eCYqyz_idXjjD_PjU3GQPg</a>提取码: m4bf</p></blockquote><ol><li><p>安装驱动 Intel_Android_Driver_v1.10.0</p></li><li><p>平板进入DNX FASTBOOT MODE</p><p>关机状态下，按住音量+、音量-、电源键开机</p></li><li><p>连接电脑，<strong>配置设备驱动程序</strong></p><p>设备管理器找到接入设备，配置驱动程序为Intel Android AD</p><p>浏览计算机上的驱动程序-从计算机上的可用驱动列表中选取-android Phone-android ADB interface</p></li><li><p>复制一键刷机文件<code>OneKey2MIUI</code>到线刷包文件夹</p></li><li><p>双击打开<code>DNX_flash_all.bat</code>开始刷机</p></li></ol></li><li><h4 id="XiaomiFlash"><a href="#XiaomiFlash" class="headerlink" title="XiaomiFlash"></a>XiaomiFlash</h4><p>XiaomiFlash官方刷机工具使用简单，功能强大，你可以通过该款小米线刷工具来对小米手机进行刷机操作。</p><blockquote><p>参考链接：<a href="https://onfix.cn/course/319?bid=1&mid=119">小米（Mi） 平板2小米（Mi） 平板2 手机Fastboot线刷详细教程，通过线刷的升级方法刷机解锁 (onfix.cn)</a></p><p>下载地址：<a href="https://pan.baidu.com/s/1TtnpCaISzJ0oeJ9l_2fzqA">https://pan.baidu.com/s/1TtnpCaISzJ0oeJ9l_2fzqA</a>提取密码：x1v7</p></blockquote><ol><li>安装驱动：下载并解压刷机工具，双击“XiaoMiFlash.exe”运行，点击【Driver】弹出窗口后点击【安装】</li><li>进入Fastboot模式：关机状态下，同时按住音量上下+电源键进入DNX Fastboot模式，将手机USB连接电脑，然借助工具<strong>OneKey2MIUI</strong>进入Fastboot模式</li><li>加载设备，刷机程序会自动识别手机</li><li>选择解压后的线刷包目录，开始刷机</li></ol></li></ul><h3 id="解锁Bootloader-不清楚怎么成功的"><a href="#解锁Bootloader-不清楚怎么成功的" class="headerlink" title="解锁Bootloader(不清楚怎么成功的)"></a>解锁Bootloader(不清楚怎么成功的)</h3><ul><li>进入Fastboot模式连接电脑</li><li>配置驱动为Android Bootloader Interface</li></ul><blockquote><p>感觉没用:<a href="https://web.vip.miui.com/page/info/mio/mio/detail?postId=42491267&app_version=dev.20051">Bootloader解锁教程 (miui.com)</a></p><p>解锁工具:<a href="http://www.miui.com/unlock/index.html">申请解锁小米手机 (miui.com)</a></p></blockquote><h3 id="准备ROOT"><a href="#准备ROOT" class="headerlink" title="准备ROOT"></a>准备ROOT</h3><p>两种方法</p><ul><li><p>刷入第三方Recovery(成功)</p><blockquote><p>教程：<a href="https://www.bilibili.com/video/BV12K4y1K73n/?vd_source=14453b684dcfb0e5fd9184685a513661">小米平板2获取root，刷twrp教程_哔哩哔哩_bilibili</a></p><p>链接：<a href="https://pan.baidu.com/s/1bQtQ0ZcV58WOZ43HtjhrBA">https://pan.baidu.com/s/1bQtQ0ZcV58WOZ43HtjhrBA</a> 提取码:g58o</p></blockquote><ol><li><p>关机状态下按电源键开机，接着同时按住音量上和下键，直到进入DNX模式。</p><p>PS：进入后，会有一句黄色字体的话：DNX FASTBOOT MODE…… 说明进入了DNX模式</p></li><li><p>紧接着用数据线连接电脑，然后点击<code>MIPAD2一键REC工具.bat</code>，【确认小米平板进入DNX模式后，插入数据线，】</p></li><li><p>会出现两个选项（1是刷入第三方recovery 2是恢复官方recovery） 输入1</p></li><li><p>若成功,则进入’’大MI”界面,twrp就刷入完成了</p></li><li><p>进入Android,复制SuperSU Pro_v2.49.zip卡刷包放入根目录下</p></li><li><p>???进入Recovery模式,【关机按音量+加电源进入大米警告后再按音量+加电源进入twrp】</p></li><li><p>Swip,点击Cache和data进行双清（记得提前备份好数据）</p></li><li><p>然后按底部的桌面键返回菜单，选择Install—&#x2F;sdcard目录下往下拉，找到你之前放入的root卡刷包【SuperSU Pro_v2.49】</p></li><li><p>点击Reboot—Systme：重启进入系统，会出现一个这个大米警告界面，先按音量上键，出现大米下面没有字后再按音量下键退出进入系统</p></li></ol></li><li><p>官方版(测试时Permission Deny)</p><blockquote><p><a href="https://tieba.baidu.com/p/4642340406">『技术』小米平板2 root教程_小米平板吧_百度贴吧 (baidu.com)</a></p><p>附件：ROOTMIPAD2.rar<br>下载地址：<a href="http://pan.baidu.com/s/1skAyUvF">http://pan.baidu.com/s/1skAyUvF</a></p></blockquote><ol><li>刷成开发版，在电脑下载提供的附件并解压</li><li>平板连接电脑并开启usb调试</li><li>双击ROOT.bat，并按照弹出窗口的提示按回车（任意键），平板会自动重启（重启时就可以拔掉数据线了）</li><li>平板重启后打开SuperSu，更新选择常规模式</li><li>平板会再次重启，之后就取得了root权限</li><li>不要用其他root软件代替！会卡米！（如Kingroot，一键root，360root）</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Root </tag>
            
            <tag> Android </tag>
            
            <tag> 小米平板2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Deploy 自定义配置 Ubuntu20.04.6LTS(focal)</title>
      <link href="/posts/557a.html"/>
      <url>/posts/557a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>准备条件：一部安卓手机，需要root</p><p>安装方式：自定义安装Linux镜像</p><p>参考链接</p><ul><li><a href="https://blog.csdn.net/qq_28817367/article/details/130394040">安卓安装Linux Deploy 基础安装&amp;&amp;自定义安装-CSDN博客</a></li><li><a href="https://blog.csdn.net/qq_43509120/article/details/121429387">linux deploy安装指南(升级)-CSDN博客</a></li><li><a href="https://www.cnblogs.com/sw-code/p/14990229.html">使用Linux Deploy将闲置的安卓手机改造简易服务器 - sw-code - 博客园 (cnblogs.com)</a></li><li><a href="https://www.cnblogs.com/sw-code/p/14998645.html">解决chroot下无法使用systemctl </a></li></ul></blockquote><h2 id="1-安装Busybox"><a href="#1-安装Busybox" class="headerlink" title="1.安装Busybox"></a>1.安装Busybox</h2><ul><li>下载安装busybox：<a href="https://github.com/meefik/busybox">https://github.com/meefik/busybox</a>，版本1.34.1</li><li>需要root权限，Install 路径默认 system&#x2F;xbin</li><li>Tips：该软件最好安装，安装后会自带很多Linux命令集，比如ping命令，不安装的话使用ping命令会提示not find command</li></ul><h2 id="2-Linux-Deploy"><a href="#2-Linux-Deploy" class="headerlink" title="2.Linux Deploy"></a>2.Linux Deploy</h2><ul><li><p>下载安装Linux Deploy ：<a href="https://github.com/meefik/linuxdeploy">https://github.com/meefik/linuxdeploy</a>，版本2.6.0</p></li><li><p>左上角设置环境如下，然后更新操作环境：</p><blockquote><p>ENV目录  &#x2F;data&#x2F;user&#x2F;0&#x2F;ru.meefik.linuxdeploy&#x2F;files</p><p>PATH变量  &#x2F;system&#x2F;xbin</p></blockquote></li></ul><h2 id="3-容器安装配置"><a href="#3-容器安装配置" class="headerlink" title="3.容器安装配置"></a>3.容器安装配置</h2><ol><li><p>发行版： rootfs.tar</p></li><li><p>源路径 ： 选取本地文件（全路径+文件名）${EXTERNAL_SRORAGE}&#x2F;rootfs.tar.xz</p><p>下载地址：<a href="https://mirrors.bfsu.edu.cn/lxc-images/images/ubuntu/focal/arm64/cloud/20240610_08%3A13/rootfs.tar.xz">https://mirrors.bfsu.edu.cn/lxc-images/images/ubuntu/focal/arm64/cloud/20240610_08%3A13/rootfs.tar.xz</a></p><p>可在右上角状态中查看系统架构，小米平板2选择amd64，Le2选择arm64</p></li><li><p>安装类型： 镜像</p></li><li><p>安装路径：${EXTERNAL_SRORAGE}&#x2F;Linux&#x2F;ubuntu.img</p></li><li><p>镜像大小： <strong>对应容器大小</strong>（10240M也能成功）</p><p>不要选择自动而是512M以上的值, 并且如果你是通过busybox安装的linux指令环境那么镜像文件大小也不能超过2G</p></li><li><p>文件类型: 选择 ext4 即可</p></li><li><p>用户名及密码自行设置即可(不要设置 root 用户即可)</p></li><li><p>本地化： zh_CN.UTF-8</p></li><li><p>挂载点： 即将手机目录挂在载安装的 linux 下某个目录, 看自己需求</p><p>例：&#x2F;storage&#x2F;emulated&#x2F;0:&#x2F;mnt&#x2F;sdcard&#x2F;</p></li><li><p>SSH： 由于 rootfs 文件里面一般没有 openssh-server, 因此安装时这里不勾选。等到完成后再通过内部通道安装 openssh-server 打开 ssh 服务</p></li><li><p>GUI： 安装阶段请勿勾选, 会失败, rootfs.tar 没有相关资源</p></li></ol><h2 id="4-安装"><a href="#4-安装" class="headerlink" title="4.安装"></a>4.安装</h2><ul><li><p>点击右上角安装</p><blockquote><p>若报错making file system（ext4）…fail，则是因为在安装路径已有镜像文件，删除后重新安装</p></blockquote></li></ul><h2 id="5-进入虚拟机环境"><a href="#5-进入虚拟机环境" class="headerlink" title="5.进入虚拟机环境"></a>5.进入虚拟机环境</h2><p>无SSH，通过其他方法进入虚拟机环境（三种可选）</p><ul><li><p>点击Linux Deploy左上角设置，打开Telnet选项，记住端口号，关闭仅本地主机可连</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">telnet &#123;ip地址&#125; 5023<br></code></pre></td></tr></table></figure></li><li><p>开启USB调试，使用adb进入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb shell<br></code></pre></td></tr></table></figure></li><li><p>安装软件JuiceSSH</p><p>安装链接：<a href="https://fga1.market.xiaomi.com/download/AppStore/057dfe47c57b04f8e0009b7d4c9bb08c5dea90066/com.sonelli.juicessh.apk">小米应用商店</a></p><p>新建连接，类型选择本地设备，点右上角对勾即可</p></li></ul><p>输入su回车，取得root超级权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">su<br></code></pre></td></tr></table></figure><p>输入以下命令回车，进入安装的虚拟机内</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/data/user/0/ru.meefik.linuxdeploy/files/bin/linuxdeploy shell -u root<br></code></pre></td></tr></table></figure><blockquote><p>此时可能报错：chroot: can’t execute ‘&#x2F;bin&#x2F;su’: No such file or directory</p><p>不知道为什么会报这个错，重启手机，不行就重装</p></blockquote><p>成功进入会出现[root@localhost#] 即表示登录进容器内。</p><h2 id="6-其他问题解决"><a href="#6-其他问题解决" class="headerlink" title="6.其他问题解决"></a>6.其他问题解决</h2><ol><li><p>修复DNS解析错误</p><p>删除&#x2F;etc&#x2F;resolv.conf, 重新创建一个&#x2F;etc&#x2F;resolv.conf文件, 建议把权限设置为755。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm /etc/resolv.conf<br>touch /etc/resolv.conf &amp;&amp; chmod 755 /etc/resolv.conf<br></code></pre></td></tr></table></figure><p>然后在软件页面先stop再使用前面进入容器, 再用vi命令查看<code>/etc/resolv.conf</code>文件内容是否与你的网关相匹配</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/resolv.conf<br>cat /etc/resolv.conf<br></code></pre></td></tr></table></figure><p>最后, 使用ping baidu.com命令检查网络连接, 但是可能此时并不能进行软件下载和更新, 因为现在软件源时国外的源。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ping baidu.com<br></code></pre></td></tr></table></figure></li><li><p>修复apt安装错误</p><p>使用vi修改&#x2F;etc&#x2F;passwd中_apt的65535（65534）为3003。操作: 命令: <code>vi /etc/passwd</code>, 再输入<code>/_apt</code>再按<code>enter</code>, 再按<code>i键</code>, 修改65535（65534）为3003, 再按<code>ESC键</code>最后再按:<code>wq回车</code>保存即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/passwd<br></code></pre></td></tr></table></figure></li><li><p>更新软件源为国内源:</p><p>即修改<code>/etc/source.list</code>文件为国内网易, 阿里, 中科大等的镜像网站。可以试试百度修改debian(版本) 国内源, 然后<code>apt-get update</code>后面就是安装软件了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/source.list<br>apt-get update<br></code></pre></td></tr></table></figure><p>推荐北师大软件源：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">deb https://mirrors.bfsu.edu.cn/ubuntu/ focal main restricted universe multiverse<br>deb https://mirrors.bfsu.edu.cn/ubuntu/ focal-updates main restricted universe multiverse<br>deb https://mirrors.bfsu.edu.cn/ubuntu/ focal-backports main restricted universe multiverse<br>deb https://mirrors.bfsu.edu.cn/ubuntu/ focal-security main restricted universe multiverse<br></code></pre></td></tr></table></figure></li><li><p>安装SSH服务端</p><p>上面的工作完成后现在安装SSH服务端开启SSH服务即可, 输入<code>apt install openssh-server</code>, 然后在linux deploy软件容器配置里勾选SSH即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt install openssh-server<br></code></pre></td></tr></table></figure></li><li><p>用户无法使用ping</p><p>root用户登录使用命令<code>usermod -G 3003 root</code>, 重启容器解决。新创建的用户只是将root改为新创建的用户名即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">usermod -G 3003 root<br></code></pre></td></tr></table></figure></li><li><p>root登录其他用户tab键失效</p><p>root账户登录终端输入<code>ln -sf /bin/bash /bin/sh</code>, 软链接bash和sh, 或者搜索 切换默认sh为bash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -sf /bin/bash /bin/sh<br></code></pre></td></tr></table></figure></li></ol><h2 id="7-ssh连接"><a href="#7-ssh连接" class="headerlink" title="7.ssh连接"></a>7.ssh连接</h2><ul><li><p>右下角启用SSH，默认22端口</p></li><li><p>右上角点击配置，重新配置文件</p></li><li><p>点击启动，看到ssh应该启动了</p></li></ul><blockquote><p>可能出现 Permissions 0644 for ‘&#x2F;Users&#x2F;…&#x2F;.ssh&#x2F;..’ are too open…（重装容器解决）</p></blockquote><h2 id="8-备份-rootfs"><a href="#8-备份-rootfs" class="headerlink" title="8.备份 rootfs"></a>8.备份 rootfs</h2><p>右上角导出，选择导出位置，等待完成即可</p><h2 id="9-解决chroot下无法使用systemctl"><a href="#9-解决chroot下无法使用systemctl" class="headerlink" title="9.解决chroot下无法使用systemctl"></a>9.解决chroot下无法使用systemctl</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://github.com/smaknsk/servicectl/archive/1.0.tar.gz<br>sudo tar -xf 1.0.tar.gz -C /usr/local/lib/<br>sudo ln -s /usr/local/lib/servicectl-1.0/servicectl /usr/bin/servicectl<br>sudo ln -s /usr/local/lib/servicectl-1.0/serviced /usr/bin/serviced<br></code></pre></td></tr></table></figure><h3 id="使用servicectl"><a href="#使用servicectl" class="headerlink" title="使用servicectl"></a>使用servicectl</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo servicectl action service<br></code></pre></td></tr></table></figure><p>‎此命令仅执行文件 <code>/usr/lib/systemd/system/$&#123;service&#125;.service</code>中的<code>$&#123;action&#125;</code>， 如果通过的操作启用或禁用，则<code>servicectl</code>将在 <code>$&#123;service&#125;.service</code>上创建或删除<code>symlink</code>以供使用服务。‎</p><p>参数:</p><ul><li>action - 可以是 {<code>start</code>, <code>stop</code>, <code>restart</code>, <code>reload</code>, <code>enable</code>, <code>disable</code>}</li><li>service -在<code>/usr/lib/systemd/system/</code>文件夹中的文件</li></ul><h3 id="使用serviced"><a href="#使用serviced" class="headerlink" title="使用serviced"></a>使用serviced</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">sudo serviced action<br></code></pre></td></tr></table></figure><p>‎此命令执行 <code>$&#123;action&#125;</code> 为所有启用服务。‎</p><p>参数:</p><ul><li>action -默认是<code>start</code>，也可以是： {<code>start</code>, <code>stop</code>, <code>restart</code>, <code>reload</code>, <code>disable</code>}</li></ul><h3 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># inside chroot</span><br>sudo servicectl <span class="hljs-built_in">enable</span> mariadb<br><br><span class="hljs-comment"># outside chroot: </span><br><span class="hljs-comment"># init startup and run all enabled daemons</span><br>sudo <span class="hljs-built_in">chroot</span> /path/to/chroot serviced<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Deploy </tag>
            
            <tag> Root </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客 - Hexo+Markdown+Github Pages</title>
      <link href="/posts/aa1a.html"/>
      <url>/posts/aa1a.html</url>
      
        <content type="html"><![CDATA[<p>参考链接：<a href="https://zhuanlan.zhihu.com/p/514982831?utm_id=0">搭建个人博客 — Hexo+Markdown+Github Pages - 知乎 (zhihu.com)</a></p><h2 id="我是如何创建这个博客的"><a href="#我是如何创建这个博客的" class="headerlink" title="我是如何创建这个博客的"></a>我是如何创建这个博客的</h2><p>这个博客使用了<a href="https://hexo.io/zh-cn/index.html">Hexo</a> 博客框架+<a href="https://hexo.fluid-dev.com/">Fluid</a>主题+Markdown文档编写。主要过程包括：</p><ol><li>安装Hexo博客框架</li><li>建立博客文件并部署</li><li>下载并更改主题</li><li>个性化定制</li><li>写作方面</li></ol><p>为了防止以后需要重蹈覆辙，本篇文章记录了了博客建立的每一步具体操作，可谓“从零开始使用Hexo搭建博客”。此功略亦可供他人参考。</p><h2 id="Hexo博客框架安装"><a href="#Hexo博客框架安装" class="headerlink" title="Hexo博客框架安装"></a>Hexo博客框架安装</h2><p><a href="https://hexo.io/zh-cn/index.html">Hexo</a> 是一款快速简洁高效的博客框架，可支持本地、远端服务器运行以及使用Github Page功能进行托管，是用于捣鼓自己的笔记和写文章发布的利器。Hexo是基于Node.js的服务，因此首先需要下载<a href="http://nodejs.org/">Node.js</a>, 以及<a href="http://git-scm.com/">Git</a>（用于后续拉取文件）。之后的过程，可完全根据<a href="https://hexo.io/zh-cn/docs/">Hexo官方建站文档</a>一步步完成。</p><blockquote><p>在使用hexo命令时，请使用windows自带的命令行，而不是power shell。</p></blockquote><h3 id="建立博客文件并部署"><a href="#建立博客文件并部署" class="headerlink" title="建立博客文件并部署"></a>建立博客文件并部署</h3><p>可完全根据<a href="https://hexo.io/zh-cn/docs/">Hexo官方建站文档</a>一步步完成，建议nodejs版本18以上。</p><h3 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h3><p>安装完毕hexo，此时可以选择一个空文件夹建立博客站点框架，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo init &lt;folder&gt;<br>$ <span class="hljs-built_in">cd</span> &lt;folder&gt;<br>$ npm install<br></code></pre></td></tr></table></figure><blockquote><p>执行后Hexo将会在<code>&lt;folder&gt;</code>文件夹建立站点文件。若 <code>&lt;folder&gt;</code>为空，将在目前文件夹建立站点。</p></blockquote><p>此时，指定文件夹将会出现如下文件目录：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs text">.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes<br></code></pre></td></tr></table></figure><p>其中，有几个文件极为重要：</p><ul><li><code>_config.yml</code> 该文件为网站配置信息，包括网站标题、作者、时间、语言、主题等重要配置和功能。</li><li><code>source/_posts/*.md</code><br><code>source</code> 文件夹为博文的资源文件夹，其中的<code>_posts</code>文件夹储存了<code>markdown</code>文件为网站博文。</li><li><code>themes</code> 文件夹储存了第三方主题。</li></ul><h3 id="建立博文"><a href="#建立博文" class="headerlink" title="建立博文"></a>建立博文</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">$ hexo new &quot;welcome&quot;<br></code></pre></td></tr></table></figure><p>此时 <code>/source/_posts</code> 文件夹中建立了 <code>welcome.md</code> 文件。接着运行</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">$ hexo server<br></code></pre></td></tr></table></figure><p>此时命令行提示</p><p><img src="https://pic4.zhimg.com/80/v2-5345b19a47e3ff994e64d4dce9be5f87_720w.webp" alt="img"></p><p>说明网站已成功在本地部署。浏览器访问 <code>http://localhost:4000/</code> ，显示网站界面如下：</p><p><img src="https://pic1.zhimg.com/80/v2-d6da77b6987e4f86b246f5d743d44190_720w.webp" alt="img"></p><p>此时网站在本地部署成功！</p><blockquote><p>可在命令行执行Crtl+C 停止网站运行。</p></blockquote><h3 id="Github部署"><a href="#Github部署" class="headerlink" title="Github部署"></a>Github部署</h3><p>不推荐用Hexo官方的基于Travis CI的部署方式，虽然自动化程度高但对新手不友好。</p><p>可以直接使用基于github pages的部署方式。首先在github账号下建立名为<del>&lt;github 用户名&gt;.github.io</del>（随意名字即可）的仓库（这将是之后的访问网址），可以使用readme.md进行初始化。之后设置ssh登录。在cmd命令行中输入：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">$ ssh-keygen -t rsa -C &quot;GitHub注册邮箱&quot;<br></code></pre></td></tr></table></figure><p>直接三个回车，不需要密码。这时在 <code>C:/Users/&lt;用户名&gt;/.ssh</code> 文件夹下会建立公钥 <code>id_rsa.pub</code> 文件，将<code>id_rsa.pub</code> 文件中内容全部复制。打开<a href="https://github.com/settings/keys">Github Settings keys</a> 页面，新建new SSH key，填写任意title（hexo blog）和刚才复制的公钥信息，并Add SSH key，结果如下：</p><p>结果如下：</p><p><img src="https://pic3.zhimg.com/80/v2-2f58df1ed53046452f5b662054fa5d5e_720w.webp" alt="img"></p><p>此时打开Git Bash，输入：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">$ ssh git@github.com<br></code></pre></td></tr></table></figure><p>显示：</p><p><img src="https://pic4.zhimg.com/80/v2-edd127505a972e446d4050fb2d71408f_720w.webp" alt="img"></p><p>说明ssh设置成功。</p><blockquote><p>不使用ssh登录的方式会导致后续部署失败。</p></blockquote><p>这时回到博客文件夹，在 <code>_config.yml</code> 文件中修改deploy块的信息（这里 <code>zswzy</code> 是我的git用户名，记得修改）：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">deploy:<br>  type: git<br>  repo: git@github.com:&#123;github用户名&#125;/&#123;仓库名&#125;.git<br>  branch: main<br></code></pre></td></tr></table></figure><blockquote><p>deploy信息中的branch值应为github的默认分支。老版本的github默认分支为master，新版本的统一改为了main。最好在github中检查一下默认分支名称。<br>很多教程中使用了 <code>https</code> 带头的仓库地址，但这会经常导致 <code>Spawn failed</code> 的error。解决方法就是使用这里示范的git带头的地址，并且这完美适用于我们前期设定的ssh密钥。</p></blockquote><p>在博客文件夹下打开命令行，安装Git部署插件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">$ npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>最后部署整个博客：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">$ hexo clean<br>$ hexo generate<br>$ hexo deploy<br></code></pre></td></tr></table></figure><p>此时主目录下出现</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">.deploy_git<br></code></pre></td></tr></table></figure><p>文件夹，该文件夹与github仓库中的文件一致，为页面文件。此时访问 <code>Github用户名.github.io</code> 即可打开博客网页。</p><blockquote><p>每次部署完，Github通常需要几分钟更新网站，此时多刷新几次网站即可。</p></blockquote><h2 id="下载并更改主题"><a href="#下载并更改主题" class="headerlink" title="下载并更改主题"></a>下载并更改主题</h2><p>默认主题为landscape（如上节末尾的图片）。本博客使用第三方Fluid主题，简洁美观。使用第三方主题的基本方法是先下载对应主题（可在Hexo<a href="https://hexo.io/themes/">主题</a>网站上找到），将其放入<code>themes</code> 文件夹，之后在<code>_config.yml</code> 文件中的 <code>theme</code> 块更改名字为对应主题。</p><p>可以在<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid-dev&#x2F;hexo-theme-fluid: :ocean: 一款 Material Design 风格的 Hexo 主题 &#x2F; An elegant Material-Design theme for Hexo (github.com)</a>找到Fluid主题的官方安装教程。</p><h2 id="个性化定制"><a href="#个性化定制" class="headerlink" title="个性化定制"></a>个性化定制</h2><p>可在hexo以及主题各自的的<code>_config.yml</code>文件中更改各项参数，如作者，封面图片等。这些文件基本是自成说明文档的。</p><h2 id="写作方面"><a href="#写作方面" class="headerlink" title="写作方面"></a>写作方面</h2><p>使用markdown的写作规范，包含以下功能：</p><h3 id="文件头规范"><a href="#文件头规范" class="headerlink" title="文件头规范"></a>文件头规范</h3><p>使用— — 的模块，如</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs text">---<br>title: test<br>date: 2022-01-11 15:17:25<br>tags:<br>index_img: /img/thumb-1920-991454.jpg<br>banner_img: /img/thumb-1920-991454.jpg<br>description：<br>---<br></code></pre></td></tr></table></figure><ul><li><code>index_img</code> 是在博客主页显示的博文缩略图。</li><li><code>banner_img</code> 是显示在文章页上方的大图。图片相对路径是从主目录下的<code>source</code> 开始算起的。如引用<code>source</code> 文件夹下的<code>test.jpg</code> 图片，可直接写为 <code>/test.jpg</code> 。</li><li><code>description</code> 是在博客首页显示的文章摘要。</li></ul><blockquote><p>也可用链接形式直接使用网络图片。</p></blockquote><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>可采用</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">```&lt;language&gt; ```<br></code></pre></td></tr></table></figure><p>风格的代码模式，如使用python代码：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">```python<br>def main():<br>    foo()<br>    print(&quot;python&quot;)<br>```<br></code></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://pic2.zhimg.com/80/v2-09d4b26d5c1620497daf6a19c45e0db5_720w.webp" alt="img"></p><blockquote><p>若使用Fluid主题，可以在主题的config文件中开启代码行号显示和一键copy功能。</p></blockquote><p>行间代码使用</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">` &lt;code&gt; `<br></code></pre></td></tr></table></figure><p>用两个&#96; 单引号包围起来。</p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>与markdown写作一样，可使用本地或者在线的。</p><h3 id="注释块"><a href="#注释块" class="headerlink" title="注释块"></a>注释块</h3><p>使用bootstrap风格提示块：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">&#123;% note [class] [no-icon] [summary] %&#125;<br>Any content (support inline tags too).<br>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure><ul><li>[class] : 可选参数。可选值: default | primary | success | info | warning | danger.</li><li>[no-icon] : 可选参数。 Disable icon in note.</li><li>[summary] : 可选参数。 Optional summary of the note.</li></ul><p><img src="https://pic2.zhimg.com/80/v2-c6180d782d1ca815fbe1443415569d31_720w.webp" alt="img"></p><h3 id="Latex公式块"><a href="#Latex公式块" class="headerlink" title="Latex公式块"></a>Latex公式块</h3><p>使用Fluid主题的Latex公式需要注意公式引擎和渲染器，具体配置过程可以参考<a href="https://hexo.fluid-dev.com/docs/guide/#latex-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F">这里</a>。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">$$<br>F[f](0) = \frac&#123;1&#125;&#123;T&#125;\int_0^T f(x)dx<br>$$<br></code></pre></td></tr></table></figure><p>$$<br>F<a href="0">f</a> &#x3D; \frac{1}{T}\int_0^T f(x)dx<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Fluid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/3eec.html"/>
      <url>/posts/3eec.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一个U盘病毒解决日志</title>
      <link href="/posts/7032.html"/>
      <url>/posts/7032.html</url>
      
        <content type="html"><![CDATA[<p>参考链接：<a href="https://blog.csdn.net/weixin_45437033/article/details/135454509">U盘病毒（类removeable disk病毒）_kaspersky文件夹usb drive-CSDN博客</a></p><h2 id="病毒来源猜测"><a href="#病毒来源猜测" class="headerlink" title="病毒来源猜测"></a>病毒来源猜测</h2><p>学校打印店（正值毕业论文打印高峰）</p><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><ul><li>U盘内所有文件消失，主目录存在一个与U盘同名的exe文件，通常命名为<code>Usb Disk（内存）.exe</code></li><li>和<a href="https://www.zhihu.com/question/324277980/answer/1749772992?ivk_sa=1024320u">removeable disk</a>.病毒有点类似的病毒，但又有所不同，特此记录。</li><li>双击exe可以打开文件，同时也会植入病毒程序，导致插入新U盘也会被感染</li></ul><h2 id="杀毒过程"><a href="#杀毒过程" class="headerlink" title="杀毒过程"></a>杀毒过程</h2><ul><li><p>Windows Defender和McAfee根本不报毒！</p><p>但是电脑被感染时，病毒将程序注入敏感文件夹<code>C:\Users\Public\</code>被记录</p></li><li><p>找到了病毒植入位置 例：（C:\Users\Public\GBPCJKKZY）</p></li><li><p>任务管理器中关闭病毒进程（Permission.exe，Transfer.exe）</p></li><li><p>删除病毒文件（C:\Users\Public\GBPCJKKZY）</p></li><li><p>清理注册表，搜索<code>C:\Users\Public\GBPCJKKZY</code>，找到以下注册表值</p><p>路径：计算机\HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</p></li><li><p>将U盘接入安卓手机或Linux系统，可以找到丢失的文件（只是被隐藏），以及病毒文件</p></li></ul><h2 id="文件分享"><a href="#文件分享" class="headerlink" title="文件分享"></a>文件分享</h2><p>蓝奏云：<a href="https://www.lanzoub.com/inkX722bizpe">https://www.lanzoub.com/inkX722bizpe</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 病毒 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
